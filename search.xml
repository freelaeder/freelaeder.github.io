<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>== 和 ===</title>
    <url>/archives/93ae9a14.html</url>
    <content><![CDATA[<h1 id="面试官：-和-区别，分别在什么情况使用"><a href="#面试官：-和-区别，分别在什么情况使用" class="headerlink" title="面试官：== 和 ===区别，分别在什么情况使用"></a>面试官：== 和 ===区别，分别在什么情况使用</h1><p> <img src="https://static.vue-js.com/51b208f0-68df-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、等于操作符"><a href="#一、等于操作符" class="headerlink" title="一、等于操作符"></a>一、等于操作符</h2><p>等于操作符用两个等于号（ == ）表示，如果操作数相等，则会返回 <code>true</code></p>
<p>前面文章，我们提到在<code>JavaScript</code>中存在隐式转换。等于操作符（==）在比较中会先进行类型转换，再确定操作数是否相等</p>
<p>遵循以下规则：</p>
<p>如果任一操作数是布尔值，则将其转换为数值再比较是否相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">true</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> == <span class="number">55</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果一个操作数是对象，另一个操作数不是，则调用对象的 <code>valueOf() </code>方法取得其原始值，再根据前面的规则进行比较</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">valueOf</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> result1 = (obj == <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>null </code>和<code>undefined</code>相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">null</span> == <span class="literal">undefined</span> ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>如果有任一操作数是 <code>NaN</code> ，则相等操作符返回 <code>false</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">NaN</span> == <span class="literal">NaN</span> ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回<code>true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123;name:&quot;xxx&quot;&#125;</span><br><span class="line">let obj2 = &#123;name:&quot;xxx&quot;&#125;</span><br><span class="line">let result1 = (obj1 == obj2 ); // false</span><br></pre></td></tr></table></figure>

<p>下面进一步做个小结：</p>
<ul>
<li><p>两个都为简单类型，字符串和布尔值都会转换成数值，再比较</p>
</li>
<li><p>简单类型与引用类型比较，对象转化成其原始类型的值，再比较</p>
</li>
<li><p>两个都为引用类型，则比较它们是否指向同一个对象</p>
</li>
<li><p>null 和 undefined 相等</p>
</li>
<li><p>存在 NaN 则返回 false</p>
</li>
</ul>
<h2 id="二、全等操作符"><a href="#二、全等操作符" class="headerlink" title="二、全等操作符"></a>二、全等操作符</h2><p>全等操作符由 3 个等于号（ === ）表示，只有两个操作数在不转换的前提下相等才返回 <code>true</code>。即类型相同，值也需相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> === <span class="number">55</span>); <span class="comment">// false，不相等，因为数据类型不同</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="number">55</span> === <span class="number">55</span>); <span class="comment">// true，相等，因为数据类型相同值也相同</span></span><br></pre></td></tr></table></figure>

<p><code>undefined</code> 和 <code>null</code> 与自身严格相等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">null</span> === <span class="literal">null</span>)  <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="literal">undefined</span> === <span class="literal">undefined</span>)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>



<h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p>相等操作符（==）会做类型转换，再进行值的比较，全等运算符不会做类型转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> === <span class="number">55</span>); <span class="comment">// false，不相等，因为数据类型不同</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="number">55</span> === <span class="number">55</span>); <span class="comment">// true，相等，因为数据类型相同值也相同</span></span><br></pre></td></tr></table></figure>

<p><code>null</code> 和 <code>undefined</code> 比较，相等操作符（==）为<code>true</code>，全等为<code>false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">null</span> == <span class="literal">undefined</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="literal">null</span>  === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="string">&#x27;0&#x27;</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;0&#x27;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;0&#x27;</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; \t\r\n&#x27;</span> == <span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>但在比较<code>null</code>的情况的时候，我们一般使用相等操作符<code>==</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(obj.x == <span class="literal">null</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);  <span class="comment">//执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等同于下面写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj.x === <span class="literal">null</span> || obj.x === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用相等操作符（==）的写法明显更加简洁了</p>
<p>所以，除了在比较对象属性为<code>null</code>或者<code>undefined</code>的情况下，我们可以使用相等操作符（==），其他情况建议一律使用全等操作符（===）</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>== 和 ===</tag>
        <tag>js面试</tag>
      </tags>
  </entry>
  <entry>
    <title>BFC</title>
    <url>/archives/c5a97815.html</url>
    <content><![CDATA[<h1 id="面试官：谈谈你对BFC的理解？"><a href="#面试官：谈谈你对BFC的理解？" class="headerlink" title="面试官：谈谈你对BFC的理解？"></a>面试官：谈谈你对BFC的理解？</h1><p><img src="https://static.vue-js.com/c3d68290-9511-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>我们在页面布局的时候，经常出现以下情况：</p>
<ul>
<li>这个元素高度怎么没了？</li>
<li>这两栏布局怎么没法自适应？</li>
<li>这两个元素的间距怎么有点奇怪的样子？</li>
<li>……</li>
</ul>
<p>原因是元素之间相互的影响，导致了意料之外的情况，这里就涉及到<code>BFC</code>概念</p>
<p><code>BFC</code>（Block Formatting Context），即块级格式化上下文，它是页面中的一块渲染区域，并且有一套属于自己的渲染规则：</p>
<ul>
<li>内部的盒子会在垂直方向上一个接一个的放置</li>
<li>对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。</li>
<li>每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此</li>
<li>BFC的区域不会与float的元素区域重叠</li>
<li>计算BFC的高度时，浮动子元素也参与计算</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li>
</ul>
<p><code>BFC</code>目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素</p>
<h2 id="二、触发条件"><a href="#二、触发条件" class="headerlink" title="二、触发条件"></a>二、触发条件</h2><p>触发<code>BFC</code>的条件包含不限于：</p>
<ul>
<li>根元素，即HTML元素</li>
<li>浮动元素：float值为left、right</li>
<li>overflow值不为 visible，为 auto、scroll、hidden</li>
<li>display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li>
<li>position的值为absolute或fixed</li>
</ul>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>利用<code>BFC</code>的特性，我们将<code>BFC</code>应用在以下场景：</p>
<h4 id="防止margin重叠（塌陷）"><a href="#防止margin重叠（塌陷）" class="headerlink" title="防止margin重叠（塌陷）"></a>防止margin重叠（塌陷）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#f55</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha&lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe&lt;/p &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面显示如下：</p>
<p> <img src="https://static.vue-js.com/d0ce3650-9511-11eb-85f6-6fac77c0c9b3.png"></p>
<p>两个<code>p</code>元素之间的距离为<code>100px</code>，发生了<code>margin</code>重叠（塌陷），以最大的为准，如果第一个P的<code>margin</code>为80的话，两个P之间的距离还是100，以最大的为准。</p>
<p>前面讲到，同一个<code>BFC</code>的俩个相邻的盒子的<code>margin</code>会发生重叠</p>
<p>可以在<code>p</code>外面包裹一层容器，并触发这个容器生成一个<code>BFC</code>，那么两个<code>p</code>就不属于同一个<code>BFC</code>，则不会出现<code>margin</code>重叠</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;// 新的BFC</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#f55</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha&lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe&lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时候，边距则不会重叠：</p>
<p> <img src="https://static.vue-js.com/dec44740-9511-11eb-85f6-6fac77c0c9b3.png"></p>
<h4 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.par</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f66</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;par&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面显示如下：</p>
<p> <img src="https://static.vue-js.com/ec5d4410-9511-11eb-85f6-6fac77c0c9b3.png"></p>
<p>而<code>BFC</code>在计算高度时，浮动元素也会参与，所以我们可以触发<code>.par</code>元素生活才能<code>BFC</code>，则内部浮动元素计算高度时候也会计算</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.par</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现效果如下：</p>
<p> <img src="https://static.vue-js.com/f6487b20-9511-11eb-ab90-d9ae814b240d.png"></p>
<h4 id="自适应多栏布局"><a href="#自适应多栏布局" class="headerlink" title="自适应多栏布局"></a>自适应多栏布局</h4><p>这里举个两栏的布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">    <span class="selector-class">.aside</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#f66</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"> </span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#fcc</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p> <img src="https://static.vue-js.com/ffb95210-9511-11eb-ab90-d9ae814b240d.png"></p>
<p>前面讲到，每个元素的左外边距与包含块的左边界相接触</p>
<p>因此，虽然<code>.aslide</code>为浮动元素，但是<code>main</code>的左边依然会与包含块的左边相接触</p>
<p>而<code>BFC</code>的区域不会与浮动盒子重叠</p>
<p>所以我们可以通过触发<code>main</code>生成<code>BFC</code>，以此适应两栏布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候，新的<code>BFC</code>不会与浮动的<code>.aside</code>元素重叠。因此会根据包含块的宽度，和<code>.aside</code>的宽度，自动变窄</p>
<p>效果如下：</p>
<p> <img src="https://static.vue-js.com/0a5f2690-9512-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>可以看到上面几个案例，都体现了<code>BFC</code>实际就是页面一个独立的容器，里面的子元素不影响外面的元素</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context</a></li>
<li><a href="https://github.com/zuopf769/notebook/blob/master/fe/BFC%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/README.md">https://github.com/zuopf769/notebook/blob/master/fe/BFC%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/README.md</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>BTC</tag>
        <tag>css面试</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM</title>
    <url>/archives/f3d3ee5b.html</url>
    <content><![CDATA[<h1 id="面试官：说说你对BOM的理解，常见的BOM对象你了解哪些？"><a href="#面试官：说说你对BOM的理解，常见的BOM对象你了解哪些？" class="headerlink" title="面试官：说说你对BOM的理解，常见的BOM对象你了解哪些？"></a>面试官：说说你对BOM的理解，常见的BOM对象你了解哪些？</h1><p> <img src="https://static.vue-js.com/3e191c40-8089-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>BOM</code> (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象</p>
<p>其作用就是跟浏览器做一些交互效果,比如如何进行页面的后退，前进，刷新，浏览器的窗口发生变化，滚动条的滚动，以及获取客户的一些信息如：浏览器品牌版本，屏幕分辨率</p>
<p>浏览器的全部内容可以看成<code>DOM</code>，整个浏览器可以看成<code>BOM</code>。区别如下：</p>
<p><img src="https://static.vue-js.com/482f33e0-8089-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="二、window"><a href="#二、window" class="headerlink" title="二、window"></a>二、window</h2><p><code>Bom</code>的核心对象是<code>window</code>，它表示浏览器的一个实例</p>
<p>在浏览器中，<code>window</code>对象有双重角色，即是浏览器窗口的一个接口，又是全局对象</p>
<p>因此所有在全局作用域中声明的变量、函数都会变成<code>window</code>对象的属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;js每日一题&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lookName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name);  <span class="comment">//js每日一题</span></span><br><span class="line">lookName();                <span class="comment">//js每日一题</span></span><br><span class="line"><span class="built_in">window</span>.lookName();         <span class="comment">//js每日一题</span></span><br></pre></td></tr></table></figure>

<p>关于窗口控制方法如下：</p>
<ul>
<li><code>moveBy(x,y)</code>：从当前位置水平移动窗体x个像素，垂直移动窗体y个像素，x为负数，将向左移动窗体，y为负数，将向上移动窗体</li>
<li><code>moveTo(x,y)</code>：移动窗体左上角到相对于屏幕左上角的(x,y)点</li>
<li><code>resizeBy(w,h)</code>：相对窗体当前的大小，宽度调整w个像素，高度调整h个像素。如果参数为负值，将缩小窗体，反之扩大窗体</li>
<li><code>resizeTo(w,h)</code>：把窗体宽度调整为w个像素，高度调整为h个像素</li>
<li><code>scrollTo(x,y)</code>：如果有滚动条，将横向滚动条移动到相对于窗体宽度为x个像素的位置，将纵向滚动条移动到相对于窗体高度为y个像素的位置</li>
<li><code>scrollBy(x,y)</code>： 如果有滚动条，将横向滚动条向左移动x个像素，将纵向滚动条向下移动y个像素</li>
</ul>
<p> <code>window.open()</code> 既可以导航到一个特定的<code>url</code>，也可以打开一个新的浏览器窗口</p>
<p>如果 <code>window.open()</code> 传递了第二个参数，且该参数是已有窗口或者框架的名称，那么就会在目标窗口加载第一个参数指定的URL</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;htttp://www.vue3js.cn&#x27;</span>,<span class="string">&#x27;topFrame&#x27;</span>)</span><br><span class="line">==&gt; &lt; a href=<span class="string">&quot; &quot;</span> target=<span class="string">&quot;topFrame&quot;</span>&gt;&lt;/ a&gt;</span><br></pre></td></tr></table></figure>

<p><code>window.open()</code> 会返回新窗口的引用，也就是新窗口的 <code>window</code> 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myWin = <span class="built_in">window</span>.open(<span class="string">&#x27;http://www.vue3js.cn&#x27;</span>,<span class="string">&#x27;myWin&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>window.close()</code> 仅用于通过 <code>window.open()</code> 打开的窗口</p>
<p>新创建的 <code>window</code> 对象有一个 <code>opener</code> 属性，该属性指向打开他的原始窗口对象</p>
<h2 id="三、location"><a href="#三、location" class="headerlink" title="三、location"></a>三、location</h2><p><code>url</code>地址如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents</span></span><br></pre></td></tr></table></figure>

<p><code>location</code>属性描述如下：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>例子</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>hash</td>
<td>“#contents”</td>
<td>utl中#后面的字符，没有则返回空串</td>
</tr>
<tr>
<td>host</td>
<td><a href="http://www.wrox.com/">www.wrox.com:80</a></td>
<td>服务器名称和端口号</td>
</tr>
<tr>
<td>hostname</td>
<td><a href="http://www.wrox.com/">www.wrox.com</a></td>
<td>域名，不带端口号</td>
</tr>
<tr>
<td>href</td>
<td><a href="http://www.wrox.com/WileyCDA/?q=javascript#contents">http://www.wrox.com:80/WileyCDA/?q=javascript#contents</a></td>
<td>完整url</td>
</tr>
<tr>
<td>pathname</td>
<td>“/WileyCDA/“</td>
<td>服务器下面的文件路径</td>
</tr>
<tr>
<td>port</td>
<td>80</td>
<td>url的端口号，没有则为空</td>
</tr>
<tr>
<td>protocol</td>
<td>http:</td>
<td>使用的协议</td>
</tr>
<tr>
<td>search</td>
<td>?q=javascript</td>
<td>url的查询字符串，通常为？后面的内容</td>
</tr>
</tbody></table>
<p>除了 <code>hash </code>之外，只要修改<code>location</code>的一个属性，就会导致页面重新加载新<code> URL</code></p>
<p><code>location.reload()</code>，此方法可以重新刷新当前页面。这个方法会根据最有效的方式刷新页面，如果页面自上一次请求以来没有改变过，页面就会从浏览器缓存中重新加载</p>
<p>如果要强制从服务器中重新加载，传递一个参数<code>true</code>即可</p>
<h2 id="四、navigator"><a href="#四、navigator" class="headerlink" title="四、navigator"></a>四、navigator</h2><p><code>navigator</code> 对象主要用来获取浏览器的属性，区分浏览器类型。属性较多，且兼容性比较复杂</p>
<p>下表列出了<code>navigator</code>对象接口定义的属性和方法：</p>
<p> <img src="https://static.vue-js.com/6797ab40-8089-11eb-ab90-d9ae814b240d.png"></p>
<p> <img src="https://static.vue-js.com/74096620-8089-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="五、screen"><a href="#五、screen" class="headerlink" title="五、screen"></a>五、screen</h2><p>保存的纯粹是客户端能力信息，也就是浏览器窗口外面的客户端显示器的信息，比如像素宽度和像素高度</p>
<p> <img src="https://static.vue-js.com/7d6b21e0-8089-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="六、history"><a href="#六、history" class="headerlink" title="六、history"></a>六、history</h2><p><code>history</code>对象主要用来操作浏览器<code>URL</code>的历史记录，可以通过参数向前，向后，或者向指定<code>URL</code>跳转</p>
<p>常用的属性如下：</p>
<ul>
<li><code>history.go()</code></li>
</ul>
<p>接收一个整数数字或者字符串参数：向最近的一个记录中包含指定字符串的页面跳转，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.go(<span class="string">&#x27;maixaofei.com&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>当参数为整数数字的时候，正数表示向前跳转指定的页面，负数为向后跳转指定的页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.go(<span class="number">3</span>) <span class="comment">//向前跳转三个记录</span></span><br><span class="line">history.go(-<span class="number">1</span>) <span class="comment">//向后跳转一个记录</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>history.forward()</code>：向前跳转一个页面</li>
<li><code>history.back()</code>：向后跳转一个页面</li>
<li><code>history.length</code>：获取历史记录数</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Dom</title>
    <url>/archives/59b49683.html</url>
    <content><![CDATA[<h1 id="面试官：DOM常见的操作有哪些？"><a href="#面试官：DOM常见的操作有哪些？" class="headerlink" title="面试官：DOM常见的操作有哪些？"></a>面试官：DOM常见的操作有哪些？</h1><p> <img src="https://static.vue-js.com/a89c99a0-7fdc-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、DOM"><a href="#一、DOM" class="headerlink" title="一、DOM"></a>一、DOM</h2><p>文档对象模型 (DOM) 是 <code>HTML</code> 和 <code>XML</code> 文档的编程接口</p>
<p>它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容</p>
<p>任何 <code>HTML </code>或<code>XML</code>文档都可以用 <code>DOM </code>表示为一个由节点构成的层级结构</p>
<p>节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!&lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>DOM</code>像原子包含着亚原子微粒那样，也有很多类型的<code>DOM</code>节点包含着其他类型的节点。接下来我们先看看其中的三种：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        content</span><br><span class="line">    &lt;/p &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述结构中，<code>div</code>、<code>p</code>就是元素节点，<code>content</code>就是文本节点，<code>title</code>就是属性节点</p>
<h2 id="二、操作"><a href="#二、操作" class="headerlink" title="二、操作"></a>二、操作</h2><p>日常前端开发，我们都离不开<code>DOM</code>操作</p>
<p>在以前，我们使用<code>Jquery</code>，<code>zepto</code>等库来操作<code>DOM</code>，之后在<code>vue</code>，<code>Angular</code>，<code>React</code>等框架出现后，我们通过操作数据来控制<code>DOM</code>（绝大多数时候），越来越少的去直接操作<code>DOM</code></p>
<p>但这并不代表原生操作不重要。相反，<code>DOM</code>操作才能有助于我们理解框架深层的内容</p>
<p>下面就来分析<code>DOM</code>常见的操作，主要分为：</p>
<ul>
<li>创建节点</li>
<li>查询节点</li>
<li>更新节点</li>
<li>添加节点</li>
<li>删除节点</li>
</ul>
<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><h4 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h4><p>创建新元素，接受一个参数，即要创建元素的标签名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> divEl = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h4><p>创建一个文本节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> textEl = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;content&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h4><p>用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到<code>DOM</code>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br></pre></td></tr></table></figure>

<p>当请求把一个<code>DocumentFragment</code> 节点插入文档树时，插入的不是 <code>DocumentFragment </code>自身，而是它的所有子孙节点</p>
<h4 id="createAttribute"><a href="#createAttribute" class="headerlink" title="createAttribute"></a>createAttribute</h4><p>创建属性节点，可以是自定义属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataAttribute = <span class="built_in">document</span>.createAttribute(<span class="string">&#x27;custom&#x27;</span>);</span><br><span class="line">consle.log(dataAttribute);</span><br></pre></td></tr></table></figure>



<h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><h4 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h4><p>传入任何有效的<code> css</code> 选择器，即可选中单个 <code>DOM </code>元素（首个）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;.element&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;#element&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;[name=&quot;username&quot;]&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;div + p &gt; span&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果页面上没有指定的元素时，返回 <code>null</code></p>
<h4 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h4><p>返回一个包含节点子树内所有与之相匹配的<code>Element</code>节点列表，如果没有相匹配的，则返回一个空节点列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> notLive = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，该方法返回的是一个 <code>NodeList </code>的静态实例，它是一个静态的“快照”，而非“实时”的查询</p>
<p>关于获取<code>DOM</code>元素的方法还有如下，就不一一述说</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;id属性值&#x27;</span>);返回拥有指定id的对象的引用</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;class属性值&#x27;</span>);返回拥有指定<span class="class"><span class="keyword">class</span>的对象集合</span></span><br><span class="line"><span class="class"><span class="title">document</span>.<span class="title">getElementsByTagName</span>(&#x27;标签名&#x27;)</span>;返回拥有指定标签名的对象集合</span><br><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;name属性值&#x27;</span>); 返回拥有指定名称的对象结合</span><br><span class="line"><span class="built_in">document</span>/element.querySelector(<span class="string">&#x27;CSS选择器&#x27;</span>);  仅返回第一个匹配的元素</span><br><span class="line"><span class="built_in">document</span>/element.querySelectorAll(<span class="string">&#x27;CSS选择器&#x27;</span>);   返回所有匹配的元素</span><br><span class="line"><span class="built_in">document</span>.documentElement;  获取页面中的HTML标签</span><br><span class="line"><span class="built_in">document</span>.body; 获取页面中的BODY标签</span><br><span class="line"><span class="built_in">document</span>.all[<span class="string">&#x27;&#x27;</span>];  获取页面中的所有元素节点的对象集合型</span><br></pre></td></tr></table></figure>

<p>除此之外，每个<code>DOM</code>元素还有<code>parentNode</code>、<code>childNodes</code>、<code>firstChild</code>、<code>lastChild</code>、<code>nextSibling</code>、<code>previousSibling</code>属性，关系图如下图所示</p>
<p> <img src="https://static.vue-js.com/c100f450-7fdc-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>不但可以修改一个<code>DOM</code>节点的文本内容，还可以直接通过<code>HTML</code>片段修改<code>DOM</code>节点内部的子树</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;p id=&quot;p&quot;&gt;...&lt;/p &gt;</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置文本为abc:</span></span><br><span class="line">p.innerHTML = <span class="string">&#x27;ABC&#x27;</span>; <span class="comment">// &lt;p id=&quot;p&quot;&gt;ABC&lt;/p &gt;</span></span><br><span class="line"><span class="comment">// 设置HTML:</span></span><br><span class="line">p.innerHTML = <span class="string">&#x27;ABC &lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt; XYZ&#x27;</span>;</span><br><span class="line"><span class="comment">// &lt;p&gt;...&lt;/p &gt;的内部结构已修改</span></span><br></pre></td></tr></table></figure>



<h4 id="innerText、textContent"><a href="#innerText、textContent" class="headerlink" title="innerText、textContent"></a>innerText、textContent</h4><p>自动对字符串进行<code>HTML</code>编码，保证无法设置任何<code>HTML</code>标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span><br><span class="line">var p = document.getElementById(&#x27;p-id&#x27;);</span><br><span class="line">// 设置文本:</span><br><span class="line">p.innerText = &#x27;&lt;script&gt;alert(&quot;Hi&quot;)&lt;/script&gt;&#x27;;</span><br><span class="line">// HTML被自动编码，无法设置一个&lt;script&gt;节点:</span><br><span class="line">// &lt;p id=&quot;p-id&quot;&gt;&amp;lt;script&amp;gt;alert(&quot;Hi&quot;)&amp;lt;/script&amp;gt;&lt;/p &gt;</span><br></pre></td></tr></table></figure>

<p>两者的区别在于读取属性时，<code>innerText</code>不返回隐藏元素的文本，而<code>textContent</code>返回所有文本</p>
<h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p><code>DOM</code>节点的<code>style</code>属性对应所有的<code>CSS</code>，可以直接获取或设置。遇到<code>-</code>需要转化为驼峰命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;p id=&quot;p-id&quot;&gt;...&lt;/p &gt;</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p-id&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置CSS:</span></span><br><span class="line">p.style.color = <span class="string">&#x27;#ff0000&#x27;</span>;</span><br><span class="line">p.style.fontSize = <span class="string">&#x27;20px&#x27;</span>; <span class="comment">// 驼峰命名</span></span><br><span class="line">p.style.paddingTop = <span class="string">&#x27;2em&#x27;</span>;</span><br></pre></td></tr></table></figure>





<h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><h4 id="innerHTML-1"><a href="#innerHTML-1" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>如果这个DOM节点是空的，例如，<code>&lt;div&gt;&lt;/div&gt;</code>，那么，直接使用<code>innerHTML = &#39;&lt;span&gt;child&lt;/span&gt;&#39;</code>就可以修改<code>DOM</code>节点的内容，相当于添加了新的<code>DOM</code>节点</p>
<p>如果这个DOM节点不是空的，那就不能这么做，因为<code>innerHTML</code>会直接替换掉原来的所有子节点</p>
<h4 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h4><p>把一个子节点添加到父节点的最后一个子节点</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML结构 --&gt;</span><br><span class="line">&lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p &gt;</span><br><span class="line">&lt;div id=&quot;list&quot;&gt;</span><br><span class="line">    &lt;p id=&quot;java&quot;&gt;Java&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;python&quot;&gt;Python&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>添加一个<code>p</code>元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>)</span><br><span class="line">js.innerHTML = <span class="string">&quot;JavaScript&quot;</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">list.appendChild(js);</span><br></pre></td></tr></table></figure>

<p>现在<code>HTML</code>结构变成了下面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML结构 --&gt;</span><br><span class="line">&lt;div id=&quot;list&quot;&gt;</span><br><span class="line">    &lt;p id=&quot;java&quot;&gt;Java&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;python&quot;&gt;Python&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;scheme&quot;&gt;Scheme&lt;/p &gt;</span><br><span class="line">    &lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p &gt;  &lt;!-- 添加元素 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>上述代码中，我们是获取<code>DOM</code>元素后再进行添加操作，这个<code>js</code>节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置</p>
<p>如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>),</span><br><span class="line"><span class="keyword">const</span> haskell = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">haskell.id = <span class="string">&#x27;haskell&#x27;</span>;</span><br><span class="line">haskell.innerText = <span class="string">&#x27;Haskell&#x27;</span>;</span><br><span class="line">list.appendChild(haskell);</span><br></pre></td></tr></table></figure>



<h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h4><p>把子节点插入到指定的位置，使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentElement.insertBefore(newElement, referenceElement)</span><br></pre></td></tr></table></figure>

<p>子节点会插入到<code>referenceElement</code>之前</p>
<h4 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h4><p>在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">div.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;white&#x27;</span>);<span class="comment">//第一个参数属性名，第二个参数属性值。</span></span><br></pre></td></tr></table></figure>



<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的<code>removeChild</code>把自己删掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拿到待删除节点:</span></span><br><span class="line"><span class="keyword">const</span> self = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;to-be-removed&#x27;</span>);</span><br><span class="line"><span class="comment">// 拿到父节点:</span></span><br><span class="line"><span class="keyword">const</span> parent = self.parentElement;</span><br><span class="line"><span class="comment">// 删除:</span></span><br><span class="line"><span class="keyword">const</span> removed = parent.removeChild(self);</span><br><span class="line">removed === self; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model">https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model</a></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>Dom</tag>
      </tags>
  </entry>
  <entry>
    <title>about us 2021</title>
    <url>/archives/afcd4575.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fff96c359f7638c71a46aa2e56994d6fb8cbb9236929c47c94ce42211843c380">7a13521b6242615d832816f422e7dfef73da25fdbdf3b6222d8a59b6468cf1af43f41c56cd77ce14167e0f47abb820f3b30907a60039d37ff17b59d57fe34743842ccb0d9384c989a69e8e7cdf1c7ef60db4d200d78b42a3b4723dd629cf5e2f7cc4a2706e193a5c80750d76129251512268f46f459ad01fd03b9f749a9bffb4f85d24a6d37df1b5e2dcb2e0059afb240dcd607e6c6c2d89ffc9dcbfaebd8bd0b5669189c24c4e991018c04055be3173d83dc8ffbffa92a72024a5b313ac213026ae571261cecf38ebdf6a1a67330bb222a778afafaaadcd3454403d5d0167e30d61a1d34ec44bf116ce09a42ce7a79312a2015918a13b93cad06387d6821c550637f665360a4b7a3c2eaac0f833b5a3443724186d1d0786929cb57ff9139905d1a81f2feeb7c8b942de492c97362f1d59d3072de91baeddedf36f0c6b947595fd1cedb65dbc03f7d2d0014dc205afc90dfe9292cdbb0ed425a46f2e0d5c152933e0ca62ede3b8d5874be034d4cf89823390f656c100792ac2ca272707ca5de1fc85a059e25cb2604a035f2177b7580f36978e2129156ec8bbb7cd70ad9e01a9b6fe974214a40df8299a74c92b72d3a49430e50598ed6ba3f07dc93a9334a7313900e10aa3fa9778a94676d4b53b280178d5aa506a526a4c9151244f4fb9abe0f7b8f8e46540adf13eb72900fa3b4a33075bffb843956d69b21e7092152b5b5c665401215ccc521f9f3faddf9f90e894b4478f951c1089f663650cde8d321227f78f11e5d6f7e7c7bfece80e08fd3846701fd018bec4dd849b8a80248418effcc8c97c81660c528cb716fb7c55583efee30620acba057fa86dac27ded47d83d8491b035818c16fc11220cc055b7619fe3a8791659824c0e41765301845a11570e9ca6f3e509e1be1ff31f656a10b8b3631cdae6bb83aa09ef2a32c224f85066db880cd3b4f6c87b9f75d64162522c864d0376ed7c0376f0c683a5df81e9f86ac607d463c31aed5dd74c09a7d74ab05df50622be84b70be065a13e7d6a9f4f89d23b8809139a23105501d0cd6b723f2c8b3b539f513bcb410b3cc38bc32922924d99d54dfeab46e2474101519f09f87899a9c8fe6d9a64d9654c9ca6b465c9d6ea2fdba37dff3b77ad65c64c6795a0973639747af545a85b9b34fc9d0b733967c29a6908c8b6c63ed242b12e430faf2a073f4620ebba1d0e8d0e9343e9cf49dce50458c30183ba037e964f2d29b247641e892d3fa5fafbef3da2806cfeeca8e531ce25c0238cf9c674a83c61ddbbfba1580f765e1f2f757fa639c6e9e8b2e46b6866e7cc5e4e64441652de50492ccdfb0e4fde7bf8a34eb7a7c19715f9fbc7add5b79be916c6fc9af7f7274a2a8ce592a4cdebd90dd35236e5fd662d11183cb850c005c902cf3c3eb1fbf6d2e0cd90154816a02b82ad5386c6bd176ad5392a3a455459907032a450440e34ad12b06be1c297adc27c2a2e314ebde790c1a3f194f1033ebc6dde7a8e10b9699e2f7f623ca685175d0b384d15bbec2a767d0c270d2c9941217268d89bc0b9a4e443c268764bf601b67d4d380ff94a3c6975b1b8375de834f0cef033d72fb04f8931c3e47d7b6135feac8c69f7bdbb9be4c3234ad264b7226a0d304305beddc9be96af2713a71bec0c377145da2118b5c0f34038249141a3246e589e69c7d5f74d572f32386fa144023e345fa6ff9364f7a3ade18ef79994124b1aa692e2b790c5da743d2fb4f275f368cdc7844c78c368805b84c91a68a178488b2cb517bfd67e489bbdbb277b97b7195a1bd00e76430120aec1f60c8e4ddbfa4422c96bbb5f8190fd2ff3a9d342db34544dc1130fb42f2d6a9971d51e98b4273f2354fcd5ef4b507151810116e07c3db9f479b4582cbde23beec7e855d49a930c4426459424ac832ff29473888e4a2d46f31fd58eee3dff95826d24dad1f69ab64b28d81cd2a7ba4cf100a0b597163bf0d4c1e1d6ba98c5f532b7ad3960884361fb68d417bc6283cdcf9849fe29634f9be1145eaf43c8a4cf17f5e171cd28a024320a95e9c912c1386a1c9f25959e5ffc3de3a4b6c557d54fde500505098b8ce818bef65d1b51c4b185648d73ba410302fb574f0392c896225c41e114e9ec1bf007b8956bd4dcd778e41bc63eeb4e8cf1c4a3e78c70193a9a7228289fefe6860ba011d0b6d3fda88a030e2f042efb7d0dfb9dd9cc33162ab277c4e9c717b186c4aceb250942b040733b4df49dd1e379b5fb9c35fe079f4da1ca600a568d7534d6597cb725010f6c26e041943717e2745acef4ec56013d08c4c91a58434136e96d74cf973410b8cf408f0f855113ef97181688103fff12dfe96f52e7e459bd7953cd488d4edcc2532495709a5fac90079eaa0cbb8f98fdde3928a11c838d2dfe2259e9cbed5a9a0e435cf7b0017c9612c462c43b8c179fc3198793447fc7159922defc9d3c84f6f6854a2fbb5d0508e752d14f9ab78d0493bb22384b1a8a4df92e868680ae7662fd9c2b4961ba2b80839def458dac2d583a82ea347401e30aac3d1f6dfc6de5c73803d07735fff106be5d1260993accd390d9aaa718266e04f9b5871b6021dce99ae8038ac95656f64c7e2bdfbae0bfb02b28437ddd65c9564617dc6ef377db36b3a1cf2b8cd2a0be66ceaddb5da4f9153f96f4af88a8b96c4424e26a00d7da8d0a914ff24377ffa5edbbb42a2287fadd58d865dd792e23e2c2d9741c215791f72939434b3e6fd57a643a772d78793f3532c9d5a1c456873db15f2dd3692ab5c84d2e17d1a36735f610d1d0bfa722a54b0a2ae8e234c7c8f5b5d5ab8e4bc4b6805986be48903ae3caa89645bc8ad3840ea67fc1425ab663979fba29c38023c8528d3b92f2c13035cabc1a6d3d5553c580c6f55288c35d6269e82fb337daed881371dbfa6293b2ebba3bd72d9741aefffecb878bb198680f19d0892b39fdd53bc144483692ad9070bb6ead21ef4da1c3788d9ee0207ff75a60412f6d4961736ac6f67f7345eee90b51f88818750d91e33bd985a21d64fd7184f7245f66728d2cf99050f422c4d3ccc8bc8a0ff0d6be20d32f1380356d654b64b7667b63e9922036ea1c1a61596dc5076a5c0d46b18962d1a29c3e4780528df8e82f85e49b089e7f89a31a76049e63d291bbcec90fefd4b958d99954f8ef72693a78935f17078faf7f9bced734ab9d20bf5ec6b8edadef2b97323cdded4f5b0badcc8e6b829420a28d8d86b898740f7ca982b0a29dac184811554600306cef9b8af87c2cf298dda22742f111a6388b85071fd5dc9d15f4f2522271e2beb91363cc9cf068d75e4f22b1a5331ef42a1b7b07b6b55720f528be40ec49af823651b1a6aa58ecf240204438d21bed386f7ce73ef7f7e3fb1170063a94b233814c9c3e5e2372f6b68c3f6d9146269486ab8b88c2609d407172e27918a9d978512d2e2be56c9478072174cc906a936e24a3a3123a5034cb36fc6f04fb928dcdc65c67617425805748742a1307cd93f04d9e4283566e88058f06fd81a17005291f484c9b293ba376f76c80ecf69155b8e2b8155a21293cd8ad9ec8857dccff7c4838d795ca04a9c88343790c14c522df4a5e2377c5f2e6315853f929ea7a06768ae748129a0d93bbfb44fd27ac37422d1743dc790db977ceb8d3286b7f88f61c3b8c59c7551bdeee90abd2bbc96a42a78594253441e3122a04ae5676a8b575d42be0865393b76fe12a152e16db63a11b4424b6abb87887bb593380a366e8ba26c8e36b433e13fd4e6ec43c4642e1839c2d1cfc0369ab7c180a7a2e27917cd85144896108371493ebcc23481f14eb8b3b27520ff619dc82a33042c872371812b1592e5d5e234242ba0ffb76ff26e4dc0a1605489419bfcdd95e41482e4e0e2114faac1f28dbd96fd064a597420b0766069f83ae6bf5b9f69eb3c64b58a2395fa0efc647f0edcc42a6f7b6fd55b6a0b25c9cf1c7691ebb8e2b4b7c6c800d1fef4eb2e0e82f5de477ab3162ce5d3329af2f79b46a74ae6992538989dac9cfa31ddff46d559a1350b9fe605879eb56c455db22f46e1813b37693845bab880c530d713a31f027f480b338690076f187cdd0b8f4614db8617b53ea81751ea515711ea0534ad06e1487b9368aa228aaf4ce2c87a06b6a5b74afaa0706364a6e82bd620a89e5f75637aac0bfce4a83bd4a0f9076349d85a56bc9ba7d57a01df318cc107bdbc48701b2496941cd1af006ee830e5630dded7c3eacf182ab3c514d985d89f241698ceaa1e8eff0c44717a6cc8a759ae542e8bc68fc61ba9369893b6214ec6f46d2f50c7f827f07f6e0bd604308eb1af5c48baac21252d3fec8960783f919d05f4908328529e89afedfa3076a227290b91bf42ea9ba279a79244bca4a104e5699030a46b73831a0149068c31d04e042f899127e3f74c5201950e6eb4b7c5f5857365497c909f869b253053679089e482402dec672c4061a38648549abfef17cf45627920937d918370f188c97bf712bf886cdf8adb626a105f29abfb1a6283426ced22165427d3d80a487b5ffc9804d3461121e015a8829626734aad1cfd0fc82c93531c737ad0691b6b11db8be74784c90528d214efb511229d0be2b5f9371dae459bb1c47d05c5f06195b94d1e528b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">想看我的秘密，需要密码呦༼ つ ◕_◕ ༽つ</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>fine</category>
      </categories>
      <tags>
        <tag>fine</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax2</title>
    <url>/archives/50cfbdee.html</url>
    <content><![CDATA[<h1 id="面试官：ajax原理是什么？如何实现？"><a href="#面试官：ajax原理是什么？如何实现？" class="headerlink" title="面试官：ajax原理是什么？如何实现？"></a>面试官：ajax原理是什么？如何实现？</h1><p> <img src="https://static.vue-js.com/a35a2950-7b2a-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>AJAX </code>全称(Async Javascript and XML)</p>
<p>即异步的<code> JavaScript</code> 和<code> XML</code>，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页</p>
<p><code>Ajax</code>的原理简单来说通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用<code>JavaScript</code>来操作<code>DOM</code>而更新页面</p>
<p>流程图如下：</p>
<p> <img src="https://static.vue-js.com/af42de10-7b2a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>下面举个例子：</p>
<p>领导想找小李汇报一下工作，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作</p>
<p><code>Ajax</code>请求数据流程与“领导想找小李汇报一下工作”类似，上述秘书就相当于<code>XMLHttpRequest</code>对象，领导相当于浏览器，响应数据相当于小李</p>
<p>浏览器可以发送<code>HTTP</code>请求后，接着做其他事情，等收到<code>XHR</code>返回来的数据再进行操作</p>
<h2 id="二、实现过程"><a href="#二、实现过程" class="headerlink" title="二、实现过程"></a>二、实现过程</h2><p>实现 <code>Ajax </code>异步交互需要服务器逻辑进行配合，需要完成以下步骤：</p>
<ul>
<li><p>创建 <code>Ajax </code>的核心对象 <code>XMLHttpRequest </code>对象</p>
</li>
<li><p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务端建立连接</p>
</li>
<li><p>构建请求所需的数据内容，并通过<code> XMLHttpRequest</code> 对象的 <code>send()</code> 方法发送给服务器端</p>
</li>
<li><p>通过 <code>XMLHttpRequest</code> 对象提供的 <code>onreadystatechange</code> 事件监听服务器端你的通信状态</p>
</li>
<li><p>接受并处理服务端向客户端响应的数据结果</p>
</li>
<li><p>将处理结果更新到 <code>HTML </code>页面中</p>
</li>
</ul>
<h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><p>通过<code>XMLHttpRequest()</code> 构造函数用于初始化一个 <code>XMLHttpRequest</code> 实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>



<h3 id="与服务器建立连接"><a href="#与服务器建立连接" class="headerlink" title="与服务器建立连接"></a>与服务器建立连接</h3><p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务器建立连接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.open(method, url, [<span class="keyword">async</span>][, user][, password])</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p><code>method</code>：表示当前的请求方式，常见的有<code>GET</code>、<code>POST</code></p>
</li>
<li><p><code>url</code>：服务端地址</p>
</li>
<li><p><code>async</code>：布尔值，表示是否异步执行操作，默认为<code>true</code></p>
</li>
<li><p> <code>user</code>: 可选的用户名用于认证用途；默认为`null</p>
</li>
</ul>
<ul>
<li><code>password</code>: 可选的密码用于认证用途，默认为`null</li>
</ul>
<h3 id="给服务端发送数据"><a href="#给服务端发送数据" class="headerlink" title="给服务端发送数据"></a>给服务端发送数据</h3><p>通过 <code>XMLHttpRequest</code> 对象的 <code>send()</code> 方法，将客户端页面的数据发送给服务端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.send([body])</span><br></pre></td></tr></table></figure>

<p><code>body</code>: 在 <code>XHR</code> 请求中要发送的数据体，如果不传递数据则为 <code>null</code></p>
<p>如果使用<code>GET</code>请求发送数据的时候，需要注意如下：</p>
<ul>
<li>将请求数据添加到<code>open()</code>方法中的<code>url</code>地址中</li>
<li>发送请求数据中的<code>send()</code>方法中参数设置为<code>null</code></li>
</ul>
<h3 id="绑定onreadystatechange事件"><a href="#绑定onreadystatechange事件" class="headerlink" title="绑定onreadystatechange事件"></a>绑定onreadystatechange事件</h3><p><code>onreadystatechange</code> 事件用于监听服务器端的通信状态，主要监听的属性为<code>XMLHttpRequest.readyState</code> ,</p>
<p>关于<code>XMLHttpRequest.readyState</code>属性有五个状态，如下图显示</p>
<p><img src="https://static.vue-js.com/9782fc90-7b31-11eb-ab90-d9ae814b240d.png"></p>
<p>只要 <code>readyState </code>属性值一变化，就会触发一次 <code>readystatechange</code> 事件</p>
<p><code>XMLHttpRequest.responseText</code>属性用于接收服务器端的响应结果</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123; <span class="comment">// 整个请求过程完毕</span></span><br><span class="line">        <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt;= <span class="number">300</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(request.responseText) <span class="comment">// 服务端返回的结果</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;=<span class="number">400</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;错误信息：&quot;</span> + request.status)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">request.open(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://xxxx&#x27;</span>)</span><br><span class="line">request.send()</span><br></pre></td></tr></table></figure>





<h2 id="三、封装"><a href="#三、封装" class="headerlink" title="三、封装"></a>三、封装</h2><p>通过上面对<code>XMLHttpRequest </code>对象的了解，下面来封装一个简单的<code>ajax</code>请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装一个ajax请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建XMLHttpRequest对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化参数的内容</span></span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    options.type = (options.type || <span class="string">&#x27;GET&#x27;</span>).toUpperCase()</span><br><span class="line">    options.dataType = options.dataType || <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> params = options.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">if</span> (options.type === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        xhr.open(<span class="string">&#x27;GET&#x27;</span>, options.url + <span class="string">&#x27;?&#x27;</span> + params, <span class="literal">true</span>)</span><br><span class="line">        xhr.send(<span class="literal">null</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.type === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        xhr.open(<span class="string">&#x27;POST&#x27;</span>, options.url, <span class="literal">true</span>)</span><br><span class="line">        xhr.send(params)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收请求</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> status = xhr.status</span><br><span class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                options.fail &amp;&amp; options.fail(status)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://xxxx&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">text,xml</span>)</span>&#123;<span class="comment">//请求成功后的回调函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(text)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;<span class="comment">////请求失败后的回调函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(status)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax2</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>animation</title>
    <url>/archives/8d5284dc.html</url>
    <content><![CDATA[<h1 id="面试官：css3动画有哪些？"><a href="#面试官：css3动画有哪些？" class="headerlink" title="面试官：css3动画有哪些？"></a>面试官：css3动画有哪些？</h1><p> <img src="https://static.vue-js.com/d12e2380-9c0a-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>CSS动画（CSS Animations）是为层叠样式表建议的允许可扩展标记语言（XML）元素使用CSS的动画的模块</p>
<p>即指元素从一种样式逐渐过渡为另一种样式的过程</p>
<p>常见的动画效果有很多，如平移、旋转、缩放等等，复杂动画则是多个简单动画的组合</p>
<p><code>css</code>实现动画的方式，有如下几种：</p>
<ul>
<li>transition 实现渐变动画</li>
<li>transform 转变动画</li>
<li>animation 实现自定义动画</li>
</ul>
<h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><h3 id="transition-实现渐变动画"><a href="#transition-实现渐变动画" class="headerlink" title="transition 实现渐变动画"></a>transition 实现渐变动画</h3><p><code>transition</code>的属性如下：</p>
<ul>
<li>property:填写需要变化的css属性</li>
<li>duration:完成过渡效果需要的时间单位(s或者ms)</li>
<li>timing-function:完成效果的速度曲线</li>
<li>delay: 动画效果的延迟触发时间</li>
</ul>
<p>其中<code>timing-function</code>的值有如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>linear</td>
<td>匀速（等于 cubic-bezier(0,0,1,1)）</td>
</tr>
<tr>
<td>ease</td>
<td>从慢到快再到慢（cubic-bezier(0.25,0.1,0.25,1)）</td>
</tr>
<tr>
<td>ease-in</td>
<td>慢慢变快（等于 cubic-bezier(0.42,0,1,1)）</td>
</tr>
<tr>
<td>ease-out</td>
<td>慢慢变慢（等于 cubic-bezier(0,0,0.58,1)）</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>先变快再到慢（等于 cubic-bezier(0.42,0,0.58,1)），渐显渐隐效果</td>
</tr>
<tr>
<td>cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td>
<td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值</td>
</tr>
</tbody></table>
<p>注意：并不是所有的属性都能使用过渡的，如<code>display:none&lt;-&gt;display:block</code></p>
<p>举个例子，实现鼠标移动上去发生变化动画效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">       <span class="selector-class">.base</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#0EA9FF</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-color</span>: <span class="number">#5daf34</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition-property</span>: width, height, background-color, border-width;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition-timing-function</span>: ease-in;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition-delay</span>: <span class="number">500ms</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/*简写*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*transition: all 2s ease-in 500ms;*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.base</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#5daf34</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-color</span>: <span class="number">#3a8ee6</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="transform-转变动画"><a href="#transform-转变动画" class="headerlink" title="transform 转变动画"></a>transform 转变动画</h3><p>包含四个常用的功能：</p>
<ul>
<li>translate：位移</li>
<li>scale：缩放</li>
<li>rotate：旋转</li>
<li>skew：倾斜</li>
</ul>
<p>一般配合<code>transition</code>过度使用</p>
<p>注意的是，<code>transform</code>不支持<code>inline</code>元素，使用前把它变成<code>block</code></p>
<p>举个例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.base</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#0EA9FF</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-color</span>: <span class="number">#5daf34</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition-property</span>: width, height, background-color, border-width;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition-timing-function</span>: ease-in;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition-delay</span>: <span class="number">500ms</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.base2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: none;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition-property</span>: transform;</span></span><br><span class="line"><span class="css">        <span class="attribute">transition-delay</span>: <span class="number">5ms</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.base2</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>, <span class="number">1.5</span>) <span class="built_in">rotate</span>(<span class="number">35deg</span>) <span class="built_in">skew</span>(<span class="number">5deg</span>) <span class="built_in">translate</span>(<span class="number">15px</span>, <span class="number">25px</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base base2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到盒子发生了旋转，倾斜，平移，放大</p>
<h3 id="animation-实现自定义动画"><a href="#animation-实现自定义动画" class="headerlink" title="animation 实现自定义动画"></a>animation 实现自定义动画</h3><p><code>animation</code>是由 8 个属性的简写，分别如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>属性值</th>
</tr>
</thead>
<tbody><tr>
<td>animation-duration</td>
<td>指定动画完成一个周期所需要时间，单位秒（s）或毫秒（ms），默认是 0</td>
<td></td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>指定动画计时函数，即动画的速度曲线，默认是 “ease”</td>
<td>linear、ease、ease-in、ease-out、ease-in-out</td>
</tr>
<tr>
<td>animation-delay</td>
<td>指定动画延迟时间，即动画何时开始，默认是 0</td>
<td></td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>指定动画播放的次数，默认是 1</td>
<td></td>
</tr>
<tr>
<td>animation-direction 指定动画播放的方向</td>
<td>默认是 normal</td>
<td>normal、reverse、alternate、alternate-reverse</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>指定动画填充模式。默认是 none</td>
<td>forwards、backwards、both</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>指定动画播放状态，正在运行或暂停。默认是 running</td>
<td>running、pauser</td>
</tr>
<tr>
<td>animation-name</td>
<td>指定 @keyframes 动画的名称</td>
<td></td>
</tr>
</tbody></table>
<p><code>CSS</code> 动画只需要定义一些关键的帧，而其余的帧，浏览器会根据计时函数插值计算出来，</p>
<p>通过 <code>@keyframes</code> 来定义关键帧</p>
<p>因此，如果我们想要让元素旋转一圈，只需要定义开始和结束两帧即可：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> rotate&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>from</code> 表示最开始的那一帧，<code>to</code> 表示结束时的那一帧</p>
<p>也可以使用百分比刻画生命周期</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> rotate&#123;</span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义好了关键帧后，下来就可以直接用它了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: rotate <span class="number">2s</span>;</span><br></pre></td></tr></table></figure>





<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>transition（过度）</td>
<td>用于设置元素的样式过度，和animation有着类似的效果，但细节上有很大的不同</td>
</tr>
<tr>
<td>transform（变形）</td>
<td>用于元素进行旋转、缩放、移动或倾斜，和设置样式的动画并没有什么关系，就相当于color一样用来设置元素的“外表”</td>
</tr>
<tr>
<td>translate（移动）</td>
<td>只是transform的一个属性值，即移动</td>
</tr>
<tr>
<td>animation（动画）</td>
<td>用于设置动画属性，他是一个简写的属性，包含6个属性</td>
</tr>
</tbody></table>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000022540857">https://segmentfault.com/a/1190000022540857</a></li>
<li><a href="https://zh.m.wikipedia.org/wiki/CSS%E5%8A%A8%E7%94%BB">https://zh.m.wikipedia.org/wiki/CSS%E5%8A%A8%E7%94%BB</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>array</title>
    <url>/archives/a10ceeb7.html</url>
    <content><![CDATA[<h1 id="面试官：数组新增了哪些扩展？"><a href="#面试官：数组新增了哪些扩展？" class="headerlink" title="面试官：数组新增了哪些扩展？"></a>面试官：数组新增了哪些扩展？</h1><p> <img src="https://static.vue-js.com/a156b8d0-53c5-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、扩展运算符的应用"><a href="#一、扩展运算符的应用" class="headerlink" title="一、扩展运算符的应用"></a>一、扩展运算符的应用</h2><p>ES6通过扩展元素符<code>...</code>，好比 <code>rest</code> 参数的逆运算，将一个数组转为用逗号分隔的参数序列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)]</span><br><span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></table></figure>

<p>主要用于函数调用的时候，将一个数组变为参数序列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">  array.push(...items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">4</span>, <span class="number">38</span>];</span><br><span class="line">add(...numbers) <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>

<p>可以将某些数据结构转为数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...document.querySelectorAll(<span class="string">&#x27;div&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<p>能够更简单实现数组复制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br><span class="line"><span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure>

<p>数组的合并也更为简洁了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line"><span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p>注意：通过扩展运算符实现的是浅拷贝，修改了引用指向的值，会同步反映到新数组</p>
<p>下面看个例子就清楚多了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>]];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr3  = [...arr1,...arr2]</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">9999</span> <span class="comment">// 修改arr1里面数组成员值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]) <span class="comment">// 影响到arr3,[&#x27;a&#x27;,&#x27;b&#x27;,[9999,2],&#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>扩展运算符可以与解构赋值结合起来，用于生成数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">&quot;foo&quot;</span>];</span><br><span class="line">first  <span class="comment">// &quot;foo&quot;</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<p>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [...butLast, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<p>可以将字符串转为真正的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[...<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br></pre></td></tr></table></figure>

<p>定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> array = [...nodeList];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>如果对没有 Iterator 接口的对象，使用扩展运算符，将会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [...obj]; <span class="comment">// TypeError: Cannot spread non-iterable object</span></span><br></pre></td></tr></table></figure>



<h2 id="二、构造函数新增的方法"><a href="#二、构造函数新增的方法" class="headerlink" title="二、构造函数新增的方法"></a>二、构造函数新增的方法</h2><p>关于构造函数，数组新增的方法有如下：</p>
<ul>
<li>Array.from()</li>
<li>Array.of()</li>
</ul>
<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>将两类对象转为真正的数组：类似数组的对象和可遍历<code>（iterable）</code>的对象（包括 <code>ES6</code> 新增的数据结构 <code>Set</code> 和 <code>Map</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">x</span>) =&gt;</span> x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>



<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>用于将一组值，转换为数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br></pre></td></tr></table></figure>

<p>没有参数的时候，返回一个空数组</p>
<p>当参数只有一个的时候，实际上是指定数组的长度</p>
<p>参数个数不少于 2 个时，<code>Array()</code>才会返回由参数组成的新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>() <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure>



<h3 id="三、实例对象新增的方法"><a href="#三、实例对象新增的方法" class="headerlink" title="三、实例对象新增的方法"></a>三、实例对象新增的方法</h3><p>关于数组实例对象新增的方法有如下：</p>
<ul>
<li>copyWithin()</li>
<li>find()、findIndex()</li>
<li>fill()</li>
<li>entries()，keys()，values()</li>
<li>includes()</li>
<li>flat()，flatMap()</li>
</ul>
<h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h3><p>将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组</p>
<p>参数如下：</p>
<ul>
<li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li>
<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。</li>
<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>) <span class="comment">// 将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2</span></span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5] </span></span><br></pre></td></tr></table></figure>



<h3 id="find-、findIndex"><a href="#find-、findIndex" class="headerlink" title="find()、findIndex()"></a>find()、findIndex()</h3><p><code>find()</code>用于找出第一个符合条件的数组成员</p>
<p>参数是一个回调函数，接受三个参数依次为当前的值、当前的位置和原数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p><code>findIndex</code>返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>这两个方法都可以接受第二个参数，用来绑定回调函数的<code>this</code>对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v &gt; <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;;</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">15</span>].find(f, person);    <span class="comment">// 26</span></span><br></pre></td></tr></table></figure>



<h3 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h3><p>使用给定值，填充一个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br></pre></td></tr></table></figure>

<p>还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>注意，如果填充的类型为对象，则是浅拷贝</p>
<h3 id="entries-，keys-，values"><a href="#entries-，keys-，values" class="headerlink" title="entries()，keys()，values()"></a>entries()，keys()，values()</h3><p><code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">or (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p>用于判断数组是否包含给定的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>方法的第二个参数表示搜索的起始位置，默认为<code>0</code></p>
<p>参数为负数则表示倒数的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, -<span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="flat-，flatMap"><a href="#flat-，flatMap" class="headerlink" title="flat()，flatMap()"></a>flat()，flatMap()</h3><p>将数组扁平化处理，返回一个新数组，对原数据没有影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p><code>flat()</code>默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将<code>flat()</code>方法的参数写成一个整数，表示想要拉平的层数，默认为1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p><code>flatMap()</code>方法对原数组的每个成员执行一个函数相当于执行<code>Array.prototype.map()</code>，然后对返回值组成的数组执行<code>flat()</code>方法。该方法返回一个新数组，不改变原数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span><br><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure>

<p><code>flatMap()</code>方法还可以有第二个参数，用来绑定遍历函数里面的<code>this</code></p>
<h3 id="四、数组的空位"><a href="#四、数组的空位" class="headerlink" title="四、数组的空位"></a>四、数组的空位</h3><p>数组的空位指，数组的某一个位置没有任何值</p>
<p>ES6 则是明确将空位转为<code>undefined</code>，包括<code>Array.from</code>、扩展运算符、<code>copyWithin()</code>、<code>fill()</code>、<code>entries()</code>、<code>keys()</code>、<code>values()</code>、<code>find()</code>和<code>findIndex()</code></p>
<p>建议大家在日常书写中，避免出现空位</p>
<h3 id="五、排序稳定性"><a href="#五、排序稳定性" class="headerlink" title="五、排序稳定性"></a>五、排序稳定性</h3><p>将<code>sort()</code>默认设置为稳定的排序算法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="string">&#x27;peach&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;straw&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;spork&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stableSorting = <span class="function">(<span class="params">s1, s2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s1[<span class="number">0</span>] &lt; s2[<span class="number">0</span>]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">arr.sort(stableSorting)</span><br><span class="line"><span class="comment">// [&quot;apple&quot;, &quot;peach&quot;, &quot;straw&quot;, &quot;spork&quot;]</span></span><br></pre></td></tr></table></figure>

<p>排序结果中，<code>straw</code>在<code>spork</code>的前面，跟原始顺序一致</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://es6.ruanyifeng.com/#docs/array">https://es6.ruanyifeng.com/#docs/array</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>array_api</title>
    <url>/archives/ced3960e.html</url>
    <content><![CDATA[<h1 id="面试官：数组的常用方法有哪些？"><a href="#面试官：数组的常用方法有哪些？" class="headerlink" title="面试官：数组的常用方法有哪些？"></a>面试官：数组的常用方法有哪些？</h1><p><img src="https://static.vue-js.com/5842e560-67b6-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、操作方法"><a href="#一、操作方法" class="headerlink" title="一、操作方法"></a>一、操作方法</h2><p>数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会</p>
<p>下面对数组常用的操作方法做一个归纳</p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p>
<ul>
<li>push()</li>
<li>unshift()</li>
<li>splice()</li>
<li>concat()</li>
</ul>
<h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = []; <span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> count = colors.push(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">// 推入两项</span></span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>unshift()在数组开头添加任意多个值，然后返回新的数组长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> count = colors.unshift(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>); <span class="comment">// 从数组开头推入两项</span></span><br><span class="line">alert(count); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// red,yellow,orange,green,blue</span></span><br><span class="line"><span class="built_in">console</span>.log(removed); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.concat(<span class="string">&quot;yellow&quot;</span>, [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;brown&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>下面三种都会影响原数组，最后一项不影响原数组：</p>
<ul>
<li>pop()</li>
<li>shift()</li>
<li>splice()</li>
<li>slice()</li>
</ul>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p><code>pop()</code> 方法用于删除数组的最后一项，同时减少数组的<code> length</code> 值，返回被删除的项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> item = colors.pop(); <span class="comment">// 取得最后一项</span></span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">// green</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.length); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的<code> length</code> 值，返回被删除的项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> item = colors.shift(); <span class="comment">// 取得第一项</span></span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">// red</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.length); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h4 id="splice-1"><a href="#splice-1" class="headerlink" title="splice()"></a>splice()</h4><p>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.splice(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 删除第一项</span></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// green,blue</span></span><br><span class="line"><span class="built_in">console</span>.log(removed); <span class="comment">// red，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>slice() 用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.slice(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors3 = colors.slice(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// red,green,blue,yellow,purple</span></span><br><span class="line">concole.log(colors2); <span class="comment">// green,blue,yellow,purple</span></span><br><span class="line">concole.log(colors3); <span class="comment">// green,blue,yellow</span></span><br></pre></td></tr></table></figure>

<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><p>即修改原来数组的内容，常用<code>splice</code></p>
<h4 id="splice-2"><a href="#splice-2" class="headerlink" title="splice()"></a>splice()</h4><p>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;purple&quot;</span>); <span class="comment">// 插入两个值，删除一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// red,red,purple,blue</span></span><br><span class="line"><span class="built_in">console</span>.log(removed); <span class="comment">// green，只有一个元素的数组</span></span><br></pre></td></tr></table></figure>

<h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>即查找元素，返回元素坐标或者元素值</p>
<ul>
<li>indexOf()</li>
<li>includes()</li>
<li>find()</li>
</ul>
<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.indexOf(<span class="number">4</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.includes(<span class="number">4</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>返回第一个匹配的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Matt&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">29</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line">people.find(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> element.age &lt; <span class="number">28</span>); <span class="comment">// // &#123;name: &quot;Matt&quot;, age: 27&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、排序方法"><a href="#二、排序方法" class="headerlink" title="二、排序方法"></a>二、排序方法</h2><p>数组有两个方法可以用来对元素重新排序：</p>
<ul>
<li>reverse()</li>
<li>sort()</li>
</ul>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>顾名思义，将数组元素方向反转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">values.reverse();</span><br><span class="line">alert(values); <span class="comment">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort()方法接受一个比较函数，用于判断哪个值应该排在前面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort(compare);</span><br><span class="line">alert(values); <span class="comment">// 0,1,5,10,15</span></span><br></pre></td></tr></table></figure>

<h2 id="三、转换方法"><a href="#三、转换方法" class="headerlink" title="三、转换方法"></a>三、转换方法</h2><p>常见的转换方法有：</p>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line">alert(colors.join(<span class="string">&quot;,&quot;</span>)); <span class="comment">// red,green,blue</span></span><br><span class="line">alert(colors.join(<span class="string">&quot;||&quot;</span>)); <span class="comment">// red||green||blue</span></span><br></pre></td></tr></table></figure>

<h2 id="四、迭代方法"><a href="#四、迭代方法" class="headerlink" title="四、迭代方法"></a>四、迭代方法</h2><p>常用来迭代数组的方法（都不改变原数组）有如下：</p>
<ul>
<li>some()</li>
<li>every()</li>
<li>forEach()</li>
<li>filter()</li>
<li>map()</li>
</ul>
<h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>对数组每一项都运行传入的测试函数，如果至少有 1 个元素返回 true ，则这个方法返回 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> someResult = numbers.some(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(someResult); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p>对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.every(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(everyResult); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>对数组每一项都运行传入的函数，没有返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>对数组每一项都运行传入的函数，函数返回 <code>true</code> 的项会组成数组之后返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> filterResult = numbers.filter(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(filterResult); <span class="comment">// 3,4,5,4,3</span></span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.map(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mapResult); <span class="comment">// 2,4,6,8,10,8,6,4,2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>array_api</tag>
      </tags>
  </entry>
  <entry>
    <title>bind_call_apply</title>
    <url>/archives/17a85756.html</url>
    <content><![CDATA[<h1 id="面试官：bind、call、apply-区别？如何实现一个bind"><a href="#面试官：bind、call、apply-区别？如何实现一个bind" class="headerlink" title="面试官：bind、call、apply 区别？如何实现一个bind?"></a>面试官：bind、call、apply 区别？如何实现一个bind?</h1><p> <img src="https://static.vue-js.com/a900e460-7be4-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、作用"><a href="#一、作用" class="headerlink" title="一、作用"></a>一、作用</h2><p><code>call </code>、<code>apply </code>、<code>bind </code>作用是改变函数执行时的上下文，简而言之就是改变函数运行时的<code>this</code>指向</p>
<p>那么什么情况下需要改变<code>this</code>的指向呢？下面举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;lucy&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;martin&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.say(); <span class="comment">// martin，this 指向 obj 对象</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.say,<span class="number">0</span>); <span class="comment">// lucy，this 指向 window 对象</span></span><br></pre></td></tr></table></figure>

<p>从上面可以看到，正常情况<code>say</code>方法输出<code>martin</code></p>
<p>但是我们把<code>say</code>放在<code>setTimeout</code>方法中，在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候<code>this</code>指向<code>window</code>，所以输出<code>lucy</code></p>
<p>我们实际需要的是<code>this</code>指向<code>obj</code>对象，这时候就需要该改变<code>this</code>指向了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(obj.say.bind(obj),<span class="number">0</span>); <span class="comment">//martin，this指向obj对象</span></span><br></pre></td></tr></table></figure>



<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>下面再来看看<code>apply</code>、<code>call</code>、<code>bind</code>的使用</p>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><code>apply</code>接受两个参数，第一个参数是<code>this</code>的指向，第二个参数是函数接受的参数，以数组的形式传入</p>
<p>改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>,args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">myname</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.apply(obj,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this会变成传入的obj，传入的参数必须是一个数组；</span></span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>

<p>当第一个参数为<code>null</code>、<code>undefined</code>的时候，默认指向<code>window</code>(在浏览器中)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this指向window</span></span><br><span class="line">fn.apply(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>



<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><code>call</code>方法的第一个参数也是<code>this</code>的指向，后面传入的是一个参数列表</p>
<p>跟<code>apply</code>一样，改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>,args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">myname</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(obj,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// this会变成传入的obj，传入的参数必须是一个数组；</span></span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>

<p>同样的，当第一个参数为<code>null</code>、<code>undefined</code>的时候，默认指向<code>window</code>(在浏览器中)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fn.call(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this指向window</span></span><br><span class="line">fn.call(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>



<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind方法和call很相似，第一参数也是<code>this</code>的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)</p>
<p>改变<code>this</code>指向后不会立即执行，而是返回一个永久改变<code>this</code>指向的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>,args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">myname</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bindFn = fn.bind(obj); <span class="comment">// this 也会变成传入的obj ，bind不是立即执行需要执行一次</span></span><br><span class="line">bindFn(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// this指向obj</span></span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// this指向window</span></span><br></pre></td></tr></table></figure>


<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>从上面可以看到，<code>apply</code>、<code>call</code>、<code>bind</code>三者的区别在于：</p>
<ul>
<li>三者都可以改变函数的<code>this</code>对象指向</li>
<li>三者第一个参数都是<code>this</code>要指向的对象，如果如果没有这个参数或参数为<code>undefined</code>或<code>null</code>，则默认指向全局<code>window</code></li>
<li>三者都可以传参，但是<code>apply</code>是数组，而<code>call</code>是参数列表，且<code>apply</code>和<code>call</code>是一次性传入参数，而<code>bind</code>可以分为多次传入</li>
<li><code>bind </code>是返回绑定this之后的函数，<code>apply </code>、<code>call</code> 则是立即执行 </li>
</ul>
<h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><p>实现<code>bind</code>的步骤，我们可以分解成为三部分：</p>
<ul>
<li>修改<code>this</code>指向</li>
<li>动态传递参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：只在bind中传递函数参数</span></span><br><span class="line">fn.bind(obj,<span class="number">1</span>,<span class="number">2</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：在bind中传递函数参数，也在返回函数中传递参数</span></span><br><span class="line">fn.bind(obj,<span class="number">1</span>)(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>兼容<code>new</code>关键字</li>
</ul>
<p>整体实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断调用对象是否为函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>),</span><br><span class="line">          fn = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据调用方式，传入不同绑定值</span></span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> Fn ? <span class="keyword">new</span> fn(...arguments) : context, args.concat(...arguments)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>bind_call_apply</tag>
      </tags>
  </entry>
  <entry>
    <title>box</title>
    <url>/archives/8a9483a.html</url>
    <content><![CDATA[<h1 id="CSS面试系列"><a href="#CSS面试系列" class="headerlink" title="CSS面试系列"></a>CSS面试系列</h1><h2 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1.盒子模型"></a>1.盒子模型</h2><p><img src="https://static.vue-js.com/8d0e9ca0-8f9b-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）</p>
<p>一个盒子由四个部分组成：<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code></p>
<p><code>content</code>，即实际内容，显示文本和图像</p>
<p><code>boreder</code>，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成</p>
<p><code>padding</code>，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的<code>background</code>属性影响</p>
<p><code>margin</code>，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域</p>
<p>下面来段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  盒子模型</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们在浏览器查看元素时，却发现元素的大小变成了<code>240px</code></p>
<p>这是因为，在<code>CSS</code>中，盒子模型可以分成：</p>
<ul>
<li>W3C 标准盒子模型</li>
<li>IE 怪异盒子模型</li>
</ul>
<p>默认情况下，盒子模型为<code>W3C</code> 标准盒子模型</p>
<h3 id="2-标准盒子模型"><a href="#2-标准盒子模型" class="headerlink" title="2.标准盒子模型"></a>2.标准盒子模型</h3><p>标准盒子模型，是浏览器默认的盒子模型</p>
<ul>
<li><p>盒子总宽度 = width + padding + border + margin;</p>
</li>
<li><p>盒子总高度 = height + padding + border + margin</p>
</li>
</ul>
<p>也就是，<code>width/height</code> 只是内容高度，不包含 <code>padding</code> 和 <code>border </code>值</p>
<p>所以上面问题中，设置<code>width</code>为200px，但由于存在<code>padding</code>，但实际上盒子的宽度有240px</p>
<h3 id="3-IE-怪异盒子模型"><a href="#3-IE-怪异盒子模型" class="headerlink" title="3.IE 怪异盒子模型"></a>3.IE 怪异盒子模型</h3><ul>
<li><p>盒子总宽度 = width </p>
</li>
<li><p>盒子总高度 = height </p>
</li>
</ul>
<p>也就是，<code>width/height</code> 包含了 <code>padding </code>和 <code>border </code>值</p>
<h3 id="4-Box-sizing"><a href="#4-Box-sizing" class="headerlink" title="4.Box-sizing"></a>4.Box-sizing</h3><p>CSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: content-box|border-box|inherit:</span><br></pre></td></tr></table></figure>

<ul>
<li>content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致</li>
<li>border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致</li>
<li>inherit 指定 box-sizing 属性的值，应该从父元素继承</li>
</ul>
<p>回到上面的例子里，设置盒子为 border-box 模型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  盒子模型</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这时候，就可以发现盒子的所占据的宽度为200px</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>box</tag>
      </tags>
  </entry>
  <entry>
    <title>cache</title>
    <url>/archives/41476be7.html</url>
    <content><![CDATA[<h1 id="面试官：Javascript-本地存储的方式有哪些？区别及应用场景？"><a href="#面试官：Javascript-本地存储的方式有哪些？区别及应用场景？" class="headerlink" title="面试官：Javascript 本地存储的方式有哪些？区别及应用场景？"></a>面试官：Javascript 本地存储的方式有哪些？区别及应用场景？</h1><p><img src="https://static.vue-js.com/68dccf20-849f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、方式"><a href="#一、方式" class="headerlink" title="一、方式"></a>一、方式</h2><p><code>javaScript</code>本地缓存的方法我们主要讲述以下四种：</p>
<ul>
<li>cookie</li>
<li>sessionStorage</li>
<li>localStorage</li>
<li>indexedDB</li>
</ul>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p><code>Cookie</code>，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。是为了解决 <code>HTTP </code>无状态导致的问题</p>
<p>作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 <code>cookie </code>有效期、安全性、使用范围的可选属性组成</p>
<p>但是<code>cookie</code>在每次请求中都会被发送，如果不使用 <code>HTTPS </code>并对其加密，其保存的信息很容易被窃取，导致安全风险。举个例子，在一些使用 <code>cookie </code>保持登录态的网站上，如果 <code>cookie </code>被窃取，他人很容易利用你的 <code>cookie </code>来假扮成你登录网站</p>
<p>关于<code>cookie</code>常用的属性如下：</p>
<ul>
<li>Expires 用于设置 Cookie 的过期时间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Expires=Wed, <span class="number">21</span> Oct <span class="number">2015</span> <span class="number">07</span>:<span class="number">28</span>:<span class="number">00</span> GMT</span><br></pre></td></tr></table></figure>

<ul>
<li>Max-Age 用于设置在 Cookie 失效之前需要经过的秒数（优先级比<code>Expires</code>高）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Max-Age=<span class="number">604800</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Domain </code>指定了 <code>Cookie</code> 可以送达的主机名</li>
<li><code>Path </code>指定了一个 <code>URL </code>路径，这个路径必须出现在要请求的资源的路径中才可以发送 <code>Cookie</code> 首部</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Path=<span class="regexp">/docs   # /</span>docs/Web/ 下的资源会带 Cookie 首部</span><br></pre></td></tr></table></figure>

<ul>
<li>标记为 <code>Secure </code>的 <code>Cookie </code>只应通过被<code>HTTPS</code>协议加密过的请求发送给服务端</li>
</ul>
<p>通过上述，我们可以看到<code>cookie</code>又开始的作用并不是为了缓存而设计出来，只是借用了<code>cookie</code>的特性实现缓存</p>
<p>关于<code>cookie</code>的使用如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;名字=值&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>关于<code>cookie</code>的修改，首先要确定<code>domain</code>和<code>path</code>属性都是相同的才可以，其中有一个不同得时候都会创建出一个新的<code>cookie</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>-Cookie:name=aa; domain=aa.net; path=/  # 服务端设置</span><br><span class="line"><span class="built_in">document</span>.cookie =name=bb; domain=aa.net; path=/  # 客户端设置</span><br></pre></td></tr></table></figure>

<p>最后<code>cookie</code>的删除，最常用的方法就是给<code>cookie</code>设置一个过期的事件，这样<code>cookie</code>过期后会被浏览器删除</p>
<h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p><code>HTML5</code>新方法，IE8 及以上浏览器都兼容</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>生命周期：持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的</li>
<li>存储的信息在同一域中是共享的</li>
<li>当本页操作（新增、修改、删除）了<code>localStorage</code>的时候，本页面不会触发<code>storage</code>事件,但是别的页面会触发<code>storage</code>事件。</li>
<li>大小：5M（跟浏览器厂商有关系）</li>
<li><code>localStorage</code>本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li>
<li>受同源策略的限制</li>
</ul>
<p>下面再看看关于<code>localStorage</code>的使用</p>
<p>设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;cfangxu&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.getItem(<span class="string">&quot;username&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>获取键名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.key(<span class="number">0</span>); <span class="comment">//获取第一个键名</span></span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;username&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>一次性清除所有存储</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.clear();</span><br></pre></td></tr></table></figure>

<p><code>localStorage</code> 也不是完美的，它有两个缺点：</p>
<ul>
<li>无法像<code>Cookie</code>一样设置过期时间</li>
<li>只能存入字符串，无法直接存对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;key&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;value&quot;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;key&quot;</span>)); <span class="comment">// &#x27;[object, Object]&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p><code>sessionStorage </code>和 <code>localStorage </code>使用方法基本一致，唯一不同的是生命周期，一旦页面（会话）关闭，<code>sessionStorage</code> 将会删除数据</p>
<h3 id="扩展的前端存储方式"><a href="#扩展的前端存储方式" class="headerlink" title="扩展的前端存储方式"></a>扩展的前端存储方式</h3><p><code>indexedDB </code>是一种低级 API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该 API 使用索引来实现对该数据的高性能搜索</p>
<p>虽然 <code>Web Storage </code>对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。<code>IndexedDB</code>提供了一个解决方案</p>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li>储存量理论上没有上限</li>
<li>所有操作都是异步的，相比 <code>LocalStorage</code> 同步操作性能更高，尤其是数据量较大时</li>
<li>原生支持储存<code>JS</code>的对象</li>
<li>是个正经的数据库，意味着数据库能干的事它都能干</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li>操作非常繁琐</li>
<li>本身有一定门槛</li>
</ul>
<p>关于<code>indexedDB</code>的使用基本使用步骤如下：</p>
<ul>
<li><p>打开数据库并且开始一个事务</p>
</li>
<li><p>创建一个 <code>object store</code></p>
</li>
<li><p>构建一个请求来执行一些数据库操作，像增加或提取数据等。</p>
</li>
<li><p>通过监听正确类型的 <code>DOM</code> 事件以等待操作完成。</p>
</li>
<li><p>在操作结果上进行一些操作（可以在 <code>request </code>对象中找到）</p>
</li>
</ul>
<p>关于使用<code>indexdb</code>的使用会比较繁琐，大家可以通过使用<code>Godb.js</code>库进行缓存，最大化的降低操作难度</p>
<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>关于<code>cookie</code>、<code>sessionStorage</code>、<code>localStorage</code>三者的区别主要如下：</p>
<ul>
<li><p>存储大小：<code> cookie</code>数据大小不能超过<code>4k</code>，<code>sessionStorage</code>和<code>localStorage </code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到 5M 或更大</p>
</li>
<li><p>有效时间：<code>localStorage </code>存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； <code>sessionStorage </code>数据在当前浏览器窗口关闭后自动删除；<code>cookie</code>设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</p>
</li>
<li><p>数据与服务器之间的交互方式，<code> cookie</code>的数据会自动的传递到服务器，服务器端也可以写<code>cookie</code>到客户端； <code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</p>
</li>
</ul>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>在了解了上述的前端的缓存方式后，我们可以看看针对不对场景的使用选择：</p>
<ul>
<li>标记用户与跟踪用户行为的情况，推荐使用<code>cookie</code></li>
<li>适合长期保存在本地的数据（令牌），推荐使用<code>localStorage</code></li>
<li>敏感账号一次性登录，推荐使用<code>sessionStorage</code></li>
<li>存储大量数据的情况、在线文档（富文本编辑器）保存编辑历史的情况，推荐使用<code>indexedDB</code></li>
</ul>
<h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ">https://mp.weixin.qq.com/s/mROjtpoXarN--UDfEMqwhQ</a></li>
<li><a href="https://github.com/chenstarx/GoDB.js">https://github.com/chenstarx/GoDB.js</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>center</title>
    <url>/archives/40f0eb24.html</url>
    <content><![CDATA[<h2 id="1-水平垂直居中的方法"><a href="#1-水平垂直居中的方法" class="headerlink" title="1.水平垂直居中的方法"></a>1.水平垂直居中的方法</h2><h3 id="1-元素水平垂直居中"><a href="#1-元素水平垂直居中" class="headerlink" title="1.元素水平垂直居中"></a>1.元素水平垂直居中</h3><ul>
<li><p>利用定位+margin:auto</p>
</li>
<li><p>利用定位+margin:负值</p>
</li>
<li><p>利用定位+transform</p>
</li>
<li><p>table布局</p>
</li>
<li><p>flex布局</p>
</li>
<li><p>grid布局</p>
</li>
</ul>
<h3 id="2-定位-margin-auto"><a href="#2-定位-margin-auto" class="headerlink" title="2.定位+margin:auto"></a>2.定位+margin:auto</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0a3b98</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#f0a238</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">right</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>:auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父级设置为相对定位，子级绝对定位 ，并且四个定位属性的值都设置了0，那么这时候如果子级没有设置宽高，则会被拉开到和父级一样宽高</p>
<p>这里子元素设置了宽高，所以宽高会按照我们的设置来显示，但是实际上子级的虚拟占位已经撑满了整个父级，这时候再给它一个<code>margin：auto</code>它就可以上下左右都居中了</p>
<h3 id="3-定位-margin-负值"><a href="#3-定位-margin-负值" class="headerlink" title="3.定位+margin:负值"></a>3.定位+margin:负值</h3><p>绝大多数情况下，设置父元素为相对定位， 子元素移动自身50%实现水平垂直居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>:-<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>:-<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>整个实现思路如下图所示：</p>
<p> <img src="https://static.vue-js.com/922dc300-95f9-11eb-ab90-d9ae814b240d.png"></p>
<ul>
<li>初始位置为方块1的位置</li>
<li>当设置left、top为50%的时候，内部子元素为方块2的位置</li>
<li>设置margin为负数时，使内部子元素到方块3的位置，即中间位置</li>
</ul>
<p>这种方案不要求父元素的高度，也就是即使父元素的高度变化了，仍然可以保持在父元素的垂直居中位置，水平方向上是一样的操作</p>
<p>但是该方案需要知道子元素自身的宽高，但是我们可以通过下面<code>transform</code>属性进行移动</p>
<h3 id="4-定位-transform"><a href="#4-定位-transform" class="headerlink" title="4.定位+transform"></a>4.定位+transform</h3><p>实现代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.father</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.son</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p><code>translate(-50%, -50%)</code>将会将元素位移自己宽度和高度的-50%</p>
<p>这种方法其实和最上面被否定掉的margin负值用法一样，可以说是<code>margin</code>负值的替代方案，并不需要知道自身元素的宽高</p>
<h3 id="4-table布局"><a href="#4-table布局" class="headerlink" title="4.table布局"></a>4.table布局</h3><p>设置父元素为<code>display:table-cell</code>，子元素设置 <code>display: inline-block</code>。利用<code>vertical</code>和<code>text-align</code>可以让所有的行内块级元素水平垂直居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="css">        <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-flex弹性布局"><a href="#5-flex弹性布局" class="headerlink" title="5.flex弹性布局"></a>5.flex弹性布局</h3><p>还是看看实现的整体代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>css3</code>中了<code>flex</code>布局，可以非常简单实现垂直水平居中</p>
<p>这里可以简单看看<code>flex</code>布局的关键属性作用：</p>
<ul>
<li><p>display: flex时，表示该容器内部的元素将按照flex进行布局</p>
</li>
<li><p>align-items: center表示这些元素将相对于本容器水平居中</p>
</li>
<li><p>justify-content: center也是同样的道理垂直居中</p>
</li>
</ul>
<h3 id="6-grid网格布局"><a href="#6-grid网格布局" class="headerlink" title="6.grid网格布局"></a>6.grid网格布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>:center;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里看到，<code>gird</code>网格布局和<code>flex</code>弹性布局都简单粗暴</p>
<h2 id="2-内联和块级居中"><a href="#2-内联和块级居中" class="headerlink" title="2.内联和块级居中"></a>2.内联和块级居中</h2><p>根据元素标签的性质，可以分为：</p>
<ul>
<li>内联元素居中布局</li>
<li>块级元素居中布局</li>
</ul>
<h3 id="内联元素居中布局"><a href="#内联元素居中布局" class="headerlink" title="内联元素居中布局"></a>内联元素居中布局</h3><p>水平居中</p>
<ul>
<li>行内元素可设置：text-align: center</li>
<li>flex布局设置父元素：display: flex; justify-content: center</li>
</ul>
<p>垂直居中</p>
<ul>
<li>单行文本父元素确认高度：height === line-height</li>
<li>多行文本父元素确认高度：display: table-cell; vertical-align: middle</li>
</ul>
<h3 id="块级元素居中布局"><a href="#块级元素居中布局" class="headerlink" title="块级元素居中布局"></a>块级元素居中布局</h3><p>水平居中</p>
<ul>
<li>定宽: margin: 0 auto</li>
<li>绝对定位+left:50%+margin:负自身一半</li>
</ul>
<p>垂直居中</p>
<ul>
<li>position: absolute设置left、top、margin-left、margin-top(定高)</li>
<li>transform: translate(x, y)</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>center</tag>
      </tags>
  </entry>
  <entry>
    <title>closure</title>
    <url>/archives/48078dd1.html</url>
    <content><![CDATA[<h1 id="面试官：说说你对闭包的理解？闭包使用场景"><a href="#面试官：说说你对闭包的理解？闭包使用场景" class="headerlink" title="面试官：说说你对闭包的理解？闭包使用场景"></a>面试官：说说你对闭包的理解？闭包使用场景</h1><p> <img src="https://static.vue-js.com/c141a030-6a7a-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）</p>
<p>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p>
<p>在 <code>JavaScript </code>中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁</p>
<p>下面给出一个简单的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>; <span class="comment">// name 是一个被 init 创建的局部变量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123; <span class="comment">// displayName() 是内部函数，一个闭包</span></span><br><span class="line">        alert(name); <span class="comment">// 使用了父函数中声明的变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    displayName();</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>

<p><code>displayName()</code> 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量</p>
<h2 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h2><p>任何闭包的使用场景都离不开这两点：</p>
<ul>
<li>创建私有变量</li>
<li>延长变量的生命周期</li>
</ul>
<blockquote>
<p>一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的</p>
</blockquote>
<p>下面举个例子：</p>
<p>在页面上添加一些可以调整字号的按钮</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSizer</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.fontSize = size + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> size12 = makeSizer(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> size14 = makeSizer(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">var</span> size16 = makeSizer(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;size-12&#x27;</span>).onclick = size12;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;size-14&#x27;</span>).onclick = size14;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;size-16&#x27;</span>).onclick = size16;</span><br></pre></td></tr></table></figure>



<h3 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h3><p>柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设我们有一个求长方形面积的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们碰到的长方形的宽老是10</span></span><br><span class="line"><span class="keyword">const</span> area1 = getArea(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">const</span> area2 = getArea(<span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line"><span class="keyword">const</span> area3 = getArea(<span class="number">10</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以使用闭包柯里化这个计算面积的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">height</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTenWidthArea = getArea(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// 之后碰到宽度为10的长方形就可以这样计算面积</span></span><br><span class="line"><span class="keyword">const</span> area1 = getTenWidthArea(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而且如果遇到宽度偶尔变化也可以轻松复用</span></span><br><span class="line"><span class="keyword">const</span> getTwentyWidthArea = getArea(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>



<h3 id="使用闭包模拟私有方法"><a href="#使用闭包模拟私有方法" class="headerlink" title="使用闭包模拟私有方法"></a>使用闭包模拟私有方法</h3><p>在<code>JavaScript</code>中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法</p>
<p>下面举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeBy</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeBy(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeBy(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Counter1 = makeCounter();</span><br><span class="line"><span class="keyword">var</span> Counter2 = makeCounter();</span><br><span class="line"><span class="built_in">console</span>.log(Counter1.value()); <span class="comment">/* logs 0 */</span></span><br><span class="line">Counter1.increment();</span><br><span class="line">Counter1.increment();</span><br><span class="line"><span class="built_in">console</span>.log(Counter1.value()); <span class="comment">/* logs 2 */</span></span><br><span class="line">Counter1.decrement();</span><br><span class="line"><span class="built_in">console</span>.log(Counter1.value()); <span class="comment">/* logs 1 */</span></span><br><span class="line"><span class="built_in">console</span>.log(Counter2.value()); <span class="comment">/* logs 0 */</span></span><br></pre></td></tr></table></figure>

<p>上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式</p>
<p>两个计数器 <code>Counter1</code> 和 <code>Counter2</code> 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期</p>
<h2 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h2><p>如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响</p>
<p>例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。</p>
<p>原因在于每个对象的创建，方法都会被重新赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name.toString();</span><br><span class="line">  <span class="built_in">this</span>.message = message.toString();</span><br><span class="line">  <span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.getMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name.toString();</span><br><span class="line">  <span class="built_in">this</span>.message = message.toString();</span><br><span class="line">&#125;</span><br><span class="line">MyObject.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line">MyObject.prototype.getMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>column_layout</title>
    <url>/archives/9a0dce2d.html</url>
    <content><![CDATA[<h2 id="1-双栏布局"><a href="#1-双栏布局" class="headerlink" title="1.双栏布局"></a>1.双栏布局</h2><h3 id="1-浮动实现"><a href="#1-浮动实现" class="headerlink" title="1.浮动实现"></a>1.浮动实现</h3><p>双栏布局非常常见，往往是以一个定宽栏和一个自适应的栏并排展示存在</p>
<p>实现思路也非常的简单：</p>
<ul>
<li>使用 float 左浮左边栏</li>
<li>右边模块使用 margin-left 撑出内容块做内容展示</li>
<li>为父级元素添加BFC，防止下方元素飞到上方内容</li>
</ul>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden; 添加BFC</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: <span class="number">210px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还有一种更为简单的使用则是采取：flex弹性布局</p>
<h3 id="2-flex弹性布局"><a href="#2-flex弹性布局" class="headerlink" title="2.flex弹性布局"></a>2.flex弹性布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>flex</code>可以说是最好的方案了，代码少，使用简单</p>
<p>注意的是，<code>flex</code>容器的一个默认属性值:<code>align-items: stretch;</code></p>
<p>这个属性导致了列等高的效果。 为了让两个盒子高度自动，需要设置: <code>align-items: flex-start</code></p>
<h2 id="2-三栏布局"><a href="#2-三栏布局" class="headerlink" title="2.三栏布局"></a>2.三栏布局</h2><p>实现三栏布局中间自适应的布局方式有：</p>
<ul>
<li>两边使用 float，中间使用 margin</li>
<li>两边使用 absolute，中间使用 margin</li>
<li>两边使用 float 和负 margin</li>
<li>display: table 实现</li>
<li>flex实现</li>
<li>grid网格布局</li>
</ul>
<h3 id="1-两边float-中间-margin"><a href="#1-两边float-中间-margin" class="headerlink" title="1.两边float + 中间 margin"></a>1.两边float + 中间 margin</h3><p>需要将中间的内容放在<code>html</code>结构最后，否则右侧会在中间内容的下方</p>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden; &lt;!-- 生成BFC，计算高度时考虑浮动的元素 --&gt;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: lightpink;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原理如下：</p>
<ul>
<li>两边固定宽度，中间宽度自适应。</li>
<li>利用中间元素的margin值控制两边的间距</li>
<li>宽度小于左右部分宽度之和时，右侧部分会被挤下去</li>
</ul>
<p>这种实现方式存在缺陷：</p>
<ul>
<li><p>主体内容是最后加载的。</p>
</li>
<li><p>右边在主体内容之前，如果是响应式设计，不能简单的换行展示</p>
</li>
</ul>
<h3 id="2-两边-absolute-中间-margin"><a href="#2-两边-absolute-中间-margin" class="headerlink" title="2.两边 absolute+中间 margin"></a>2.两边 absolute+中间 margin</h3><p>基于绝对定位的三栏布局：注意绝对定位的元素脱离文档流，相对于最近的已经定位的祖先元素进行定位。无需考虑HTML中结构的顺序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  </span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">110px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现流程：</p>
<ul>
<li>左右两边使用绝对定位，固定在两侧。</li>
<li>中间占满一行，但通过 margin和左右两边留出10px的间隔</li>
</ul>
<h3 id="3-两边使用-float-和负-margin"><a href="#3-两边使用-float-和负-margin" class="headerlink" title="3.两边使用 float 和负 margin"></a>3.两边使用 float 和负 margin</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.main-wrapper</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">110px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>; <span class="comment">/* 同自身宽度 */</span></span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现过程：</p>
<ul>
<li>中间使用了双层标签，外层是浮动的，以便左中右能在同一行展示</li>
<li>左边通过使用负 margin-left:-100%，相当于中间的宽度，所以向上偏移到左侧</li>
<li>右边通过使用负 margin-left:-100px，相当于自身宽度，所以向上偏移到最右侧</li>
</ul>
<p>缺点：</p>
<ul>
<li>增加了 .main-wrapper 一层，结构变复杂</li>
<li>使用负 margin，调试也相对麻烦</li>
</ul>
<h3 id="4-display-table-实现"><a href="#4-display-table-实现" class="headerlink" title="4.display: table 实现"></a>4.display: table 实现</h3><p><code>&lt;table&gt;</code> 标签用于展示行列数据，不适合用于布局。但是可以使用 <code>display: table</code> 来实现布局的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">    <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现原理：</p>
<ul>
<li>层通过 display: table设置为表格，设置 table-layout: fixed`表示列宽自身宽度决定，而不是自动计算。</li>
<li>内层的左中右通过 display: table-cell设置为表格单元。</li>
<li>左右设置固定宽度，中间设置 width: 100% 填充剩下的宽度</li>
</ul>
<h3 id="5-flex实现"><a href="#5-flex实现" class="headerlink" title="5.flex实现"></a>5.flex实现</h3><p>利用<code>flex</code>弹性布局，可以简单实现中间自适应</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现过程：</p>
<ul>
<li>仅需将容器设置为<code>display:flex;</code>，</li>
<li>盒内元素两端对其，将中间元素设置为<code>100%</code>宽度，或者设为<code>flex:1</code>，即可填充空白</li>
<li>盒内元素的高度撑开容器的高度</li>
</ul>
<p>优点：</p>
<ul>
<li>结构简单直观</li>
<li>可以结合 flex的其他功能实现更多效果，例如使用 order属性调整显示顺序，让主体内容优先加载，但展示在中间</li>
</ul>
<h3 id="6-grid网格布局"><a href="#6-grid网格布局" class="headerlink" title="6.grid网格布局"></a>6.grid网格布局</h3><p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        grid-template-<span class="attribute">columns</span>: <span class="number">300px</span> auto <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>跟<code>flex</code>弹性布局一样的简单</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>column_layout</tag>
      </tags>
  </entry>
  <entry>
    <title>context_stack</title>
    <url>/archives/10bf1714.html</url>
    <content><![CDATA[<h1 id="面试官：JavaScript-中执行上下文和执行栈是什么？"><a href="#面试官：JavaScript-中执行上下文和执行栈是什么？" class="headerlink" title="面试官：JavaScript 中执行上下文和执行栈是什么？"></a>面试官：JavaScript 中执行上下文和执行栈是什么？</h1><p><img src="https://static.vue-js.com/8652b710-74c1-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、执行上下文"><a href="#一、执行上下文" class="headerlink" title="一、执行上下文"></a>一、执行上下文</h2><p>简单的来说，执行上下文是一种对<code>Javascript</code>代码执行环境的抽象概念，也就是说只要有<code>Javascript</code>代码运行，那么它就一定是运行在执行上下文中</p>
<p>执行上下文的类型分为三种：</p>
<ul>
<li>全局执行上下文：只有一个，浏览器中的全局对象就是 <code>window </code>对象，<code>this</code> 指向这个全局对象</li>
<li>函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文</li>
<li>Eval 函数执行上下文： 指的是运行在 <code>eval</code> 函数中的代码，很少用而且不建议使用</li>
</ul>
<p>下面给出全局上下文和函数上下文的例子：</p>
<p><img src="https://static.vue-js.com/90dd3b60-74c1-11eb-85f6-6fac77c0c9b3.png"></p>
<p>紫色框住的部分为全局上下文，蓝色和橘色框起来的是不同的函数上下文。只有全局上下文（的变量）能被其他任何上下文访问</p>
<p>可以有任意多个函数上下文，每次调用函数创建一个新的上下文，会创建一个私有作用域，函数内部声明的任何变量都不能在当前函数作用域外部直接访问</p>
<h2 id="二、生命周期"><a href="#二、生命周期" class="headerlink" title="二、生命周期"></a>二、生命周期</h2><p>执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段</p>
<h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><p>创建阶段即当函数被调用，但未执行任何其内部代码之前</p>
<p>创建阶段做了三件事：</p>
<ul>
<li>确定 this 的值，也被称为 <code>This Binding</code></li>
<li>LexicalEnvironment（词法环境） 组件被创建</li>
<li>VariableEnvironment（变量环境） 组件被创建</li>
</ul>
<p>伪代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ExecutionContext = &#123;</span><br><span class="line">  ThisBinding = <span class="xml"><span class="tag">&lt;<span class="name">this</span> <span class="attr">value</span>&gt;</span>,     // 确定this</span></span><br><span class="line"><span class="xml">  LexicalEnvironment = &#123; ... &#125;,   // 词法环境</span></span><br><span class="line"><span class="xml">  VariableEnvironment = &#123; ... &#125;,  // 变量环境</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="This-Binding"><a href="#This-Binding" class="headerlink" title="This Binding"></a>This Binding</h4><p>确定<code>this</code>的值我们前面讲到，<code>this</code>的值是在执行的时候才能确认，定义的时候不能确认</p>
<h4 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h4><p>词法环境有两个组成部分：</p>
<ul>
<li><p>全局环境：是一个没有外部环境的词法环境，其外部环境引用为<code> null</code>，有一个全局对象，<code>this</code> 的值指向这个全局对象</p>
</li>
<li><p>函数环境：用户在函数中定义的变量被存储在环境记录中，包含了<code>arguments</code> 对象，外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境</p>
</li>
</ul>
<p>伪代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GlobalExectionContext = &#123;  <span class="comment">// 全局执行上下文</span></span><br><span class="line">  <span class="attr">LexicalEnvironment</span>: &#123;       <span class="comment">// 词法环境</span></span><br><span class="line">    <span class="attr">EnvironmentRecord</span>: &#123;     <span class="comment">// 环境记录</span></span><br><span class="line">      <span class="attr">Type</span>: <span class="string">&quot;Object&quot;</span>,           <span class="comment">// 全局环境</span></span><br><span class="line">      <span class="comment">// 标识符绑定在这里</span></span><br><span class="line">      <span class="attr">outer</span>: &lt;<span class="literal">null</span>&gt;           <span class="comment">// 对外部环境的引用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionExectionContext = &#123; <span class="comment">// 函数执行上下文</span></span><br><span class="line">  <span class="attr">LexicalEnvironment</span>: &#123;     <span class="comment">// 词法环境</span></span><br><span class="line">    <span class="attr">EnvironmentRecord</span>: &#123;    <span class="comment">// 环境记录</span></span><br><span class="line">      <span class="attr">Type</span>: <span class="string">&quot;Declarative&quot;</span>,      <span class="comment">// 函数环境</span></span><br><span class="line">      <span class="comment">// 标识符绑定在这里      // 对外部环境的引用</span></span><br><span class="line">      <span class="attr">outer</span>: <span class="xml"><span class="tag">&lt;<span class="name">Global</span> <span class="attr">or</span> <span class="attr">outer</span> <span class="attr">function</span> <span class="attr">environment</span> <span class="attr">reference</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="变量环境"><a href="#变量环境" class="headerlink" title="变量环境"></a>变量环境</h4><p>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性</p>
<p>在 ES6 中，词法环境和变量环境的区别在于前者用于存储函数声明和变量（ <code>let</code> 和 <code>const</code> ）绑定，而后者仅用于存储变量（ <code>var</code> ）绑定</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">e, f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">return</span> e * f * g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = multiply(<span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>执行上下文如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GlobalExectionContext = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">ThisBinding</span>: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;  // 词法环境</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Object&quot;,</span><br><span class="line">      // 标识符绑定在这里</span><br><span class="line">      a: &lt; uninitialized &gt;,</span><br><span class="line">      b: &lt; uninitialized &gt;,</span><br><span class="line">      multiply: &lt; func &gt;</span><br><span class="line">    &#125;</span><br><span class="line">    outer: &lt;null&gt;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  VariableEnvironment: &#123;  // 变量环境</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Object&quot;,</span><br><span class="line">      // 标识符绑定在这里</span><br><span class="line">      c: undefined,</span><br><span class="line">    &#125;</span><br><span class="line">    outer: &lt;null&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionExectionContext = &#123;</span><br><span class="line"></span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 标识符绑定在这里</span><br><span class="line">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  VariableEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 标识符绑定在这里</span><br><span class="line">      g: undefined</span><br><span class="line">    &#125;,</span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>留意上面的代码，<code>let</code>和<code>const</code>定义的变量<code>a</code>和<code>b</code>在创建阶段没有被赋值，但<code>var</code>声明的变量从在创建阶段被赋值为<code>undefined</code></p>
<p>这是因为，创建阶段，会在代码中扫描变量和函数声明，然后将函数声明存储在环境中</p>
<p>但变量会被初始化为<code>undefined</code>(<code>var</code>声明的情况下)和保持<code>uninitialized</code>(未初始化状态)(使用<code>let</code>和<code>const</code>声明的情况下)</p>
<p>这就是变量提升的实际原因</p>
<h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><p>在这阶段，执行变量赋值、代码执行</p>
<p>如果 <code>Javascript</code> 引擎在源代码中声明的实际位置找不到变量的值，那么将为其分配 <code>undefined</code> 值</p>
<h3 id="回收阶段"><a href="#回收阶段" class="headerlink" title="回收阶段"></a>回收阶段</h3><p>执行上下文出栈等待虚拟机回收执行上下文</p>
<h2 id="二、执行栈"><a href="#二、执行栈" class="headerlink" title="二、执行栈"></a>二、执行栈</h2><p>执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文</p>
<p><img src="https://static.vue-js.com/9eda0310-74c1-11eb-ab90-d9ae814b240d.png"></p>
<p>当<code>Javascript</code>引擎开始执行你第一行脚本代码的时候，它就会创建一个全局执行上下文然后将它压到执行栈中</p>
<p>每当引擎碰到一个函数的时候，它就会创建一个函数执行上下文，然后将这个执行上下文压到执行栈中</p>
<p>引擎会执行位于执行栈栈顶的执行上下文(一般是函数执行上下文)，当该函数执行结束后，对应的执行上下文就会被弹出，然后控制流程到达执行栈的下一个执行上下文</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Inside first function&quot;</span>);</span><br><span class="line">  second();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Again inside first function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Inside second function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">first();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Inside Global Execution Context&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>转化成图的形式</p>
<p><img src="https://static.vue-js.com/ac11a600-74c1-11eb-ab90-d9ae814b240d.png"></p>
<p>简单分析一下流程：</p>
<ul>
<li>创建全局上下文请压入执行栈</li>
<li><code>first</code>函数被调用，创建函数执行上下文并压入栈</li>
<li>执行<code>first</code>函数过程遇到<code>second</code>函数，再创建一个函数执行上下文并压入栈</li>
<li><code>second</code>函数执行完毕，对应的函数执行上下文被推出执行栈，执行下一个执行上下文<code>first</code>函数</li>
<li><code>first</code>函数执行完毕，对应的函数执行上下文也被推出栈中，然后执行全局上下文</li>
<li>所有代码执行完毕，全局上下文也会被推出栈中，程序结束</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/107552264">https://zhuanlan.zhihu.com/p/107552264</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>context_stack</tag>
      </tags>
  </entry>
  <entry>
    <title>continue_to_upload</title>
    <url>/archives/9e5f33b7.html</url>
    <content><![CDATA[<h1 id="面试官：大文件上传如何做断点续传？"><a href="#面试官：大文件上传如何做断点续传？" class="headerlink" title="面试官：大文件上传如何做断点续传？"></a>面试官：大文件上传如何做断点续传？</h1><p> <img src="https://static.vue-js.com/3ccb0e90-8ba4-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>不管怎样简单的需求，在量级达到一定层次时，都会变得异常复杂</p>
<p>文件上传简单，文件变大就复杂</p>
<p>上传大文件时，以下几个变量会影响我们的用户体验</p>
<ul>
<li>服务器处理数据的能力</li>
<li>请求超时</li>
<li>网络波动</li>
</ul>
<p>上传时间会变长，高频次文件上传失败，失败后又需要重新上传等等</p>
<p>为了解决上述问题，我们需要对大文件上传单独处理</p>
<p>这里涉及到分片上传及断点续传两个概念</p>
<h4 id="分片上传"><a href="#分片上传" class="headerlink" title="分片上传"></a>分片上传</h4><p>分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（Part）来进行分片上传</p>
<p>如下图</p>
<p> <img src="https://static.vue-js.com/21db7520-8ba4-11eb-85f6-6fac77c0c9b3.png"></p>
<p>上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件</p>
<p>大致流程如下：</p>
<ol>
<li>将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；</li>
<li>初始化一个分片上传任务，返回本次分片上传唯一标识；</li>
<li>按照一定的策略（串行或并行）发送各个分片数据块；</li>
<li>发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件</li>
</ol>
<h4 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h4><p>断点续传指的是在下载或上传时，将下载或上传任务人为的划分为几个部分</p>
<p>每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度</p>
<p>一般实现方式有两种：</p>
<ul>
<li>服务器端返回，告知从哪开始</li>
<li>浏览器端自行处理</li>
</ul>
<p>上传过程中将文件在服务器写为临时文件，等全部写完了（文件上传完），将此临时文件重命名为正式文件即可</p>
<p>如果中途上传中断过，下次上传的时候根据当前临时文件大小，作为在客户端读取文件的偏移量，从此位置继续读取文件数据块，上传到服务器从此偏移量继续写入文件即可</p>
<h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><p>整体思路比较简单，拿到文件，保存文件唯一性标识，切割文件，分段上传，每次上传一段，根据唯一性标识判断文件上传进度，直到文件的全部片段上传完毕</p>
<p><img src="https://static.vue-js.com/465d2920-8ba4-11eb-85f6-6fac77c0c9b3.png"></p>
<p>下面的内容都是伪代码</p>
<p>读取文件内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">input.addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">this</span>.files[<span class="number">0</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以使用<code>md5</code>实现文件的唯一性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> md5code = md5(file);</span><br></pre></td></tr></table></figure>

<p>然后开始对文件进行分割</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">reader.readAsArrayBuffer(file);</span><br><span class="line">reader.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//每10M切割一段,这里只做一个切割演示，实际切割需要循环切割，</span></span><br><span class="line">    <span class="keyword">var</span> slice = e.target.result.slice(<span class="number">0</span>, <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>h5上传一个（一片）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formdata = <span class="keyword">new</span> FormData();</span><br><span class="line">formdata.append(<span class="string">&#x27;0&#x27;</span>, slice);</span><br><span class="line"><span class="comment">//这里是有一个坑的，部分设备无法获取文件名称，和文件类型，这个在最后给出解决方案</span></span><br><span class="line">formdata.append(<span class="string">&#x27;filename&#x27;</span>, file.filename);</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//xhr.responseText</span></span><br><span class="line">&#125;);</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">xhr.send(formdata);</span><br><span class="line">xhr.addEventListener(<span class="string">&#x27;progress&#x27;</span>, updateProgress);</span><br><span class="line">xhr.upload.addEventListener(<span class="string">&#x27;progress&#x27;</span>, updateProgress);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProgress</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">        <span class="comment">//进度条</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里给出常见的图片和视频的文件类型判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFileType</span>(<span class="params">type, file, back</span>) </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* type png jpg mp4 ...</span></span><br><span class="line"><span class="comment">* file input.change=&gt; this.files[0]</span></span><br><span class="line"><span class="comment">* back callback(boolean)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">3</span>) &#123;</span><br><span class="line">        back(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> type = args[<span class="number">0</span>]; <span class="comment">// type = &#x27;(png|jpg)&#x27; , &#x27;png&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> file = args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> back = <span class="keyword">typeof</span> args[<span class="number">2</span>] == <span class="string">&#x27;function&#x27;</span> ? args[<span class="number">2</span>] : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (file.type == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果系统无法获取文件类型，则读取二进制流，对二进制进行解析文件类型</span></span><br><span class="line">        <span class="keyword">var</span> imgType = [</span><br><span class="line">            <span class="string">&#x27;ff d8 ff&#x27;</span>, <span class="comment">//jpg</span></span><br><span class="line">            <span class="string">&#x27;89 50 4e&#x27;</span>, <span class="comment">//png</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;0 0 0 14 66 74 79 70 69 73 6F 6D&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 18 66 74 79 70 33 67 70 35&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 33 67 70 35&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 4D 53 4E 56&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 69 73 6F 6D&#x27;</span>, <span class="comment">//mp4</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;0 0 0 18 66 74 79 70 6D 70 34 32&#x27;</span>, <span class="comment">//m4v</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 6D 70 34 32&#x27;</span>, <span class="comment">//m4v</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;0 0 0 14 66 74 79 70 71 74 20 20&#x27;</span>, <span class="comment">//mov</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 66 74 79 70 71 74 20 20&#x27;</span>, <span class="comment">//mov</span></span><br><span class="line">            <span class="string">&#x27;0 0 0 0 6D 6F 6F 76&#x27;</span>, <span class="comment">//mov</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;4F 67 67 53 0 02&#x27;</span>, <span class="comment">//ogg</span></span><br><span class="line">            <span class="string">&#x27;1A 45 DF A3&#x27;</span>, <span class="comment">//ogg</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;52 49 46 46 x x x x 41 56 49 20&#x27;</span>, <span class="comment">//avi (RIFF fileSize fileType LIST)(52 49 46 46,DC 6C 57 09,41 56 49 20,4C 49 53 54)</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">var</span> typeName = [</span><br><span class="line">            <span class="string">&#x27;jpg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mp4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;m4v&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;m4v&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mov&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mov&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;mov&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ogg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ogg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;avi&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">var</span> sliceSize = <span class="regexp">/png|jpg|jpeg/</span>.test(type) ? <span class="number">3</span> : <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        reader.readAsArrayBuffer(file);</span><br><span class="line">        reader.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> slice = e.target.result.slice(<span class="number">0</span>, sliceSize);</span><br><span class="line">            reader = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (slice &amp;&amp; slice.byteLength == sliceSize) &#123;</span><br><span class="line">                <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(slice);</span><br><span class="line">                <span class="keyword">var</span> arr = [];</span><br><span class="line">                view.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">                    arr.push(v.toString(<span class="number">16</span>));</span><br><span class="line">                &#125;);</span><br><span class="line">                view = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">var</span> idx = arr.join(<span class="string">&#x27; &#x27;</span>).indexOf(imgType);</span><br><span class="line">                <span class="keyword">if</span> (idx &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                    back(typeName[idx]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">3</span> &amp;&amp; i &lt; <span class="number">8</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> v;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">var</span> idx = arr.join(<span class="string">&#x27; &#x27;</span>).indexOf(imgType);</span><br><span class="line">                    <span class="keyword">if</span> (idx &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                        back(typeName[idx]);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        back(<span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                back(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> type = file.name.match(<span class="regexp">/\.(\w+)$/</span>)[<span class="number">1</span>];</span><br><span class="line">        back(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用方法如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkFileType(<span class="string">&#x27;(mov|mp4|avi)&#x27;</span>,file,<span class="function"><span class="keyword">function</span>(<span class="params">fileType</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// fileType = mp4,</span></span><br><span class="line">    <span class="comment">// 如果file的类型不在枚举之列，则返回false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面上传文件的一步，可以改成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formdata.append(<span class="string">&#x27;filename&#x27;</span>, md5code+<span class="string">&#x27;.&#x27;</span>+fileType);</span><br></pre></td></tr></table></figure>

<p>有了切割上传后，也就有了文件唯一标识信息，断点续传变成了后台的一个小小的逻辑判断</p>
<p>后端主要做的内容为：根据前端传给后台的<code>md5</code>值，到服务器磁盘查找是否有之前未完成的文件合并信息（也就是未完成的半成品文件切片），取到之后根据上传切片的数量，返回数据告诉前端开始从第几节上传</p>
<p>如果想要暂停切片的上传，可以使用<code>XMLHttpRequest </code>的 <code>abort </code>方法</p>
<h2 id="三、使用场景"><a href="#三、使用场景" class="headerlink" title="三、使用场景"></a>三、使用场景</h2><ul>
<li>大文件加速上传：当文件大小超过预期大小时，使用分片上传可实现并行上传多个 Part， 以加快上传速度</li>
<li>网络环境较差：建议使用分片上传。当出现上传失败的时候，仅需重传失败的Part</li>
<li>流式上传：可以在需要上传的文件大小还不确定的情况下开始上传。这种场景在视频监控等行业应用中比较常见</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>当前的伪代码，只是提供一个简单的思路，想要把事情做到极致，我们还需要考虑到更多场景，比如</p>
<ul>
<li>切片上传失败怎么办</li>
<li>上传过程中刷新页面怎么办</li>
<li>如何进行并行上传</li>
<li>切片什么时候按数量切，什么时候按大小切</li>
<li>如何结合 Web Worker 处理大文件上传</li>
<li>如何实现秒传</li>
</ul>
<p>人生又何尝不是如此，极致的人生体验有无限可能，越是后面才发现越是精彩 <del>_</del></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000009448892">https://segmentfault.com/a/1190000009448892</a></li>
<li><a href="https://baike.baidu.com/">https://baike.baidu.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>continue_to_upload</tag>
      </tags>
  </entry>
  <entry>
    <title>copy</title>
    <url>/archives/4dbabb82.html</url>
    <content><![CDATA[<h1 id="面试官：深拷贝浅拷贝的区别？如何实现一个深拷贝？"><a href="#面试官：深拷贝浅拷贝的区别？如何实现一个深拷贝？" class="headerlink" title="面试官：深拷贝浅拷贝的区别？如何实现一个深拷贝？"></a>面试官：深拷贝浅拷贝的区别？如何实现一个深拷贝？</h1><p><img src="https://static.vue-js.com/cdf952e0-69b8-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、数据类型存储"><a href="#一、数据类型存储" class="headerlink" title="一、数据类型存储"></a>一、数据类型存储</h2><p>前面文章我们讲到，<code>JavaScript</code>中存在两大数据类型：</p>
<ul>
<li>基本类型</li>
<li>引用类型</li>
</ul>
<p>基本类型数据保存在在栈内存中</p>
<p>引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中</p>
<h2 id="二、浅拷贝"><a href="#二、浅拷贝" class="headerlink" title="二、浅拷贝"></a>二、浅拷贝</h2><p>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p>
<p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</p>
<p>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p>
<p>下面简单实现一个浅拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">      newObj[prop] = obj[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>JavaScript</code>中，存在浅拷贝的现象有：</p>
<ul>
<li><code>Object.assign</code></li>
<li><code>Array.prototype.slice()</code>, <code>Array.prototype.concat()</code></li>
<li>使用拓展运算符实现的复制</li>
</ul>
<h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">nature</span>: [<span class="string">&quot;smart&quot;</span>, <span class="string">&quot;good&quot;</span>],</span><br><span class="line">  <span class="attr">names</span>: &#123;</span><br><span class="line">    <span class="attr">name1</span>: <span class="string">&quot;fx&quot;</span>,</span><br><span class="line">    <span class="attr">name2</span>: <span class="string">&quot;xka&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">love</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fx is a great girl&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newObj = <span class="built_in">Object</span>.assign(&#123;&#125;, fxObj);</span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> fxArrs = fxArr.slice(<span class="number">0</span>);</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fxArr); <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(fxArrs); <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> fxArrs = fxArr.concat();</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fxArr); <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(fxArrs); <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fxArr = [<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> fxArrs = [...fxArr];</span><br><span class="line">fxArrs[<span class="number">1</span>] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(fxArr); <span class="comment">// [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(fxArrs); <span class="comment">// [&quot;One&quot;, &quot;love&quot;, &quot;Three&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="三、深拷贝"><a href="#三、深拷贝" class="headerlink" title="三、深拷贝"></a>三、深拷贝</h2><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p>
<p>常见的深拷贝方式有：</p>
<ul>
<li><p>_.cloneDeep()</p>
</li>
<li><p>jQuery.extend()</p>
</li>
<li><p>JSON.stringify()</p>
</li>
<li><p>手写循环递归</p>
</li>
</ul>
<h3 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="_.cloneDeep()"></a>_.cloneDeep()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = _.cloneDeep(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.b.f === obj2.b.f); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="jQuery-extend"><a href="#jQuery-extend" class="headerlink" title="jQuery.extend()"></a>jQuery.extend()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">&quot;jquery&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = $.extend(<span class="literal">true</span>, &#123;&#125;, obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.b.f === obj2.b.f); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1));</span><br></pre></td></tr></table></figure>

<p>但是这种方式存在弊端，会忽略<code>undefined</code>、<code>symbol</code>和<code>函数</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">  <span class="attr">name1</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">name3</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="attr">name4</span>: <span class="built_in">Symbol</span>(<span class="string">&quot;A&quot;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123;name: &quot;A&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="循环递归"><a href="#循环递归" class="headerlink" title="循环递归"></a>循环递归</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj; <span class="comment">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line">  <span class="comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="comment">// 是对象的话就要进行深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (hash.get(obj)) <span class="keyword">return</span> hash.get(obj);</span><br><span class="line">  <span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.constructor();</span><br><span class="line">  <span class="comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span></span><br><span class="line">  hash.set(obj, cloneObj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="comment">// 实现一个递归拷贝</span></span><br><span class="line">      cloneObj[key] = deepClone(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、区别"><a href="#四、区别" class="headerlink" title="四、区别"></a>四、区别</h2><p>下面首先借助两张图，可以更加清晰看到浅拷贝与深拷贝的区别</p>
<p><img src="https://static.vue-js.com/d9862c00-69b8-11eb-ab90-d9ae814b240d.png"></p>
<p>从上图发现，浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样</p>
<p>浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;init&quot;</span>,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj3 = shallowClone(obj1); <span class="comment">// 一个浅拷贝方法</span></span><br><span class="line">obj3.name = <span class="string">&quot;update&quot;</span>;</span><br><span class="line">obj3.arr[<span class="number">1</span>] = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]; <span class="comment">// 新旧对象还是共享同一块内存</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj1&quot;</span>, obj1); <span class="comment">// obj1 &#123; name: &#x27;init&#x27;,  arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj3&quot;</span>, obj3); <span class="comment">// obj3 &#123; name: &#x27;update&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br></pre></td></tr></table></figure>

<p>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;init&quot;</span>,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj4 = deepClone(obj1); <span class="comment">// 一个深拷贝方法</span></span><br><span class="line">obj4.name = <span class="string">&quot;update&quot;</span>;</span><br><span class="line">obj4.arr[<span class="number">1</span>] = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]; <span class="comment">// 新对象跟原对象不共享内存</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj1&quot;</span>, obj1); <span class="comment">// obj1 &#123; name: &#x27;init&#x27;, arr: [ 1, [ 2, 3 ], 4 ] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj4&quot;</span>, obj4); <span class="comment">// obj4 &#123; name: &#x27;update&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>前提为拷贝类型为引用类型的情况下：</p>
<ul>
<li><p>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</p>
</li>
<li><p>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</p>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>copy</tag>
      </tags>
  </entry>
  <entry>
    <title>css</title>
    <url>/archives/78cea6d8.html</url>
    <content><![CDATA[<hr>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[tag type=<span class="string">&quot;info&quot;</span>]</span>渐变<span class="selector-attr">[/tag]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[collapse title=<span class="string">&quot;纯css实现&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 此处可以加入自己的图片 */</span></span><br><span class="line">    <span class="comment">/* background: #000 url(&#x27;../images/5.png&#x27;) no-repeat center; */</span></span><br><span class="line">    <span class="comment">/* background-size: cover;     to之后 可以改变颜色渐变方向 bottom,left,top */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, skyblue, <span class="number">#496eaa</span>, <span class="built_in">rgb</span>(<span class="number">226</span>, <span class="number">111</span>, <span class="number">111</span>), <span class="number">#944fa8</span>, <span class="number">#a8804f</span>, <span class="number">#496eaa</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">1400%</span> <span class="number">300%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">animation</span>: mymove <span class="number">20s</span> ease infinite;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> mymove &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">0%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">0%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[/collapse]</span></span><br></pre></td></tr></table></figure>

<hr>
<p>[tag type=”warn”]flex[/tag]<br>[collapse title=”flex布局”]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            <span class="attr">margin</span>: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul &#123;</span><br><span class="line">            <span class="attr">display</span>: flex;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 340px;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 10px auto;</span><br><span class="line">            border:1px slateblue solid;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 主轴排序方式 */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 水平方向X 1234 */</span></span><br><span class="line">            <span class="comment">/* flex-direction: row;  默认*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 水平方向反转 4321 */</span></span><br><span class="line">            <span class="comment">/* flex-direction: row-reverse; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 垂直方向1234 */</span></span><br><span class="line">            <span class="comment">/* flex-direction: column; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 垂直方向4321 */</span></span><br><span class="line">            <span class="comment">/* flex-direction: column-reverse; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 设置子元素空间分布 */</span></span><br><span class="line">            <span class="comment">/* 两边不贴边，中间平分，左右空白距离相等 */</span></span><br><span class="line">            <span class="comment">/* justify-content: space-around;  */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 两边贴边，中间平分 */</span></span><br><span class="line">            <span class="comment">/* justify-content: space-between;  */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 平分每一块空间 */</span></span><br><span class="line">            <span class="comment">/* justify-content: space-evenly; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 沿主轴结束排列  1234 */</span></span><br><span class="line">            <span class="comment">/* justify-content: flex-end; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 沿主轴开始排列  1234  默认*/</span></span><br><span class="line">            <span class="comment">/* justify-content: flex-start; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 沿主轴中间分布 */</span></span><br><span class="line">            <span class="comment">/* justify-content: center; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 让其子元素沿其y轴底部排列 */</span></span><br><span class="line">            <span class="comment">/* align-items: flex-end; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* flex-flow 沿着垂直轴,换行*/</span></span><br><span class="line">            <span class="comment">/* flex-flow: column wrap; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 切换主轴为垂直轴y */</span></span><br><span class="line">            <span class="comment">/* flex-direction: column; */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 设置子盒子是否换行 */</span></span><br><span class="line">            <span class="comment">/* flex-wrap: wrap;   换行 */</span></span><br><span class="line">            <span class="comment">/* flex-wrap: nowrap;  不换行 */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 设置换行后的排列方式 */</span></span><br><span class="line">            align-content: center;</span><br><span class="line">            align-content: flex-end;</span><br><span class="line">            align-content: flex-start;</span><br><span class="line">            align-content: stretch; <span class="comment">/* 拉伸 */</span></span><br><span class="line">            align-content: space-around;</span><br><span class="line">            align-content: space-between;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            <span class="comment">/* flex: 0.5; */</span></span><br><span class="line">            <span class="comment">/* margin-right: 10px; */</span></span><br><span class="line">            <span class="attr">background</span>: aqua;</span><br><span class="line">            list-style: none;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 90px;</span><br><span class="line">            color: rgb(<span class="number">60</span>, <span class="number">8</span>, <span class="number">128</span>);</span><br><span class="line">            border: 1px salmon solid;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">li</span>:nth-<span class="function"><span class="title">child</span>(<span class="params"><span class="number">1</span></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/* 控制子盒子沿主轴开始排列 */</span></span><br><span class="line">            <span class="comment">/* align-self: flex-start; */</span></span><br><span class="line">            <span class="attr">order</span>: <span class="number">9</span>; <span class="comment">/* 数值越大，越靠后排列 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">li</span>:nth-<span class="function"><span class="title">child</span>(<span class="params"><span class="number">2</span></span>)</span>&#123;</span><br><span class="line">             <span class="comment">/* 控制子盒子沿主轴中间排列 */</span></span><br><span class="line">            <span class="comment">/* align-self: center; */</span></span><br><span class="line">            <span class="attr">order</span>: -<span class="number">2</span>; <span class="comment">/* 数值越小，越靠前排列 */</span></span><br><span class="line">            flex: <span class="number">1</span> <span class="number">2</span> 300px;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">li</span>:nth-<span class="function"><span class="title">child</span>(<span class="params"><span class="number">3</span></span>)</span>&#123;</span><br><span class="line">             <span class="comment">/* 控制子盒子沿主轴结束排列 */</span></span><br><span class="line">            <span class="comment">/* align-self: flex-end; */</span></span><br><span class="line">            <span class="comment">/* 定义flex-shrink，项目的缩小比例默认为1，如果空间不足，则将该项目缩小 */</span></span><br><span class="line">            <span class="comment">/* flex-shrink: 2; 此时缩小 */</span></span><br><span class="line">            flex-shrink: <span class="number">2</span>; </span><br><span class="line">            <span class="comment">/* 此时、扩大 */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 扩充的原理公式flex-grow，如果空间剩余，则会生效该属性，、</span></span><br><span class="line"><span class="comment">            1.计算剩余空间，伸缩容器宽度 - 所有伸缩项的宽度和</span></span><br><span class="line"><span class="comment">            2，计算每份剩余空间的宽度，  剩余空间 / 需要的份数</span></span><br><span class="line"><span class="comment">            3.计算每个伸缩项最终宽度 ， 伸缩项的宽度 + 需要的份数 *每份的宽度</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            flex-grow: <span class="number">1</span>;             <span class="comment">/* 默认 */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* flex:flex-grow: ,flex-shrink,flex-basis; */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            max-width: 460px;</span><br><span class="line">            min-width: 360px;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>[/collapse]</p>
<p>[hint]下方flex详解–作者：阮一峰[/hint]<br><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
<hr>
<p>[tag type=”success”]px&amp;rem&amp;em[/tag]</p>
<ul>
<li>px  px像素（Pixel）。<strong>相对长度单位。</strong>像素px是相对于显示器屏幕分辨率而言的</li>
<li><ol>
<li>IE无法调整那些使用px作为单位的字体大小；</li>
</ol>
</li>
<li><ol start="2">
<li>国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；</li>
</ol>
</li>
<li><ol start="3">
<li>Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。</li>
</ol>
</li>
<li> em<strong>，em是相对长度单位。相对于当前对象内文本的字体尺寸</strong>。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li>
<li><ol>
<li>em的值并不是固定的；</li>
</ol>
</li>
<li><ol start="2">
<li>em会继承父级元素的字体大小。</li>
</ol>
</li>
<li><strong>rem是CSS3新增的一个相对单位（root em，根em）</strong></li>
<li> rem 相对于 html元素 字体大小来说的</li>
<li> rem的优点就是可以通过修改html里面的文字大小来改变页面中元素的大小可以整体控制 </li>
</ul>
<hr>
<p>[tag type=”danger”]媒体查询[/tag]</p>
<ul>
<li>  <strong>媒体查询Media Queries，可以根据不同的设备为其实现不同的样式。</strong></li>
<li> @media可以根据不同的屏幕尺寸设置不同的样式，页面布局分别适应移动端、pc端等，</li>
<li>在调整浏览器的大小，页面会根据媒体的宽度和高度来重新布置样式。</li>
<li>媒体查询可以用于检测很多东西：自动检测viewpoint（视窗）的宽度和高度；</li>
<li>设备的宽度和高度；旋转方向（智能手机横屏或竖屏）；分辨率大小。</li>
<li><strong>在media queries中，使用max / min来表示大于等于小于以此作为逻辑判断。而不是使用大于号&gt;或小于号(&lt;)符号进行判断</strong></li>
<li>（一）最小宽度min-width :当媒体类型<strong>大于或是等于</strong>指定的宽度时，大括号内的样式生效；</li>
<li>（二）最大宽度max-width：当媒体类型<strong>小于或是等于</strong>指定的宽度时，大括号内的样式生效；</li>
<li>orientation: portrait (竖屏模式) | landscape (横屏模式)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="comment">/* 这句话的意思就是： 在我们屏幕上 并且 最大的宽度是 800像素 设置我们想要的样式 */</span></span><br><span class="line">        <span class="comment">/* max-width 小于等于800 */</span></span><br><span class="line">        <span class="comment">/* 媒体查询可以根据不同的屏幕尺寸在改变不同的样式 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">body</span> &#123;</span><br><span class="line">                <span class="attribute">background-color</span>: pink;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">body</span> &#123;</span><br><span class="line">                <span class="attribute">background-color</span>: purple;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>[tag type=”info”]书写顺序建议[/tag]</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. 媒体查询一般按照从大到小或者 从小到大的顺序来 */</span></span><br><span class="line">      <span class="comment">/* 2. 小于540px 页面的背景颜色变为蓝色 */</span></span><br><span class="line">      <span class="selector-tag">body</span> &#123;</span><br><span class="line">          <span class="attribute">background-color</span>: gold;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">539px</span>) &#123;</span><br><span class="line">          <span class="selector-tag">body</span> &#123;</span><br><span class="line">              <span class="attribute">background-color</span>: blue;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/* 3. 540 ~ 669 我们的页面颜色改为 绿色 */</span></span><br><span class="line">      <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">540px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">669px</span>) &#123;</span><br><span class="line">          <span class="selector-tag">body</span> &#123;</span><br><span class="line">              <span class="attribute">background-color</span>: green;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">700px</span>) &#123;</span><br><span class="line">          <span class="selector-tag">body</span> &#123;</span><br><span class="line">              <span class="attribute">background-color</span>:red;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* 4. 大于等于970 我们页面的颜色改为 红色 */</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">970px</span>) &#123;</span><br><span class="line">          <span class="selector-tag">body</span> &#123;</span><br><span class="line">              <span class="attribute">background-color</span>: yellow;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* 5. screen 还有 and 必须带上不能省略的 */</span></span><br><span class="line">      <span class="comment">/* 6. 我们的数字后面必须跟单位  970px   这个 px 不能省略的 */</span></span><br><span class="line">     </span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>[tag type=”danger” outline]引入资源[/tag]</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">       <span class="comment">/* 当我们屏幕大于等于 640px以上的，我们让div 一行显示2个 */</span></span><br><span class="line">       <span class="comment">/* 当我们屏幕小于640 我们让div一行显示一个 */</span></span><br><span class="line">       <span class="comment">/* 一个建议： 我们媒体查询最好的方法是从小到大 */</span></span><br><span class="line">       <span class="comment">/* 引入资源就是 针对于不同的屏幕尺寸 调用不同的css文件 */</span></span><br><span class="line">     <span class="selector-tag">body</span> &#123;</span><br><span class="line">         <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-tag">div</span> &#123;</span><br><span class="line">         <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">         <span class="attribute">background</span>: aqua;</span><br><span class="line">         <span class="attribute">text-align</span>: center;</span><br><span class="line">         <span class="attribute">margin-top</span>: <span class="number">12pc</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">   &lt;link rel=&quot;stylesheet&quot; href=&quot;style320<span class="selector-class">.css</span>&quot; media=&quot;(<span class="attribute">min-width</span>: <span class="number">320px</span>) and (max-width:<span class="number">636px</span>)<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">   &lt;link rel=&quot;</span>stylesheet<span class="string">&quot; href=&quot;</span>style640.css<span class="string">&quot; media=&quot;</span>(min-width: <span class="number">640px</span>) and (max-width :<span class="number">900px</span>)<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>[tag type=”warn” outline]识别不同屏幕状态[/tag]</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*orientation: portrait（竖屏，即设备中的页面可见区域高度&gt;=宽度）</span></span><br><span class="line"><span class="comment">　 　orientation: landscape（横屏，即设备中的页面可见区域高度&lt;=宽度） */</span></span><br><span class="line">   <span class="keyword">@media</span> (<span class="attribute">orientation</span>:landscape) &#123;</span><br><span class="line">         <span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">             <span class="attribute">content</span>: <span class="string">&#x27;横屏状态&#x27;</span>;</span><br><span class="line">             <span class="attribute">color</span>: royalblue;</span><br><span class="line">            </span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">@media</span> (<span class="attribute">orientation</span>:portrait) &#123;</span><br><span class="line">         <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">             <span class="attribute">content</span>: <span class="string">&#x27;竖屏状态&#x27;</span>;</span><br><span class="line">             <span class="attribute">color</span>: gold;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<p>[tag outline]区分不同的屏幕分辨率[/tag]</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">         <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">         <span class="attribute">color</span>: gold;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 区分不同的屏幕分辨率 参数单位 dppx */</span></span><br><span class="line">     <span class="keyword">@media</span> (<span class="attribute">resolution</span> :<span class="number">3dppx</span>)&#123;</span><br><span class="line">         <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">             <span class="attribute">content</span>: <span class="string">&#x27;3倍屏&#x27;</span>;</span><br><span class="line">             <span class="attribute">color</span>: gold;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">@media</span> (<span class="attribute">resolution</span>:<span class="number">2dppx</span>) &#123;</span><br><span class="line">         <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">             <span class="attribute">content</span>: <span class="string">&#x27;2倍屏&#x27;</span>;</span><br><span class="line">             <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">88</span>, <span class="number">79</span>, <span class="number">26</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”danger”]识别不同设备[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 常见移动端 navigator.userAgent --&gt;</span><br><span class="line">   &lt;!-- <span class="string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1&quot;</span> --&gt;</span><br><span class="line">   &lt;!-- <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0.1; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Mobile Safari/537.36&quot;</span> --&gt;</span><br><span class="line">   &lt;!-- pc端 --&gt;</span><br><span class="line">   &lt;!-- <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;</span><span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36&quot;</span> --&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="function"><span class="keyword">function</span> <span class="title">isApp</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="comment">// 是否是苹果</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="keyword">if</span> (<span class="regexp">/iPhone/i</span>.test(navigator.userAgent)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="keyword">return</span> <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="comment">// 是否是安卓</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="keyword">if</span> (<span class="regexp">/android/i</span>.test(navigator.userAgent)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="keyword">return</span> <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="comment">// 是否是window phone</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="keyword">if</span> (<span class="regexp">/window phone/i</span>.test(navigator.userAgent)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="keyword">return</span> <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="comment">// pc</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="keyword">if</span> (isApp()) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           location.href = <span class="string">&#x27;https://m.jd.com&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           location.href = <span class="string">&quot;https://www.jd.com&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>[tag type=”primary” outline]内联操作符[/tag]</p>
<ul>
<li>内联操作符转自<strong>CSDN博主「小白张幺幺」的原创文章</strong></li>
<li> 原文地址:<a href="https://blog.csdn.net/zzh1251994430/article/details/109477505">https://blog.csdn.net/zzh1251994430/article/details/109477505</a></li>
<li>媒体查询由多媒体组成，可以包含一个或多个表达式，根据表达式条件判断是否成立，返回 true 或 false。</li>
<li>如果指定的多媒体类型匹配设备类型则返回查询结果为true，文档会在匹配的设备上显示指定样式效果。</li>
<li>可以使用操作符’not’或 ‘only’ 或’and’或，限定。</li>
<li><strong>and：表示并且</strong>，要求必须满足所有的表达式要求时，才能使用media定义样式。</li>
<li><strong>not：不，表示除…外，</strong>即排除掉某些特定的设备的，如 @media not print（非打印设备）。</li>
<li><strong>注意：’not’针对的是一整条媒体查询语句，而非其中的某一个条件。</strong><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span> print <span class="keyword">and</span>(<span class="attribute">max-width</span>:<span class="number">1024px</span>)&#123;...&#125;</span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span>(print <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1024px</span>))&#123;..&#125;</span><br></pre></td></tr></table></figure></li>
<li>only： 表示只有 仅仅，表示某一种的媒体类型设备。</li>
<li>注意：对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</li>
<li>多个条件设定使用逗号分隔，表手或者or，满足其中之一。</li>
</ul>
<hr>
<p>[tag type=”primary” outline]兼容移动端[/tag]</p>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
 - width = device-width：宽度等于当前设备的宽度
 - initial-scale：初始的缩放比例（默认设置为1.0）  
 - minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    
 - maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   
 - user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） 


<hr>
<p>[tag type=”danger”]常见报错处理[/tag]</p>
<ol>
<li>首先css本身存在问题</li>
<li>div{display:flex;}/<em>那么div所有的display效果都将无法生效</em>/ </li>
<li>and 之后要有空格 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span>(<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">         <span class="selector-tag">body</span> &#123;</span><br><span class="line">             <span class="attribute">background-color</span>: pink;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     //此时页面就算大于<span class="number">500px</span>，页面也是没有pink色，</span><br><span class="line">     <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">         <span class="selector-tag">body</span> &#123;</span><br><span class="line">             <span class="attribute">background-color</span>: purple;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li>
<li>样式冲突；@media查询代码的样式被后面的css所覆盖</li>
<li>注意：建议在书写css的过程中，@media查询带的css写在后面，以免这样避免被前面的css覆盖<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">body</span> &#123;</span><br><span class="line">                <span class="attribute">background-color</span>: pink;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">body</span> &#123;</span><br><span class="line">                <span class="attribute">background-color</span>: purple;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">//此时页面就算如何缩放，页面始终呈现<span class="selector-id">#000</span>色</span><br></pre></td></tr></table></figure></li>
<li>暂时就这些，以后补充…</li>
</ol>
<hr>
<p>[tag type=”warn” outline]文字超出显示省略号[/tag]</p>
<ol>
<li>单行文本</li>
<li>注意加宽度</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure>
<ul>
<li>多行文本</li>
<li>适用范围：</li>
<li>因使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；</li>
<li>-webkit-line-clamp用来限制在一个块元素显示的文本的行数。</li>
<li> 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：</li>
<li>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</li>
<li>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box; </span><br><span class="line">-webkit-box-orient: vertical; //盒子内容垂直布局</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; // 超出<span class="number">2</span>行显示<span class="number">3</span>个点</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">word-break</span>:break-all; //解决长英文单词不换行问题</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css3_features</title>
    <url>/archives/7c942302.html</url>
    <content><![CDATA[<h1 id="面试官：CSS3新增了哪些新特性？"><a href="#面试官：CSS3新增了哪些新特性？" class="headerlink" title="面试官：CSS3新增了哪些新特性？"></a>面试官：CSS3新增了哪些新特性？</h1><p> <img src="https://static.vue-js.com/d58f6df0-9b5e-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>css</code>，即层叠样式表（Cascading Style Sheets）的简称，是一种标记语言，由浏览器解释执行用来使页面变得更美观</p>
<p><code>css3</code>是<code>css</code>的最新标准，是向后兼容的，<code>CSS1/2 </code>的特性在<code> CSS3</code> 里都是可以使用的</p>
<p>而<code> CSS3</code> 也增加了很多新特性，为开发带来了更佳的开发体验</p>
<h2 id="二、选择器"><a href="#二、选择器" class="headerlink" title="二、选择器"></a>二、选择器</h2><p><code>css3</code>中新增了一些选择器，主要为如下图所示：</p>
<p> <img src="https://static.vue-js.com/e368cf20-9b5e-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="三、新样式"><a href="#三、新样式" class="headerlink" title="三、新样式"></a>三、新样式</h2><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p><code>css3</code>新增了三个边框属性，分别是：</p>
<ul>
<li><p>border-radius：创建圆角边框</p>
</li>
<li><p>box-shadow：为元素添加阴影</p>
</li>
<li><p>border-image：使用图片来绘制边框</p>
</li>
</ul>
<h4 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h4><p>设置元素阴影，设置属性如下：</p>
<ul>
<li>水平阴影</li>
<li>垂直阴影</li>
<li>模糊距离(虚实)</li>
<li>阴影尺寸(影子大小)</li>
<li>阴影颜色</li>
<li>内/外阴影</li>
</ul>
<p>其中水平阴影和垂直阴影是必须设置的</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>新增了几个关于背景的属性，分别是<code>background-clip</code>、<code>background-origin</code>、<code>background-size</code>和<code>background-break</code></p>
<h4 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h4><p>用于确定背景画区，有以下几种可能的属性：</p>
<ul>
<li>background-clip: border-box; 背景从border开始显示</li>
<li>background-clip: padding-box; 背景从padding开始显示</li>
<li>background-clip: content-box; 背景显content区域开始显示</li>
<li>background-clip: no-clip; 默认属性，等同于border-box</li>
</ul>
<p>通常情况，背景都是覆盖整个元素的，利用这个属性可以设定背景颜色或图片的覆盖范围</p>
<h4 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h4><p>当我们设置背景图片时，图片是会以左上角对齐，但是是以<code>border</code>的左上角对齐还是以<code>padding</code>的左上角或者<code>content</code>的左上角对齐? <code>border-origin</code>正是用来设置这个的</p>
<ul>
<li>background-origin: border-box; 从border开始计算background-position</li>
<li>background-origin: padding-box; 从padding开始计算background-position</li>
<li>background-origin: content-box; 从content开始计算background-position</li>
</ul>
<p>默认情况是<code>padding-box</code>，即以<code>padding</code>的左上角为原点</p>
<h4 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h4><p>background-size属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性：</p>
<ul>
<li>background-size: contain; 缩小图片以适合元素（维持像素长宽比）</li>
<li>background-size: cover; 扩展元素以填补元素（维持像素长宽比）</li>
<li>background-size: 100px 100px; 缩小图片至指定的大小</li>
<li>background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包 含元素的尺寸</li>
</ul>
<h3 id="background-break"><a href="#background-break" class="headerlink" title="background-break"></a>background-break</h3><p>元素可以被分成几个独立的盒子（如使内联元素span跨越多行），<code>background-break</code> 属性用来控制背景怎样在这些不同的盒子中显示</p>
<ul>
<li>background-break: continuous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样）</li>
<li>background-break: bounding-box; 把盒之间的距离计算在内；</li>
<li>background-break: each-box; 为每个盒子单独重绘背景</li>
</ul>
<h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h3><p>语法：<code>word-wrap: normal|break-word</code></p>
<ul>
<li>normal：使用浏览器默认的换行</li>
<li>break-all：允许在单词内换行</li>
</ul>
<h3 id="text-overflow"><a href="#text-overflow" class="headerlink" title="text-overflow"></a>text-overflow</h3><p><code> text-overflow</code>设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择：</p>
<ul>
<li>clip：修剪文本</li>
<li>ellipsis：显示省略符号来代表被修剪的文本</li>
</ul>
<h3 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h3><p><code>text-shadow</code>可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色</p>
<h3 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h3><p>CSS3里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置：</p>
<ul>
<li><p>text-fill-color: 设置文字内部填充颜色</p>
</li>
<li><p>text-stroke-color: 设置文字边界填充颜色</p>
</li>
<li><p>text-stroke-width: 设置文字边界宽度</p>
</li>
</ul>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p><code>css3</code>新增了新的颜色表示方式<code>rgba</code>与<code>hsla</code></p>
<ul>
<li>rgba分为两部分，rgb为颜色值，a为透明度</li>
<li>hala分为四部分，h为色相，s为饱和度，l为亮度，a为透明度</li>
</ul>
<h2 id="四、transition-过渡"><a href="#四、transition-过渡" class="headerlink" title="四、transition 过渡"></a>四、transition 过渡</h2><p><code>transition</code>属性可以被指定为一个或多个<code>CSS</code>属性的过渡效果，多个属性之间用逗号进行分隔，必须规定两项内容：</p>
<ul>
<li>过度效果</li>
<li>持续时间</li>
</ul>
<p>语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>上面为简写模式，也可以分开写各个属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>: width; </span><br><span class="line"><span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line"><span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br></pre></td></tr></table></figure>



<h3 id="五、transform-转换"><a href="#五、transform-转换" class="headerlink" title="五、transform 转换"></a>五、transform 转换</h3><p><code>transform</code>属性允许你旋转，缩放，倾斜或平移给定元素</p>
<p><code>transform-origin</code>：转换元素的位置（围绕那个点进行转换），默认值为<code>(x,y,z):(50%,50%,0)</code></p>
<p>使用方式：</p>
<ul>
<li>transform: translate(120px, 50%)：位移</li>
<li>transform: scale(2, 0.5)：缩放</li>
<li>transform: rotate(0.5turn)：旋转</li>
<li>transform: skew(30deg, 20deg)：倾斜</li>
</ul>
<h3 id="六、animation-动画"><a href="#六、animation-动画" class="headerlink" title="六、animation 动画"></a>六、animation 动画</h3><p>动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬</p>
<p>animation也有很多的属性</p>
<ul>
<li>animation-name：动画名称</li>
<li>animation-duration：动画持续时间</li>
<li>animation-timing-function：动画时间函数</li>
<li>animation-delay：动画延迟时间</li>
<li>animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为infinite，意思是无限循环</li>
<li>animation-direction：动画执行方向</li>
<li>animation-paly-state：动画播放状态</li>
<li>animation-fill-mode：动画填充模式</li>
</ul>
<h2 id="七、渐变"><a href="#七、渐变" class="headerlink" title="七、渐变"></a>七、渐变</h2><p>颜色渐变是指在两个颜色之间平稳的过渡，<code>css3</code>渐变包括</p>
<ul>
<li>linear-gradient：线性渐变</li>
</ul>
<blockquote>
<p>background-image: linear-gradient(direction, color-stop1, color-stop2, …);</p>
</blockquote>
<ul>
<li>radial-gradient：径向渐变</li>
</ul>
<blockquote>
<p>linear-gradient(0deg, red, green); </p>
</blockquote>
<h2 id="八、其他"><a href="#八、其他" class="headerlink" title="八、其他"></a>八、其他</h2><p>关于<code>css3</code>其他的新特性还包括<code>flex</code>弹性布局、<code>Grid</code>栅格布局，这两个布局在以前就已经讲过，这里就不再展示</p>
<p>除此之外，还包括多列布局、媒体查询、混合模式等等……</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><p><a href="https://juejin.cn/post/6844903518520901639#heading-1">https://juejin.cn/post/6844903518520901639#heading-1</a></p>
</li>
<li><p><a href="https://www.w3school.com.cn/css/index.asp">https://www.w3school.com.cn/css/index.asp</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>css3_features</tag>
      </tags>
  </entry>
  <entry>
    <title>css_performance</title>
    <url>/archives/b21f48b9.html</url>
    <content><![CDATA[<h1 id="面试官：如果要做优化，CSS提高性能的方法有哪些？"><a href="#面试官：如果要做优化，CSS提高性能的方法有哪些？" class="headerlink" title="面试官：如果要做优化，CSS提高性能的方法有哪些？"></a>面试官：如果要做优化，CSS提高性能的方法有哪些？</h1><p> <img src="https://static.vue-js.com/c071c820-9fa3-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>每一个网页都离不开<code>css</code>，但是很多人又认为，<code>css</code>主要是用来完成页面布局的，像一些细节或者优化，就不需要怎么考虑，实际上这种想法是不正确的</p>
<p>作为页面渲染和内容展现的重要环节，<code>css</code>影响着用户对整个网站的第一体验</p>
<p>因此，在整个产品研发过程中，<code>css</code>性能优化同样需要贯穿全程</p>
<h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>实现方式有很多种，主要有如下：</p>
<ul>
<li>内联首屏关键CSS</li>
<li>异步加载CSS</li>
<li>资源压缩</li>
<li>合理使用选择器</li>
<li>减少使用昂贵的属性</li>
<li>不要使用@import</li>
</ul>
<h3 id="内联首屏关键CSS"><a href="#内联首屏关键CSS" class="headerlink" title="内联首屏关键CSS"></a>内联首屏关键CSS</h3><p>在打开一个页面，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联<code>css</code>关键代码能够使浏览器在下载完<code>html</code>后就能立刻渲染</p>
<p>而如果外部引用<code>css</code>代码，在解析<code>html</code>结构过程中遇到外部<code>css</code>文件，才会开始下载<code>css</code>代码，再渲染</p>
<p>所以，<code>CSS</code>内联使用使渲染时间提前</p>
<p>注意：但是较大的<code>css</code>代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式</p>
<h3 id="异步加载CSS"><a href="#异步加载CSS" class="headerlink" title="异步加载CSS"></a>异步加载CSS</h3><p>在<code>CSS</code>文件请求、下载、解析完成之前，<code>CSS</code>会阻塞渲染，浏览器将不会渲染任何已处理的内容</p>
<p>前面加载内联代码后，后面的外部引用<code>css</code>则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下：</p>
<ul>
<li>使用javascript将link标签插到head标签最后</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建link标签</span></span><br><span class="line"><span class="keyword">const</span> myCSS = <span class="built_in">document</span>.createElement( <span class="string">&quot;link&quot;</span> );</span><br><span class="line">myCSS.rel = <span class="string">&quot;stylesheet&quot;</span>;</span><br><span class="line">myCSS.href = <span class="string">&quot;mystyles.css&quot;</span>;</span><br><span class="line"><span class="comment">// 插入到header的最后位置</span></span><br><span class="line"><span class="built_in">document</span>.head.insertBefore( myCSS, <span class="built_in">document</span>.head.childNodes[ <span class="built_in">document</span>.head.childNodes.length - <span class="number">1</span> ].nextSibling );</span><br></pre></td></tr></table></figure>

<ul>
<li>设置link标签media属性为noexis，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将<code>media</code>的值设为<code>screen</code>或<code>all</code>，从而让浏览器开始解析CSS</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyles.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;noexist&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.media=&#x27;all&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过rel属性将link元素标记为alternate可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将rel设回stylesheet</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;alternate stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyles.css&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.rel=&#x27;stylesheet&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="资源压缩"><a href="#资源压缩" class="headerlink" title="资源压缩"></a>资源压缩</h3><p>利用<code>webpack</code>、<code>gulp/grunt</code>、<code>rollup</code>等模块化工具，将<code>css</code>代码进行压缩，使文件变小，大大降低了浏览器的加载时间</p>
<h3 id="合理使用选择器"><a href="#合理使用选择器" class="headerlink" title="合理使用选择器"></a>合理使用选择器</h3><p><code>css</code>匹配的规则是从右往左开始匹配，例如<code>#markdown .content h3</code>匹配规则如下：</p>
<ul>
<li>先找到h3标签元素</li>
<li>然后去除祖先不是.content的元素</li>
<li>最后去除祖先不是#markdown的元素</li>
</ul>
<p>如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高</p>
<p>所以我们在编写选择器的时候，可以遵循以下规则：</p>
<ul>
<li>不要嵌套使用过多复杂选择器，最好不要三层以上</li>
<li>使用id选择器就没必要再进行嵌套</li>
<li>通配符和属性选择器效率最低，避免使用</li>
</ul>
<h3 id="减少使用昂贵的属性"><a href="#减少使用昂贵的属性" class="headerlink" title="减少使用昂贵的属性"></a>减少使用昂贵的属性</h3><p>在页面发生重绘的时候，昂贵属性如<code>box-shadow</code>/<code>border-radius</code>/<code>filter</code>/透明度/<code>:nth-child</code>等，会降低浏览器的渲染性能</p>
<h3 id="不要使用-import"><a href="#不要使用-import" class="headerlink" title="不要使用@import"></a>不要使用@import</h3><p>css样式文件有两种引入方式，一种是<code>link</code>元素，另一种是<code>@import</code></p>
<p><code>@import</code>会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时</p>
<p>而且多个<code>@import</code>可能会导致下载顺序紊乱</p>
<p>比如一个css文件<code>index.css</code>包含了以下内容：<code>@import url(&quot;reset.css&quot;)</code></p>
<p>那么浏览器就必须先把<code>index.css</code>下载、解析和执行后，才下载、解析和执行第二个文件<code>reset.css</code></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>减少重排操作，以及减少不必要的重绘</li>
<li>了解哪些属性可以继承而来，避免对这些属性重复编写</li>
<li>cssSprite，合成所有icon图片，用宽高加上backgroud-position的背景图方式显现出我们要的icon图，减少了http请求</li>
<li>把小的icon图片转成base64编码</li>
<li>CSS3动画或者过渡尽量使用transform和opacity来实现动画，不要使用left和top属性</li>
</ul>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><code>css</code>实现性能的方式可以从选择器嵌套、属性特性、减少<code>http</code>这三面考虑，同时还要注意<code>css</code>代码的加载顺序</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.zhihu.com/question/19886806">https://www.zhihu.com/question/19886806</a></li>
<li><a href="https://juejin.cn/post/6844903649605320711#heading-1">https://juejin.cn/post/6844903649605320711#heading-1</a></li>
<li><a href="https://vue3js.cn/interview/">https://vue3js.cn/interview/</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>css_performance</tag>
      </tags>
  </entry>
  <entry>
    <title>data_type</title>
    <url>/archives/37919ccb.html</url>
    <content><![CDATA[<h1 id="面试官：说说JavaScript中的数据类型？存储上的差别？"><a href="#面试官：说说JavaScript中的数据类型？存储上的差别？" class="headerlink" title="面试官：说说JavaScript中的数据类型？存储上的差别？"></a>面试官：说说JavaScript中的数据类型？存储上的差别？</h1><p> <img src="https://static.vue-js.com/6d133f90-6463-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<code>JavaScript</code>中，我们可以分成两种类型：</p>
<ul>
<li>基本类型</li>
<li>复杂类型</li>
</ul>
<p>两种类型的区别是：存储位置不同</p>
<h2 id="一、基本类型"><a href="#一、基本类型" class="headerlink" title="一、基本类型"></a>一、基本类型</h2><p>基本类型主要为以下6种：</p>
<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Undefined</li>
<li>null</li>
<li>symbol</li>
</ul>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>数值最常见的整数类型格式则为十进制，还可以设置八进制（零开头）、十六进制（0x开头）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> intNum = <span class="number">55</span> <span class="comment">// 10进制的55</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">070</span> <span class="comment">// 8进制的56</span></span><br><span class="line"><span class="keyword">let</span> hexNum1 = <span class="number">0xA</span> <span class="comment">//16进制的10</span></span><br></pre></td></tr></table></figure>

<p>浮点类型则在数值汇总必须包含小数点，还可通过科学计数法表示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum3 = <span class="number">.1</span>; <span class="comment">// 有效，但不推荐</span></span><br><span class="line"><span class="keyword">let</span> floatNum = <span class="number">3.125e7</span>; <span class="comment">// 等于 31250000</span></span><br></pre></td></tr></table></figure>

<p>在数值类型中，存在一个特殊数值<code>NaN</code>，意为“不是数值”，用于表示本来要返回数值的操作失败了（而不是抛出错误）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>/<span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">0</span>/+<span class="number">0</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>



<h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p><code>Undefined</code> 类型只有一个值，就是特殊值 <code>undefined</code>。当使用 <code>var </code>或 <code>let </code>声明了变量但没有初始化时，就相当于给变量赋予了 <code>undefined </code>值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message;</span><br><span class="line"><span class="built_in">console</span>.log(message == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>包含<code> undefined</code> 值的变量跟未定义变量是有区别的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message; <span class="comment">// 这个变量被声明了，只是值为 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 没有声明过这个变量，报错</span></span><br></pre></td></tr></table></figure>



<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>字符串可以使用双引号（”）、单引号（’）或反引号（`）标示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&#x27;Jacob&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">`Jingleheimerschmidt`</span></span><br></pre></td></tr></table></figure>

<p>字符串是不可变的，意思是一旦创建，它们的值就不能变了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lang = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">lang = lang + <span class="string">&quot;Script&quot;</span>;  <span class="comment">// 先销毁再创建</span></span><br></pre></td></tr></table></figure>



<h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p><code>Null </code>类型同样只有一个值，即特殊值 <code>null</code></p>
<p>逻辑上讲， null 值表示一个空对象指针，这也是给<code>typeof </code>传一个 <code>null</code> 会返回 <code>&quot;object&quot;</code> 的原因</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> car); <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>undefined</code> 值是由 <code>null </code>值派生而来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>只要变量要保存对象，而当时又没有那个对象可保存，就可用 <code>null </code>来填充该变量</p>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p><code>Boolean </code>（布尔值）类型有两个字面值： <code>true</code> 和<code> false</code></p>
<p>通过<code>Boolean</code>可以将其他类型的数据转化成布尔值</p>
<p>规则如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数据类型      				转换为 <span class="literal">true</span> 的值      				转换为 <span class="literal">false</span> 的值</span><br><span class="line"> <span class="built_in">String</span>        				 非空字符串          					<span class="string">&quot;&quot;</span> </span><br><span class="line"> <span class="built_in">Number</span> 				非零数值（包括无穷值）						<span class="number">0</span> 、 <span class="literal">NaN</span> </span><br><span class="line"> <span class="built_in">Object</span> 					 任意对象 							   <span class="literal">null</span></span><br><span class="line">Undefined 					N/A （不存在） 						<span class="literal">undefined</span></span><br></pre></td></tr></table></figure>



<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol （符号）是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> genericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> otherGenericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(genericSymbol == otherGenericSymbol); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> otherFooSymbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fooSymbol == otherFooSymbol); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>





<h2 id="二、引用类型"><a href="#二、引用类型" class="headerlink" title="二、引用类型"></a>二、引用类型</h2><p>复杂类型统称为<code>Object</code>，我们这里主要讲述下面三种：</p>
<ul>
<li>Object</li>
<li>Array</li>
<li>Function</li>
</ul>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>创建<code>object</code>常用方式为对象字面量表示法，属性名可以是字符串或数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p><code>JavaScript</code>数组是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。并且，数组也是动态大小的，会随着数据添加而自动增长</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="number">2</span>, &#123;<span class="attr">age</span>: <span class="number">20</span> &#125;]</span><br><span class="line">colors.push(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>函数实际上是对象，每个函数都是 <code>Function</code>类型的实例，而 <code>Function </code>也有属性和方法，跟其他引用类型一样</p>
<p>函数存在三种常见的表达方式：</p>
<ul>
<li>函数声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数表达式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>箭头函数</li>
</ul>
<p>函数声明和函数表达式两种方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="其他引用类型"><a href="#其他引用类型" class="headerlink" title="其他引用类型"></a>其他引用类型</h3><p>除了上述说的三种之外，还包括<code>Date</code>、<code>RegExp</code>、<code>Map</code>、<code>Set</code>等……</p>
<h2 id="三、存储区别"><a href="#三、存储区别" class="headerlink" title="三、存储区别"></a>三、存储区别</h2><p>基本数据类型和引用数据类型存储在内存中的位置不同：</p>
<ul>
<li><p>基本数据类型存储在栈中</p>
</li>
<li><p>引用类型的对象存储于堆中</p>
</li>
</ul>
<p>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值</p>
<p>下面来举个例子</p>
<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = a; <span class="comment">// 赋值操作</span></span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10值</span></span><br></pre></td></tr></table></figure>

<p><code>a</code>的值为一个基本类型，是存储在栈中，将<code>a</code>的值赋给<code>b</code>，虽然两个变量的值相等，但是两个变量保存了两个不同的内存地址</p>
<p>下图演示了基本类型赋值的过程：</p>
<p> <img src="https://static.vue-js.com/906ffb90-6463-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.name = <span class="string">&quot;Xxx&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name); <span class="comment">// xxx</span></span><br></pre></td></tr></table></figure>

<p>引用类型数据存放在内对内中，每个堆内存中有一个引用地址，该引用地址存放在栈中</p>
<p><code>obj1</code>是一个引用类型，在赋值操作过程汇总，实际是将堆内存对象在栈内存的引用地址复制了一份给了<code>obj2</code>，实际上他们共同指向了同一个堆内存对象，所以更改<code>obj2</code>会对<code>obj1</code>产生影响</p>
<p>下图演示这个引用类型赋值过程</p>
<p> <img src="https://static.vue-js.com/a34bdd10-6463-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>声明变量时不同的内存地址分配：<ul>
<li>简单类型的值存放在栈中，在栈中存放的是对应的值</li>
<li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li>
</ul>
</li>
<li>不同的类型数据导致赋值变量时的不同：<ul>
<li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li>
<li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>data_type</tag>
      </tags>
  </entry>
  <entry>
    <title>debounce_throttle</title>
    <url>/archives/1be48ee.html</url>
    <content><![CDATA[<h1 id="面试官：什么是防抖和节流？有什么区别？如何实现？"><a href="#面试官：什么是防抖和节流？有什么区别？如何实现？" class="headerlink" title="面试官：什么是防抖和节流？有什么区别？如何实现？"></a>面试官：什么是防抖和节流？有什么区别？如何实现？</h1><p> <img src="https://static.vue-js.com/912f1a10-8787-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>本质上是优化高频率执行代码的一种手段</p>
<p>如：浏览器的 <code>resize</code>、<code>scroll</code>、<code>keypress</code>、<code>mousemove</code> 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能</p>
<p>为了优化体验，需要对这类事件进行调用次数的限制，对此我们就可以采用 <strong>防抖（debounce）</strong> 和 <strong>节流（throttle）</strong> 的方式来减少调用频率</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul>
<li>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</li>
<li>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</li>
</ul>
<p>一个经典的比喻:</p>
<p>想象每天上班大厦底下的电梯。把电梯完成一次运送，类比为一次函数的执行和响应</p>
<p>假设电梯有两种运行策略 <code>debounce</code> 和 <code>throttle</code>，超时设定为15秒，不考虑容量限制</p>
<p>电梯第一个人进来后，15秒后准时运送一次，这是节流</p>
<p>电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是防抖</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>完成节流可以使用时间戳与定时器的写法</p>
<p>使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttled1</span>(<span class="params">fn, delay = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oldtime = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newtime = <span class="built_in">Date</span>.now()</span><br><span class="line">        <span class="keyword">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class="line">            fn.apply(<span class="literal">null</span>, args)</span><br><span class="line">            oldtime = <span class="built_in">Date</span>.now()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用定时器写法，<code>delay</code>毫秒后第一次执行，第二次事件停止触发后依然会再一次执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttled2</span>(<span class="params">fn, delay = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以将时间戳写法的特性与定时器写法的特性相结合，实现一个更加精确的节流。实现如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttled</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> starttime = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> curTime = <span class="built_in">Date</span>.now() <span class="comment">// 当前时间</span></span><br><span class="line">        <span class="keyword">let</span> remaining = delay - (curTime - starttime)  <span class="comment">// 从上一次到现在，还剩下多少多余时间</span></span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            fn.apply(context, args)</span><br><span class="line">            starttime = <span class="built_in">Date</span>.now()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(fn, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>简单版本的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            func.apply(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout); <span class="comment">// timeout 不为null</span></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">let</span> callNow = !timeout; <span class="comment">// 第一次会立即执行，以后只有事件执行后才会再次触发</span></span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><p>相同点：</p>
<ul>
<li>都可以通过使用 <code>setTimeout</code> 实现</li>
<li>目的都是，降低回调执行频率。节省计算资源</li>
</ul>
<p>不同点：</p>
<ul>
<li>函数防抖，在一段连续操作结束后，处理回调，利用<code>clearTimeout </code>和 <code>setTimeout</code>实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能</li>
<li>函数防抖关注一定时间连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次</li>
</ul>
<p>例如，都设置时间频率为500ms，在2秒时间内，频繁触发函数，节流，每隔 500ms 就执行一次。防抖，则不管调动多少次方法，在2s后，只会执行一次</p>
<p>如下图所示：</p>
<p> <img src="https://static.vue-js.com/a2c81b50-8787-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>防抖在连续的事件，只需触发一次回调的场景有：</p>
<ul>
<li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li>
<li>手机号、邮箱验证输入检测</li>
<li>窗口大小<code>resize</code>。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li>
</ul>
<p>节流在间隔一段时间执行一次回调的场景有：</p>
<ul>
<li>滚动加载，加载更多或滚到底部监听</li>
<li>搜索框，搜索联想功能</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>防抖节流</tag>
      </tags>
  </entry>
  <entry>
    <title>dp_px_dpr_ppi</title>
    <url>/archives/14015a55.html</url>
    <content><![CDATA[<h1 id="面试官：说说设备像素、css像素、设备独立像素、dpr、ppi-之间的区别？"><a href="#面试官：说说设备像素、css像素、设备独立像素、dpr、ppi-之间的区别？" class="headerlink" title="面试官：说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别？"></a>面试官：说说设备像素、css像素、设备独立像素、dpr、ppi 之间的区别？</h1><p> <img src="https://static.vue-js.com/c4d9bfd0-91f2-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>在<code>css</code>中我们通常使用px作为单位，在PC浏览器中<code>css</code>的1个像素都是对应着电脑屏幕的1个物理像素</p>
<p>这会造成一种错觉，我们会认为<code>css</code>中的像素就是设备的物理像素</p>
<p>但实际情况却并非如此，<code>css</code>中的像素只是一个抽象的单位，在不同的设备或不同的环境中，<code>css</code>中的1px所代表的设备物理像素是不同的</p>
<p>当我们做移动端开发时，同为1px的设置，在不同分辨率的移动设备上显示效果却有很大差异</p>
<p>这背后就涉及了css像素、设备像素、设备独立像素、dpr、ppi的概念</p>
<h2 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h2><h3 id="CSS像素"><a href="#CSS像素" class="headerlink" title="CSS像素"></a>CSS像素</h3><p>CSS像素（css pixel, px）: 适用于web编程，在 CSS 中以 px 为后缀，是一个长度单位</p>
<p>在 CSS 规范中，长度单位可以分为两类，绝对单位以及相对单位</p>
<p>px是一个相对单位，相对的是设备像素（device pixel）</p>
<p>一般情况，页面缩放比为1，1个CSS像素等于1个设备独立像素</p>
<p><code>CSS</code>像素又具有两个方面的相对性：</p>
<ul>
<li>在同一个设备上，每1个 CSS 像素所代表的设备像素是可以变化的（比如调整屏幕的分辨率）</li>
<li>在不同的设备之间，每1个 CSS 像素所代表的设备像素是可以变化的（比如两个不同型号的手机）</li>
</ul>
<p>在页面进行缩放操作也会 引起<code>css</code>中<code>px</code>的变化，假设页面放大一倍，原来的 1px 的东西变成 2px，在实际宽度不变的情况下1px 变得跟原来的 2px 的长度（长宽）一样了（元素会占据更多的设备像素）</p>
<p>假设原来需要 320px 才能填满的宽度现在只需要 160px</p>
<p>px会受到下面的因素的影响而变化：</p>
<ul>
<li>每英寸像素（PPI）</li>
<li>设备像素比（DPR）</li>
</ul>
<h3 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h3><p>设备像素（device pixels），又称为物理像素</p>
<p>指设备能控制显示的最小物理单位，不一定是一个小正方形区块，也没有标准的宽高，只是用于显示丰富色彩的一个“点”而已</p>
<p>可以参考公园里的景观变色彩灯，一个彩灯(物理像素)由红、蓝、绿小灯组成，三盏小灯不同的亮度混合出各种色彩</p>
<p> <img src="https://static.vue-js.com/cffc6570-91f2-11eb-ab90-d9ae814b240d.png"></p>
<p>从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，单位为<code>pt</code></p>
<h3 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h3><p>设备独立像素（Device Independent Pixel）：与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素，是一个总体概念，包括了CSS像素</p>
<p>在<code>javaScript</code>中可以通过<code>window.screen.width/ window.screen.height</code> 查看</p>
<p>比如我们会说“电脑屏幕在 2560x1600分辨率下不适合玩游戏，我们把它调为 1440x900”，这里的“分辨率”（非严谨说法）指的就是设备独立像素</p>
<p>一个设备独立像素里可能包含1个或者多个物理像素点，包含的越多则屏幕看起来越清晰</p>
<p>至于为什么出现设备独立像素这种虚拟像素单位概念，下面举个例子：</p>
<p>iPhone 3GS 和 iPhone 4/4s 的尺寸都是 3.5 寸，但 iPhone 3GS 的分辨率是 320x480，iPhone 4/4s 的分辨率是 640x960</p>
<p>这意味着，iPhone 3GS 有 320 个物理像素，iPhone 4/4s 有 640 个物理像素</p>
<p>如果我们按照真实的物理像素进行布局，比如说我们按照 320 物理像素进行布局，到了 640 物理像素的手机上就会有一半的空白，为了避免这种问题，就产生了虚拟像素单位</p>
<p>我们统一 iPhone 3GS 和 iPhone 4/4s 都是 320 个虚拟像素，只是在 iPhone 3GS 上，最终 1 个虚拟像素换算成 1 个物理像素，在 iphone 4s 中，1 个虚拟像素最终换算成 2 个物理像素</p>
<p>至于 1 个虚拟像素被换算成几个物理像素，这个数值我们称之为设备像素比，也就是下面介绍的<code>dpr</code></p>
<h3 id="dpr"><a href="#dpr" class="headerlink" title="dpr"></a>dpr</h3><p>dpr（device pixel ratio），设备像素比，代表设备独立像素到设备像素的转换关系，在<code>JavaScript</code>中可以通过 <code>window.devicePixelRatio</code> 获取</p>
<p>计算公式如下：</p>
<p> <img src="https://static.vue-js.com/dd45e2b0-91f2-11eb-ab90-d9ae814b240d.png"></p>
<p>当设备像素比为1:1时，使用1（1×1）个设备像素显示1个CSS像素</p>
<p>当设备像素比为2:1时，使用4（2×2）个设备像素显示1个CSS像素</p>
<p>当设备像素比为3:1时，使用9（3×3）个设备像素显示1个CSS像素</p>
<p>如下图所示：</p>
<p><img src="https://static.vue-js.com/e63cceb0-91f2-11eb-ab90-d9ae814b240d.png"></p>
<p>当<code>dpr</code>为3，那么<code>1px</code>的<code>CSS</code>像素宽度对应<code>3px</code>的物理像素的宽度，1px的<code>CSS</code>像素高度对应<code>3px</code>的物理像素高度</p>
<h3 id="ppi"><a href="#ppi" class="headerlink" title="ppi"></a>ppi</h3><p>ppi （pixel per inch），每英寸像素，表示每英寸所包含的像素点数目，更确切的说法应该是像素密度。数值越高，说明屏幕能以更高密度显示图像</p>
<p>计算公式如下：</p>
<p> <img src="https://static.vue-js.com/f734adf0-91f2-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>无缩放情况下，1个CSS像素等于1个设备独立像素</p>
<p>设备像素由屏幕生产之后就不发生改变，而设备独立像素是一个虚拟单位会发生改变</p>
<p>PC端中，1个设备独立像素 = 1个设备像素 （在100%，未缩放的情况下）</p>
<p>在移动端中，标准屏幕（160ppi）下 1个设备独立像素 = 1个设备像素</p>
<p>设备像素比（dpr） = 设备像素 / 设备独立像素</p>
<p>每英寸像素（ppi），值越大，图像越清晰</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSS_pixel">https://developer.mozilla.org/zh-CN/docs/Glossary/CSS_pixel</a></li>
<li><a href="https://hijiangtao.github.io/2017/07/09/Device-Viewport-and-Pixel-Introduction/">https://hijiangtao.github.io/2017/07/09/Device-Viewport-and-Pixel-Introduction/</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>dp_px_dpr_ppi</tag>
      </tags>
  </entry>
  <entry>
    <title>em_px_rem_vh_vw</title>
    <url>/archives/92004154.html</url>
    <content><![CDATA[<h1 id="面试官：说说em-px-rem-vh-vw区别"><a href="#面试官：说说em-px-rem-vh-vw区别" class="headerlink" title="面试官：说说em/px/rem/vh/vw区别?"></a>面试官：说说em/px/rem/vh/vw区别?</h1><p><img src="https://static.vue-js.com/51b036e0-9131-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>传统的项目开发中，我们只会用到<code>px</code>、<code>%</code>、<code>em</code>这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性</p>
<p>从<code>CSS3</code>开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了<code>rem</code>、<code>vh</code>、<code>vw</code>、<code>vm</code>等一些新的计量单位</p>
<p>利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等</p>
<h2 id="二、单位"><a href="#二、单位" class="headerlink" title="二、单位"></a>二、单位</h2><p>在<code>css</code>单位中，可以分为长度单位、绝对单位，如下表所指示</p>
<table>
<thead>
<tr>
<th>CSS单位</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>相对长度单位</td>
<td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td>
</tr>
<tr>
<td>绝对长度单位</td>
<td>cm、mm、in、px、pt、pc</td>
</tr>
</tbody></table>
<p>这里我们主要讲述px、em、rem、vh、vw</p>
<h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>px，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中</p>
<p>有些人会把<code>px</code>认为是相对长度，原因在于在移动端中存在设备像素比，<code>px</code>实际显示的大小是不确定的</p>
<p>这里之所以认为<code>px</code>为绝对单位，在于<code>px</code>的大小和元素的其他属性无关</p>
<h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（<code>1em = 16px</code>）</p>
<p>为了简化 <code>font-size</code> 的换算，我们需要在<code>css</code>中的 <code>body</code> 选择器中声明<code>font-size</code>= <code>62.5%</code>，这就使 em 值变为 <code>16px*62.5% = 10px</code></p>
<p>这样 <code>12px = 1.2em</code>, <code>10px = 1em</code>, 也就是说只需要将你的原来的<code> px</code> 数值除以 10，然后换上 <code>em </code>作为单位就行了</p>
<p>特点：</p>
<ul>
<li>em 的值并不是固定的</li>
<li>em 会继承父级元素的字体大小</li>
<li>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li>
<li>任意浏览器的默认字体高都是 16px</li>
</ul>
<p>举个例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line">    我是14px=1.4rem<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span>我是12px=1.2rem<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>样式为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">10px</span>;  &#125; <span class="comment">/*  公式16px*62.5%=10px  */</span>  </span><br><span class="line">    <span class="selector-class">.big</span>&#123;<span class="attribute">font-size</span>: <span class="number">1.4rem</span>&#125;</span><br><span class="line">    <span class="selector-class">.small</span>&#123;<span class="attribute">font-size</span>: <span class="number">1.2rem</span>&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>这时候<code>.big</code>元素的<code>font-size</code>为14px，而<code>.small</code>元素的<code>font-size</code>为12px</p>
<h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>rem，相对单位，相对的只是HTML根元素<code>font-size</code>的值</p>
<p>同理，如果想要简化<code>font-size</code>的转化，我们可以在根元素<code>html</code>中加入<code>font-size: 62.5%</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">62.5%</span>;  &#125; <span class="comment">/*  公式16px*62.5%=10px  */</span> </span><br></pre></td></tr></table></figure>

<p>这样页面中1rem=10px、1.2rem=12px、1.4rem=14px、1.6rem=16px;使得视觉、使用、书写都得到了极大的帮助</p>
<p>特点：</p>
<ul>
<li>rem单位可谓集相对大小和绝对大小的优点于一身</li>
<li>和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸</li>
</ul>
<h3 id="vh、vw"><a href="#vh、vw" class="headerlink" title="vh、vw"></a>vh、vw</h3><p>vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，<code>vh</code>则为窗口的高度</p>
<p>这里的窗口分成几种情况：</p>
<ul>
<li><p>在桌面端，指的是浏览器的可视区域</p>
</li>
<li><p>移动端指的就是布局视口</p>
</li>
</ul>
<p>像<code>vw</code>、<code>vh</code>，比较容易混淆的一个单位是<code>%</code>，不过百分比宽泛的讲是相对于父元素：</p>
<ul>
<li>对于普通定位元素就是我们理解的父元素</li>
<li>对于position: absolute;的元素是相对于已定位的父元素</li>
<li>对于position: fixed;的元素是相对于 ViewPort（可视窗口）</li>
</ul>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><strong>px</strong>：绝对单位，页面按精确像素展示</p>
<p><strong>em</strong>：相对单位，基准点为父节点字体的大小，如果自身定义了<code>font-size</code>按自身来计算，整个页面内<code>1em</code>不是一个固定的值</p>
<p><strong>rem</strong>：相对单位，可理解为<code>root em</code>, 相对根节点<code>html</code>的字体大小来计算</p>
<p><strong>vh、vw</strong>：主要用于页面视口大小布局，在页面布局上更加方便简单</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>em_px_rem_vh_vw</tag>
      </tags>
  </entry>
  <entry>
    <title>event_Model</title>
    <url>/archives/574fecf1.html</url>
    <content><![CDATA[<h1 id="面试官：说说JavaScript中的事件模型"><a href="#面试官：说说JavaScript中的事件模型" class="headerlink" title="面试官：说说JavaScript中的事件模型"></a>面试官：说说JavaScript中的事件模型</h1><p><img src="https://static.vue-js.com/32a182f0-74cf-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、事件与事件流"><a href="#一、事件与事件流" class="headerlink" title="一、事件与事件流"></a>一、事件与事件流</h2><p><code>javascript</code>中的事件，可以理解就是在<code>HTML</code>文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等</p>
<p>由于<code>DOM</code>是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念</p>
<p>事件流都会经历三个阶段：</p>
<ul>
<li>事件捕获阶段(capture phase)</li>
<li>处于目标阶段(target phase)</li>
<li>事件冒泡阶段(bubbling phase)</li>
</ul>
<p> <img src="https://static.vue-js.com/3e9a6450-74cf-11eb-85f6-6fac77c0c9b3.png"></p>
<p>事件冒泡是一种从下往上的传播方式，由最具体的元素（触发节点）然后逐渐向上传播到最不具体的那个节点，也就是<code>DOM</code>中最高层的父节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Event Bubbling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，我们给<code>button</code>和它的父元素，加入点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;clickMe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;1.Button&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;2.body&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;3.document&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;4.window&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>点击按钮，输出如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>button</span><br><span class="line"><span class="number">2.</span>body</span><br><span class="line"><span class="number">3.</span><span class="built_in">document</span></span><br><span class="line"><span class="number">4.</span><span class="built_in">window</span></span><br></pre></td></tr></table></figure>

<p>点击事件首先在<code>button</code>元素上发生，然后逐级向上传播</p>
<p>事件捕获与事件冒泡相反，事件最开始由不太具体的节点最早接受事件, 而最具体的节点（触发节点）最后接受事件</p>
<h2 id="二、事件模型"><a href="#二、事件模型" class="headerlink" title="二、事件模型"></a>二、事件模型</h2><p>事件模型可以分为三种：</p>
<ul>
<li>原始事件模型（DOM0级）</li>
<li>标准事件模型（DOM2级）</li>
<li>IE事件模型（基本不用）</li>
</ul>
<h3 id="原始事件模型"><a href="#原始事件模型" class="headerlink" title="原始事件模型"></a>原始事件模型</h3><p>事件绑定监听函数比较简单, 有两种方式：</p>
<ul>
<li>HTML代码中直接绑定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> onclick=<span class="string">&quot;fun()&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过<code>JS</code>代码绑定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.onclick = fun;</span><br></pre></td></tr></table></figure>

<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>绑定速度快</li>
</ul>
<p><code>DOM0</code>级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行</p>
<ul>
<li><p>只支持冒泡，不支持捕获</p>
</li>
<li><p>同一个类型的事件只能绑定一次</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> onclick=<span class="string">&quot;fun1()&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.onclick = fun2;</span><br></pre></td></tr></table></figure>

<p>如上，当希望为同一个元素绑定多个同类型事件的时候（上面的这个<code>btn</code>元素绑定2个点击事件），是不被允许的，后绑定的事件会覆盖之前的事件</p>
<p>删除 <code>DOM0</code> 级事件处理程序只要将对应事件属性置为<code>null</code>即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>





<h3 id="标准事件模型"><a href="#标准事件模型" class="headerlink" title="标准事件模型"></a>标准事件模型</h3><p>在该事件模型中，一次事件共有三个过程:</p>
<ul>
<li>事件捕获阶段：事件从<code>document</code>一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>
<li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数</li>
<li>事件冒泡阶段：事件从目标元素冒泡到<code>document</code>, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>
</ul>
<p>事件绑定监听函数的方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addEventListener(eventType, handler, useCapture)</span><br></pre></td></tr></table></figure>

<p>事件移除监听函数的方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">removeEventListener(eventType, handler, useCapture)</span><br></pre></td></tr></table></figure>

<p>参数如下：</p>
<ul>
<li><code>eventType</code>指定事件类型(不要加on)</li>
<li><code>handler</code>是事件处理函数</li>
<li><code>useCapture</code>是一个<code>boolean</code>用于指定是否在捕获阶段进行处理，一般设置为<code>false</code>与IE浏览器保持一致</li>
</ul>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.addEventListener(‘click’, showMessage, <span class="literal">false</span>);</span><br><span class="line">btn.removeEventListener(‘click’, showMessage, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><ul>
<li>可以在一个<code>DOM</code>元素上绑定多个事件处理器，各自并不会冲突</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.addEventListener(‘click’, showMessage1, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(‘click’, showMessage2, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(‘click’, showMessage3, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>执行时机</li>
</ul>
<p>当第三个参数(<code>useCapture</code>)设置为<code>true</code>就在捕获过程中执行，反之在冒泡过程中执行处理函数</p>
<p>下面举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;div&#x27;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;p&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;span&#x27;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &lt;/p &gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>设置点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClickFn</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tagName = event.currentTarget.tagName;</span><br><span class="line">    <span class="keyword">var</span> phase = event.eventPhase;</span><br><span class="line">    <span class="built_in">console</span>.log(tagName, phase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.addEventListener(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">false</span>);</span><br><span class="line">p.addEventListener(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>上述使用了<code>eventPhase</code>，返回一个代表当前执行阶段的整数值。1为捕获阶段、2为事件对象触发阶段、3为冒泡阶段</p>
<p>点击<code>Click Me!</code>，输出如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">P <span class="number">3</span></span><br><span class="line">DIV <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>可以看到，<code>p</code>和<code>div</code>都是在冒泡阶段响应了事件，由于冒泡的特性，裹在里层的<code>p</code>率先做出响应</p>
<p>如果把第三个参数都改为<code>true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.addEventListener(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">true</span>);</span><br><span class="line">p.addEventListener(<span class="string">&#x27;click&#x27;</span>, onClickFn, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">DIV <span class="number">1</span></span><br><span class="line">P <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>两者都是在捕获阶段响应事件，所以<code>div</code>比<code>p</code>标签先做出响应</p>
<h3 id="IE事件模型"><a href="#IE事件模型" class="headerlink" title="IE事件模型"></a>IE事件模型</h3><p>IE事件模型共有两个过程:</p>
<ul>
<li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。</li>
<li>事件冒泡阶段：事件从目标元素冒泡到<code>document</code>, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>
</ul>
<p>事件绑定监听函数的方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attachEvent(eventType, handler)</span><br></pre></td></tr></table></figure>

<p>事件移除监听函数的方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">detachEvent(eventType, handler)</span><br></pre></td></tr></table></figure>

<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">btn.attachEvent(‘onclick’, showMessage);</span><br><span class="line">btn.detachEvent(‘onclick’, showMessage);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>event_Model</tag>
      </tags>
  </entry>
  <entry>
    <title>event_agent</title>
    <url>/archives/67902db1.html</url>
    <content><![CDATA[<h1 id="面试官：解释下什么是事件代理？应用场景？"><a href="#面试官：解释下什么是事件代理？应用场景？" class="headerlink" title="面试官：解释下什么是事件代理？应用场景？"></a>面试官：解释下什么是事件代理？应用场景？</h1><p><img src="https://static.vue-js.com/a33f0ab0-797e-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>事件代理，俗地来讲，就是把一个元素响应事件（<code>click</code>、<code>keydown</code>……）的函数委托到另一个元素</p>
<p>前面讲到，事件流的都会经过三个阶段： 捕获阶段 -&gt; 目标阶段 -&gt; 冒泡阶段，而事件委托就是在冒泡阶段完成</p>
<p>事件委托，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，而不是目标元素</p>
<p>当事件响应到目标元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数</p>
<p>下面举个例子：</p>
<p>比如一个宿舍的同学同时快递到了，一种笨方法就是他们一个个去领取</p>
<p>较优方法就是把这件事情委托给宿舍长，让一个人出去拿好所有快递，然后再根据收件人一一分发给每个同学</p>
<p>在这里，取快递就是一个事件，每个同学指的是需要响应事件的 <code>DOM </code>元素，而出去统一领取快递的宿舍长就是代理的元素</p>
<p>所以真正绑定事件的是这个元素，按照收件人分发快递的过程就是在事件执行中，需要判断当前响应的事件应该匹配到被代理元素中的哪一个或者哪几个</p>
<h2 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h2><p>如果我们有一个列表，列表之中有大量的列表项，我们需要在点击列表项的时候响应一个事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  ......</span><br><span class="line">  &lt;li&gt;item n&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取目标元素</span></span><br><span class="line"><span class="keyword">const</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>)</span><br><span class="line"><span class="comment">// 循环遍历绑定事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    lis[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.target.innerHTML)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候就可以事件委托，把点击事件绑定在父级元素<code>ul</code>上面，然后执行事件的时候再去匹配目标元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给父层元素绑定事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 兼容性处理</span></span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="comment">// 判断是否匹配目标元素</span></span><br><span class="line">    <span class="keyword">if</span> (target.nodeName.toLocaleLowerCase === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;the content is: &#x27;</span>, target.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>还有一种场景是上述列表项并不多，我们给每个列表项都绑定了事件</p>
<p>但是如果用户能够随时动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件</p>
<p>如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的</p>
<p>举个例子：</p>
<p>下面<code>html</code>结构中，点击<code>input</code>可以动态添加元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用事件委托</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ul1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> num = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件委托，添加的子元素也有事件</span></span><br><span class="line">oUl.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">const</span> target = ev.target || ev.srcElement;</span><br><span class="line">    <span class="keyword">if</span> (target.nodeName.toLowerCase() == <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;the content is: &#x27;</span>, target.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加新节点</span></span><br><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">const</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    oLi.innerHTML = <span class="string">`item <span class="subst">$&#123;num&#125;</span>`</span>;</span><br><span class="line">    oUl.appendChild(oLi);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以看到，使用事件委托，在动态绑定事件的情况下是可以减少很多重复工作的</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>适合事件委托的事件有：<code>click</code>，<code>mousedown</code>，<code>mouseup</code>，<code>keydown</code>，<code>keyup</code>，<code>keypress</code></p>
<p>从上面应用场景中，我们就可以看到使用事件委托存在两大优点：</p>
<ul>
<li>减少整个页面所需的内存，提升整体性能</li>
<li>动态绑定，减少重复工作</li>
</ul>
<p>但是使用事件委托也是存在局限性：</p>
<ul>
<li><p><code>focus</code>、<code>blur </code>这些事件没有事件冒泡机制，所以无法进行委托绑定事件</p>
</li>
<li><p><code>mousemove</code>、<code>mouseout </code>这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的</p>
</li>
</ul>
<p>如果把所有事件都用事件代理，可能会出现事件误判，即本不该被触发的事件被绑定上了事件</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>event_agent</tag>
      </tags>
  </entry>
  <entry>
    <title>event_loop</title>
    <url>/archives/be945145.html</url>
    <content><![CDATA[<h1 id="面试官：说说你对事件循环的理解"><a href="#面试官：说说你对事件循环的理解" class="headerlink" title="面试官：说说你对事件循环的理解"></a>面试官：说说你对事件循环的理解</h1><p> <img src="https://static.vue-js.com/50f062d0-7cb8-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>首先，<code>JavaScript </code>是一门单线程的语言，意味着同一时间内只能做一件事，但是这并不意味着单线程就是阻塞，而实现单线程非阻塞的方法就是事件循环</p>
<p>在<code>JavaScript</code>中，所有的任务都可以分为</p>
<ul>
<li><p>同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行</p>
</li>
<li><p>异步任务：异步执行的任务，比如<code>ajax</code>网络请求，<code>setTimeout </code>定时函数等</p>
</li>
</ul>
<p>同步任务与异步任务的运行流程图如下：</p>
<p> <img src="https://static.vue-js.com/61efbc20-7cb8-11eb-85f6-6fac77c0c9b3.png"></p>
<p>从上面我们可以看到，同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就事件循环</p>
<h2 id="二、宏任务与微任务"><a href="#二、宏任务与微任务" class="headerlink" title="二、宏任务与微任务"></a>二、宏任务与微任务</h2><p>如果将任务划分为同步任务和异步任务并不是那么的准确，举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new Promise&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>如果按照上面流程图来分析代码，我们会得到下面的执行步骤：</p>
<ul>
<li><code>console.log(1) </code>，同步任务，主线程中执行</li>
<li><code>setTimeout()</code> ，异步任务，放到 <code>Event Table</code>，0 毫秒后<code>console.log(2) </code>回调推入 <code>Event Queue</code> 中</li>
<li><code>new Promise</code> ，同步任务，主线程直接执行</li>
<li><code>.then</code> ，异步任务，放到 <code>Event Table</code></li>
<li><code>console.log(3)</code>，同步任务，主线程执行</li>
</ul>
<p>所以按照分析，它的结果应该是 <code>1</code> =&gt; <code>&#39;new Promise&#39;</code> =&gt; <code>3</code> =&gt; <code>2</code> =&gt; <code>&#39;then&#39;</code></p>
<p>但是实际结果是：<code>1</code>=&gt;<code>&#39;new Promise&#39;</code>=&gt; <code>3</code> =&gt; <code>&#39;then&#39;</code> =&gt; <code>2</code></p>
<p>出现分歧的原因在于异步任务执行顺序，事件队列其实是一个“先进先出”的数据结构，排在前面的事件会优先被主线程读取</p>
<p>例子中 <code>setTimeout</code>回调事件是先进入队列中的，按理说应该先于 <code>.then</code> 中的执行，但是结果却偏偏相反</p>
<p>原因在于异步任务还可以细分为微任务与宏任务</p>
<h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前</p>
<p>常见的微任务有：</p>
<ul>
<li><p>Promise.then</p>
</li>
<li><p>MutaionObserver</p>
</li>
<li><p>Object.observe（已废弃；Proxy 对象替代）</p>
</li>
<li><p>process.nextTick（Node.js）</p>
</li>
</ul>
<h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合</p>
<p>常见的宏任务有：</p>
<ul>
<li>script (可以理解为外层同步代码) </li>
<li>setTimeout/setInterval </li>
<li>UI rendering/UI事件 </li>
<li>postMessage、MessageChannel </li>
<li>setImmediate、I/O（Node.js）</li>
</ul>
<p>这时候，事件循环，宏任务，微任务的关系如图所示</p>
<p> <img src="https://static.vue-js.com/6e80e5e0-7cb8-11eb-85f6-6fac77c0c9b3.png"></p>
<p>按照这个流程，它的执行机制是：</p>
<ul>
<li>执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中</li>
<li>当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完</li>
</ul>
<p>回到上面的题目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new Promise&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>流程如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遇到 console.log(1) ，直接打印 1</span></span><br><span class="line"><span class="comment">// 遇到定时器，属于新的宏任务，留着后面执行</span></span><br><span class="line"><span class="comment">// 遇到 new Promise，这个是直接执行的，打印 &#x27;new Promise&#x27;</span></span><br><span class="line"><span class="comment">// .then 属于微任务，放入微任务队列，后面再执行</span></span><br><span class="line"><span class="comment">// 遇到 console.log(3) 直接打印 3</span></span><br><span class="line"><span class="comment">// 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 &#x27;then&#x27;</span></span><br><span class="line"><span class="comment">// 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 2</span></span><br></pre></td></tr></table></figure>



<h2 id="三、async与await"><a href="#三、async与await" class="headerlink" title="三、async与await"></a>三、async与await</h2><p><code>async</code> 是异步的意思，<code>await </code>则可以理解为 <code>async wait</code>。所以可以理解<code>async</code>就是用来声明一个异步方法，而 <code>await </code>是用来等待异步方法执行</p>
<h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p><code>async</code>函数返回一个<code>promise</code>对象，下面两种方法是等效的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;TEST&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// asyncF is equivalent to f!</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;TEST&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p>正常情况下，<code>await</code>命令后面是一个 <code>Promise </code>对象，返回该对象的结果。如果不是 <code>Promise </code>对象，就直接返回对应的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 等同于</span></span><br><span class="line">    <span class="comment">// return 123</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">f().then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v)) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<p>不管<code>await</code>后面跟着的是什么，<code>await</code>都会阻塞后面的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> fn2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>) <span class="comment">// 阻塞</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>上面的例子中，<code>await</code> 会阻塞下面的代码（即加入微任务队列），先执行 <code>async </code>外面的同步代码，同步代码执行完，再回到 <code>async</code> 函数中，再执行之前阻塞的代码</p>
<p>所以上述输出结果为：<code>1</code>，<code>fn2</code>，<code>3</code>，<code>2</code></p>
<h2 id="四、流程分析"><a href="#四、流程分析" class="headerlink" title="四、流程分析"></a>四、流程分析</h2><p>通过对上面的了解，我们对<code>JavaScript</code>对各种场景的执行顺序有了大致的了解</p>
<p>这里直接上代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;settimeout&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">async1()</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>分析过程：</p>
<ol>
<li>执行整段代码，遇到 <code>console.log(&#39;script start&#39;)</code> 直接打印结果，输出 <code>script start</code></li>
<li>遇到定时器了，它是宏任务，先放着不执行</li>
<li>遇到 <code>async1()</code>，执行 <code>async1</code> 函数，先打印 <code>async1 start</code>，下面遇到<code>await</code>怎么办？先执行 <code>async2</code>，打印 <code>async2</code>，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码</li>
<li>跳到 <code>new Promise</code> 这里，直接执行，打印 <code>promise1</code>，下面遇到 <code>.then()</code>，它是微任务，放到微任务列表等待执行</li>
<li>最后一行直接打印 <code>script end</code>，现在同步代码执行完了，开始执行微任务，即 <code>await </code>下面的代码，打印 <code>async1 end</code></li>
<li>继续执行下一个微任务，即执行 <code>then</code> 的回调，打印 <code>promise2</code></li>
<li>上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 <code>settimeout</code></li>
</ol>
<p>所以最后的结果是：<code>script start</code>、<code>async1 start</code>、<code>async2</code>、<code>promise1</code>、<code>script end</code>、<code>async1 end</code>、<code>promise2</code>、<code>settimeout</code></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>event_loop</tag>
      </tags>
  </entry>
  <entry>
    <title>flexbox</title>
    <url>/archives/28d88e6.html</url>
    <content><![CDATA[<h1 id="面试官：说说flexbox（弹性盒布局模型）-以及适用场景？"><a href="#面试官：说说flexbox（弹性盒布局模型）-以及适用场景？" class="headerlink" title="面试官：说说flexbox（弹性盒布局模型）,以及适用场景？"></a>面试官：说说flexbox（弹性盒布局模型）,以及适用场景？</h1><p> <img src="https://static.vue-js.com/ef25b0a0-9837-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>Flexible Box</code> 简称 <code>flex</code>，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局</p>
<p>采用Flex布局的元素，称为<code>flex</code>容器<code>container</code></p>
<p>它的所有子元素自动成为容器成员，称为<code>flex</code>项目<code>item</code></p>
<p> <img src="https://static.vue-js.com/fbc5f590-9837-11eb-ab90-d9ae814b240d.png"></p>
<p>容器中默认存在两条轴，主轴和交叉轴，呈90度关系。项目默认沿主轴排列，通过<code>flex-direction</code>来决定主轴的方向</p>
<p>每根轴都有起点和终点，这对于元素的对齐非常重要</p>
<h2 id="二、属性"><a href="#二、属性" class="headerlink" title="二、属性"></a>二、属性</h2><p>关于<code>flex</code>常用的属性，我们可以划分为容器属性和容器成员属性</p>
<p>容器属性有：</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>决定主轴的方向(即项目的排列方向)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;   </span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>属性对应如下：</p>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端</li>
<li>row-reverse：主轴为水平方向，起点在右端</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿</li>
</ul>
<p>如下图所示：</p>
<p> <img src="https://static.vue-js.com/0c9abc70-9838-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>弹性元素永远沿主轴排列，那么如果主轴排不下，通过<code>flex-wrap</code>决定容器内项目是否可换行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>属性对应如下：</p>
<ul>
<li>nowrap（默认值）：不换行</li>
<li>wrap：换行，第一行在下方</li>
<li>wrap-reverse：换行，第一行在上方</li>
</ul>
<p>默认情况是不换行，但这里也不会任由元素直接溢出容器，会涉及到元素的弹性伸缩</p>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>定义了项目在主轴上的对齐方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性对应如下：</p>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center：居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等</li>
<li>space-around：两个项目两侧间隔相等</li>
</ul>
<p>效果图如下：</p>
<p> <img src="https://static.vue-js.com/2d5ca950-9838-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>定义项目在交叉轴上如何对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性对应如下：</p>
<ul>
<li>flex-start：交叉轴的起点对齐</li>
<li>flex-end：交叉轴的终点对齐</li>
<li>center：交叉轴的中点对齐</li>
<li>baseline: 项目的第一行文字的基线对齐</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</li>
</ul>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性对应如吓：</p>
<ul>
<li>flex-start：与交叉轴的起点对齐</li>
<li>flex-end：与交叉轴的终点对齐</li>
<li>center：与交叉轴的中点对齐</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li>
<li>stretch（默认值）：轴线占满整个交叉轴</li>
</ul>
<p>效果图如下：</p>
<p> <img src="https://static.vue-js.com/39bcb0f0-9838-11eb-ab90-d9ae814b240d.png"></p>
<p>容器成员属性如下：</p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
<h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>上面讲到当容器设为<code>flex-wrap: nowrap;</code>不换行的时候，容器宽度有不够分的情况，弹性元素会根据<code>flex-grow</code>来决定</p>
<p>定义项目的放大比例（容器宽度&gt;元素总宽度时如何伸展）</p>
<p>默认为<code>0</code>，即如果存在剩余空间，也不放大</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）</p>
<p> <img src="https://static.vue-js.com/48c8c5c0-9838-11eb-ab90-d9ae814b240d.png"></p>
<p>如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍</p>
<p> <img src="https://static.vue-js.com/5b822b20-9838-11eb-ab90-d9ae814b240d.png"></p>
<p>弹性容器的宽度正好等于元素宽度总和，无多余宽度，此时无论<code>flex-grow</code>是什么值都不会生效</p>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>定义了项目的缩小比例（容器宽度&lt;元素总宽度时如何收缩），默认为1，即如果空间不足，该项目将缩小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小</p>
<p>如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小</p>
<p> <img src="https://static.vue-js.com/658c5be0-9838-11eb-85f6-6fac77c0c9b3.png"></p>
<p>在容器宽度有剩余时，<code>flex-shrink</code>也是不会生效的</p>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>设置的是元素在主轴上的初始尺寸，所谓的初始尺寸就是元素在<code>flex-grow</code>和<code>flex-shrink</code>生效前的尺寸</p>
<p>浏览器根据这个属性，计算主轴是否有多余空间，默认值为<code>auto</code>，即项目的本来大小，如设置了<code>width</code>则元素尺寸由<code>width/height</code>决定（主轴方向），没有设置则由内容决定</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当设置为0的是，会根据内容撑开</p>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间</p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>，也是比较难懂的一个复合属性</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一些属性有：</p>
<ul>
<li>flex: 1 = flex: 1 1 0%</li>
<li>flex: 2 = flex: 2 1 0%</li>
<li>flex: auto = flex: 1 1 auto</li>
<li>flex: none = flex: 0 0 auto，常用于固定尺寸不伸缩</li>
</ul>
<p><code>flex:1</code> 和 <code>flex:auto</code> 的区别，可以归结于<code>flex-basis:0</code>和<code>flex-basis:auto</code>的区别</p>
<p>当设置为0时（绝对弹性元素），此时相当于告诉<code>flex-grow</code>和<code>flex-shrink</code>在伸缩的时候不需要考虑我的尺寸</p>
<p>当设置为<code>auto</code>时（相对弹性元素），此时则需要在伸缩时将元素尺寸纳入考虑</p>
<p>注意：建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</p>
<p>默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p> <img src="https://static.vue-js.com/6f8304a0-9838-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>在以前的文章中，我们能够通过<code>flex</code>简单粗暴的实现元素水平垂直方向的居中，以及在两栏三栏自适应布局中通过<code>flex</code>完成，这里就不再展开代码的演示</p>
<p>包括现在在移动端、小程序这边的开发，都建议使用<code>flex</code>进行布局</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>flexbox</tag>
      </tags>
  </entry>
  <entry>
    <title>function_cache</title>
    <url>/archives/adb78c8a.html</url>
    <content><![CDATA[<h1 id="面试官：Javascript中如何实现函数缓存？函数缓存有哪些应用场景？"><a href="#面试官：Javascript中如何实现函数缓存？函数缓存有哪些应用场景？" class="headerlink" title="面试官：Javascript中如何实现函数缓存？函数缓存有哪些应用场景？"></a>面试官：Javascript中如何实现函数缓存？函数缓存有哪些应用场景？</h1><p> <img src="https://static.vue-js.com/2ae9dda0-85fa-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>函数缓存，就是将函数运算过的结果进行缓存</p>
<p>本质上就是用空间（缓存存储）换时间（计算过程）</p>
<p>常用于缓存数据计算结果和缓存对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line"><span class="keyword">const</span> calc = memoize(add); <span class="comment">// 函数缓存</span></span><br><span class="line">calc(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">// 30</span></span><br><span class="line">calc(<span class="number">10</span>,<span class="number">20</span>);<span class="comment">// 30 缓存</span></span><br></pre></td></tr></table></figure>

<p>缓存只是一个临时的数据存储，它保存数据，以便将来对该数据的请求能够更快地得到处理</p>
<h2 id="二、如何实现"><a href="#二、如何实现" class="headerlink" title="二、如何实现"></a>二、如何实现</h2><p>实现函数缓存主要依靠闭包、柯里化、高阶函数，这里再简单复习下：</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包可以理解成，函数 + 函数体内可访问的变量总和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line">        <span class="keyword">let</span> sum = b + a</span><br><span class="line">        <span class="built_in">console</span>.log(sum); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    add()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p><code>add </code>函数本身，以及其内部可访问的变量，即 <code>a = 1 </code>，这两个组合在⼀起就形成了闭包</p>
<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>把接受多个参数的函数转换成接受一个单一参数的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非函数柯里化</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">3</span>,<span class="number">4</span>) <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数柯里化</span></span><br><span class="line"><span class="keyword">var</span> add2 = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//**返回函数**</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">add2(<span class="number">3</span>)(<span class="number">4</span>) <span class="comment">//7</span></span><br></pre></td></tr></table></figure>

<p>将一个二元函数拆分成两个一元函数</p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>通过接收其他函数作为参数或返回其他函数的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz();<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p>函数 <code>foo</code> 如何返回另一个函数 <code>bar</code>，<code>baz</code> 现在持有对 <code>foo</code> 中定义的<code>bar</code> 函数的引用。由于闭包特性，<code>a</code>的值能够得到</p>
<p>下面再看看如何实现函数缓存，实现原理也很简单，把参数和对应的结果数据存在一个对象中，调用时判断参数对应的数据是否存在，存在就返回对应的结果数据，否则就返回计算结果</p>
<p>如下所示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoize = <span class="function"><span class="keyword">function</span> (<span class="params">func, content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  content = content || <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cache[key]) &#123;</span><br><span class="line">      cache[key] = func.apply(content, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用方式也很简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> calc = memoize(add);</span><br><span class="line"><span class="keyword">const</span> num1 = calc(<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line"><span class="keyword">const</span> num2 = calc(<span class="number">100</span>,<span class="number">200</span>) <span class="comment">// 缓存得到的结果</span></span><br></pre></td></tr></table></figure>

<p>过程分析：</p>
<ul>
<li>在当前函数作用域定义了一个空对象，用于缓存运行结果</li>
<li>运用柯里化返回一个函数，返回的函数由于闭包特性，可以访问到<code>cache</code></li>
<li>然后判断输入参数是不是在<code>cache</code>的中。如果已经存在，直接返回<code>cache</code>的内容，如果没有存在，使用函数<code>func</code>对输入参数求值，然后把结果存储在<code>cache</code>中</li>
</ul>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>虽然使用缓存效率是非常高的，但并不是所有场景都适用，因此千万不要极端的将所有函数都添加缓存</p>
<p>以下几种情况下，适合使用缓存：</p>
<ul>
<li>对于昂贵的函数调用，执行复杂计算的函数</li>
<li>对于具有有限且高度重复输入范围的函数</li>
<li>对于具有重复输入值的递归函数</li>
<li>对于纯函数，即每次使用特定输入调用时返回相同输出的函数</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/112505577">https://zhuanlan.zhihu.com/p/112505577</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>function_cache</tag>
      </tags>
  </entry>
  <entry>
    <title>functional_programming</title>
    <url>/archives/eab5cc79.html</url>
    <content><![CDATA[<h1 id="面试官：说说你对函数式编程的理解？优缺点？"><a href="#面试官：说说你对函数式编程的理解？优缺点？" class="headerlink" title="面试官：说说你对函数式编程的理解？优缺点？"></a>面试官：说说你对函数式编程的理解？优缺点？</h1><p> <img src="https://static.vue-js.com/ec0f6e80-8534-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>函数式编程是一种”编程范式”（programming paradigm），一种编写程序的方法论</p>
<p>主要的编程范式有三种：命令式编程，声明式编程和函数式编程</p>
<p>相比命令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而非设计一个复杂的执行过程</p>
<p>举个例子，将数组每个元素进行平方操作，命令式编程与函数式编程如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令式编程</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    array[i] = <span class="built_in">Math</span>.pow(array[i], <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式方式</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">num</span> =&gt;</span> <span class="built_in">Math</span>.pow(num, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>简单来讲，就是要把过程逻辑写成函数，定义好输入参数，只关心它的输出结果</p>
<p>即是一种描述集合和集合之间的转换关系，输入通过函数都会返回有且只有一个输出值</p>
<p> <img src="https://static.vue-js.com/f9f83900-8534-11eb-85f6-6fac77c0c9b3.png"></p>
<p>可以看到，函数实际上是一个关系，或者说是一种映射，而这种映射关系是可以组合的，一旦我们知道一个函数的输出类型可以匹配另一个函数的输入，那他们就可以进行组合</p>
<h2 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h2><h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><p>函数式编程旨在尽可能的提高代码的无状态性和不变性。要做到这一点，就要学会使用无副作用的函数，也就是纯函数</p>
<p>纯函数是对给定的输入返还相同输出的函数，并且要求你所有的数据都是不可变的，即纯函数=无状态+数据不可变</p>
<p> <img src="https://static.vue-js.com/04f50720-8535-11eb-ab90-d9ae814b240d.png"></p>
<p>举一个简单的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> double = <span class="function"><span class="params">value</span>=&gt;</span>value*<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>特性：</p>
<ul>
<li>函数内部传入指定的值，就会返回确定唯一的值</li>
<li>不会造成超出作用域的变化，例如修改全局变量或引用传递的参数</li>
</ul>
<p>优势：</p>
<ul>
<li>使用纯函数，我们可以产生可测试的代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&#x27;double(2) 等于 4&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(double(<span class="number">2</span>)).toBe(<span class="number">4</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>不依赖外部环境计算，不会产生副作用，提高函数的复用性</p>
</li>
<li><p>可读性更强 ，函数不管是否是纯函数  都会有一个语义化的名称，更便于阅读</p>
</li>
<li><p>可以组装成复杂任务的可能性。符合模块化概念及单一职责原则</p>
</li>
</ul>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>在我们的编程世界中，我们需要处理的其实也只有“数据”和“关系”，而关系就是函数</p>
<p>编程工作也就是在找一种映射关系，一旦关系找到了，问题就解决了，剩下的事情，就是让数据流过这种关系，然后转换成另一个数据，如下图所示</p>
<p> <img src="https://static.vue-js.com/104af1c0-8535-11eb-ab90-d9ae814b240d.png"></p>
<p>在这里，就是高阶函数的作用。高级函数，就是以函数作为输入或者输出的函数被称为高阶函数</p>
<p>通过高阶函数抽象过程，注重结果，如下面例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> forEach = <span class="function"><span class="keyword">function</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        fn(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">forEach(arr,<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面通过高阶函数 <code>forEach</code>来抽象循环如何做的逻辑，直接关注做了什么</p>
<p>高阶函数存在缓存的特性，主要是利用闭包作用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> once = <span class="function">(<span class="params">fn</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> done = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>,fn);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;该函数已经执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化是把一个多参数函数转化成一个嵌套的一元函数的过程</p>
<p>一个二元函数如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y;</span><br></pre></td></tr></table></figure>

<p>转化成柯里化函数如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fn(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myfn = curry(fn);</span><br><span class="line"><span class="built_in">console</span>.log( myfn(<span class="number">1</span>)(<span class="number">2</span>) );</span><br></pre></td></tr></table></figure>

<p>上面的<code>curry</code>函数只能处理二元情况，下面再来实现一个实现多参数的情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多参数柯里化；</span></span><br><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curriedFn</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(args.length&lt;fn.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> curriedFn(...args.concat([...arguments]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fn(...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">x,y,z,a</span>)=&gt;</span>x+y+z+a;</span><br><span class="line"><span class="keyword">const</span> myfn = curry(fn);</span><br><span class="line"><span class="built_in">console</span>.log(myfn(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>关于柯里化函数的意义如下：</p>
<ul>
<li>让纯函数更纯，每次接受一个参数，松散解耦</li>
<li>惰性执行</li>
</ul>
<h3 id="组合与管道"><a href="#组合与管道" class="headerlink" title="组合与管道"></a>组合与管道</h3><p>组合函数，目的是将多个函数组合成一个函数</p>
<p>举个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afn</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bfn</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b*<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">a,b</span>)=&gt;</span><span class="function"><span class="params">c</span>=&gt;</span>a(b(c));</span><br><span class="line"><span class="keyword">let</span> myfn =  compose(afn,bfn);</span><br><span class="line"><span class="built_in">console</span>.log( myfn(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>可以看到<code>compose</code>实现一个简单的功能：形成了一个新的函数，而这个函数就是一条从 <code>bfn -&gt; afn</code> 的流水线</p>
<p>下面再来看看如何实现一个多函数组合：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...fns</span>)=&gt;</span><span class="function"><span class="params">val</span>=&gt;</span>fns.reverse().reduce(<span class="function">(<span class="params">acc,fn</span>)=&gt;</span>fn(acc),val);</span><br></pre></td></tr></table></figure>

<p><code>compose</code>执行是从右到左的。而管道函数，执行顺序是从左到右执行的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pipe = <span class="function">(<span class="params">...fns</span>)=&gt;</span><span class="function"><span class="params">val</span>=&gt;</span>fns.reduce(<span class="function">(<span class="params">acc,fn</span>)=&gt;</span>fn(acc),val);</span><br></pre></td></tr></table></figure>

<p>组合函数与管道函数的意义在于：可以把很多小函数组合起来完成更复杂的逻辑</p>
<h2 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li><p>更好的管理状态：因为它的宗旨是无状态，或者说更少的状态，能最大化的减少这些未知、优化代码、减少出错情况</p>
</li>
<li><p>更简单的复用：固定输入-&gt;固定输出，没有其他外部变量影响，并且无副作用。这样代码复用时，完全不需要考虑它的内部实现和外部影响</p>
</li>
<li><p>更优雅的组合：往大的说，网页是由各个组件组成的。往小的说，一个函数也可能是由多个小函数组成的。更强的复用性，带来更强大的组合性</p>
</li>
<li><p>隐性好处。减少代码量，提高维护性</p>
</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li><p>性能：函数式编程相对于指令式编程，性能绝对是一个短板，因为它往往会对一个方法进行过度包装，从而产生上下文切换的性能开销</p>
</li>
<li><p>资源占用：在 JS 中为了实现对象状态的不可变，往往会创建新的对象，因此，它对垃圾回收所产生的压力远远超过其他编程方式</p>
</li>
<li><p>递归陷阱：在函数式编程中，为了实现迭代，通常会采用递归操作</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/81302150">https://zhuanlan.zhihu.com/p/81302150</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>functional_programming</tag>
      </tags>
  </entry>
  <entry>
    <title>grid</title>
    <url>/archives/2e20d937.html</url>
    <content><![CDATA[<h1 id="面试官：介绍一下grid网格布局"><a href="#面试官：介绍一下grid网格布局" class="headerlink" title="面试官：介绍一下grid网格布局"></a>面试官：介绍一下grid网格布局</h1><p> <img src="https://static.vue-js.com/4d73e3d0-9a94-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>Grid</code> 布局即网格布局，是一个二维的布局方式，由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列</p>
<p>擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系</p>
<p> <img src="https://static.vue-js.com/59680a40-9a94-11eb-85f6-6fac77c0c9b3.png"></p>
<p>这与之前讲到的<code>flex</code>一维布局不相同</p>
<p>设置<code>display:grid/inline-grid</code>的元素就是网格布局容器，这样就能出发浏览器渲染引擎的网格布局算法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;sub-item&quot;</span>&gt;</span>&lt;/p &gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> </span><br></pre></td></tr></table></figure>

<p>上述代码实例中，<code>.container</code>元素就是网格布局容器，<code>.item</code>元素就是网格的项目，由于网格元素只能是容器的顶层子元素，所以<code>p</code>元素并不是网格元素</p>
<p>这里提一下，网格线概念，有助于下面对<code>grid-column</code>系列属性的理解</p>
<p>网格线，即划分网格的线，如下图所示：</p>
<p> <img src="https://static.vue-js.com/61be7080-9a94-11eb-ab90-d9ae814b240d.png"></p>
<p>上图是一个 2 x 3 的网格，共有3根水平网格线和4根垂直网格线</p>
<h2 id="二、属性"><a href="#二、属性" class="headerlink" title="二、属性"></a>二、属性</h2><p>同样，<code>Grid</code> 布局属性可以分为两大类：</p>
<ul>
<li>容器属性，</li>
<li>项目属性</li>
</ul>
<p>关于容器属性有如下：</p>
<h3 id="display-属性"><a href="#display-属性" class="headerlink" title="display 属性"></a>display 属性</h3><p>文章开头讲到，在元素上设置<code>display：grid</code> 或 <code>display：inline-grid</code> 来创建一个网格容器</p>
<ul>
<li><p>display：grid 则该容器是一个块级元素</p>
</li>
<li><p>display: inline-grid 则容器元素为行内元素</p>
</li>
</ul>
<h3 id="grid-template-columns-属性，grid-template-rows-属性"><a href="#grid-template-columns-属性，grid-template-rows-属性" class="headerlink" title="grid-template-columns 属性，grid-template-rows 属性"></a>grid-template-columns 属性，grid-template-rows 属性</h3><p><code>grid-template-columns</code> 属性设置列宽，<code>grid-template-rows</code> 属性设置行高</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/*  声明了三列，宽度分别为 200px 200px 200px */</span></span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">200px</span> <span class="number">200px</span> <span class="number">200px</span>;</span><br><span class="line">  grid-gap: <span class="number">5px</span>;</span><br><span class="line">  <span class="comment">/*  声明了两行，行高分别为 50px 50px  */</span></span><br><span class="line">  grid-template-rows: <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上表示固定列宽为 200px 200px 200px，行高为 50px 50px</p>
<p>上述代码可以看到重复写单元格宽高，通过使用<code>repeat()</code>函数，可以简写重复的值</p>
<ul>
<li>第一个参数是重复的次数</li>
<li>第二个参数是重复的值</li>
</ul>
<p>所以上述代码可以简写成</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">200px</span>);</span><br><span class="line">  grid-gap: <span class="number">5px</span>;</span><br><span class="line">  grid-template-rows:<span class="built_in">repeat</span>(<span class="number">2</span>,<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了上述的<code>repeact</code>关键字，还有：</p>
<ul>
<li>auto-fill：示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格</li>
</ul>
<blockquote>
<p><code>grid-template-columns: repeat(auto-fill, 200px)</code> 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素</p>
</blockquote>
<ul>
<li>fr：片段，为了方便表示比例关系</li>
</ul>
<blockquote>
<p><code>grid-template-columns: 200px 1fr 2fr</code> 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3</p>
</blockquote>
<ul>
<li>minmax：产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中。第一个参数就是最小值，第二个参数就是最大值</li>
</ul>
<blockquote>
<p><code>minmax(100px, 1fr)</code>表示列宽不小于<code>100px</code>，不大于<code>1fr</code></p>
</blockquote>
<ul>
<li>auto：由浏览器自己决定长度</li>
</ul>
<blockquote>
<p><code>grid-template-columns: 100px auto 100px</code> 表示第一第三列为 100px，中间由浏览器决定长度</p>
</blockquote>
<h3 id="grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性"><a href="#grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性" class="headerlink" title="grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性"></a>grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性</h3><p><code>grid-row-gap</code> 属性、<code>grid-column-gap</code> 属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式</p>
<p><code>grid-row-gap: 10px</code> 表示行间距是 10px</p>
<p><code>grid-column-gap: 20px</code> 表示列间距是 20px</p>
<p><code>grid-gap: 10px 20px</code> 等同上述两个属性</p>
<h3 id="grid-template-areas-属性"><a href="#grid-template-areas-属性" class="headerlink" title="grid-template-areas 属性"></a>grid-template-areas 属性</h3><p>用于定义区域，一个区域由一个或者多个单元格组成</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-rows: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-areas: <span class="string">&#x27;a b c&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;d e f&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;g h i&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码先划分出9个单元格，然后将其定名为<code>a</code>到<code>i</code>的九个区域，分别对应这九个单元格。</p>
<p>多个单元格合并成一个区域的写法如下</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-areas: <span class="string">&#x27;a a a&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;b b b&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;c c c&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码将9个单元格分成<code>a</code>、<code>b</code>、<code>c</code>三个区域</p>
<p>如果某些区域不需要利用，则使用”点”（<code>.</code>）表示</p>
<h3 id="grid-auto-flow-属性"><a href="#grid-auto-flow-属性" class="headerlink" title="grid-auto-flow 属性"></a>grid-auto-flow 属性</h3><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。</p>
<p>顺序就是由<code>grid-auto-flow</code>决定，默认为行，代表”先行后列”，即先填满第一行，再开始放入第二行</p>
<p> <img src="https://static.vue-js.com/70fb3240-9a94-11eb-ab90-d9ae814b240d.png"></p>
<p>当修改成<code>column</code>后，放置变为如下：</p>
<p><img src="https://static.vue-js.com/7c26ffa0-9a94-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="justify-items-属性，-align-items-属性，-place-items-属性"><a href="#justify-items-属性，-align-items-属性，-place-items-属性" class="headerlink" title="justify-items 属性， align-items 属性， place-items 属性"></a>justify-items 属性， align-items 属性， place-items 属性</h3><p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右），<code>align-items</code> 属性设置单元格的垂直位置（上中下）</p>
<p>两者属性的值完成相同</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  justify-items: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性对应如下：</p>
<ul>
<li>start：对齐单元格的起始边缘</li>
<li>end：对齐单元格的结束边缘</li>
<li>center：单元格内部居中</li>
<li>stretch：拉伸，占满单元格的整个宽度（默认值）</li>
</ul>
<p><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式</p>
<h3 id="justify-content-属性，-align-content-属性，-place-content-属性"><a href="#justify-content-属性，-align-content-属性，-place-content-属性" class="headerlink" title="justify-content 属性， align-content 属性， place-content 属性"></a>justify-content 属性， align-content 属性， place-content 属性</h3><p><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code>属性是整个内容区域的垂直位置（上中下）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个属性的写法完全相同，都可以取下面这些值：</p>
<ul>
<li>start - 对齐容器的起始边框</li>
<li>end - 对齐容器的结束边框</li>
<li>center - 容器内部居中</li>
</ul>
<p> <img src="https://static.vue-js.com/9d1ec990-9a94-11eb-ab90-d9ae814b240d.png"></p>
<ul>
<li><p>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍</p>
</li>
<li><p>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔</p>
</li>
<li><p>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</p>
</li>
<li><p>stretch - 项目大小没有指定时，拉伸占据整个网格容器</p>
</li>
</ul>
<p> <img src="https://static.vue-js.com/a620b210-9a94-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="grid-auto-columns-属性和-grid-auto-rows-属性"><a href="#grid-auto-columns-属性和-grid-auto-rows-属性" class="headerlink" title="grid-auto-columns 属性和 grid-auto-rows 属性"></a>grid-auto-columns 属性和 grid-auto-rows 属性</h3><p>有时候，一些项目的指定位置，在现有网格的外部，就会产生显示网格和隐式网格</p>
<p>比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。超出的部分就是隐式网格</p>
<p>而<code>grid-auto-rows</code>与<code>grid-auto-columns</code>就是专门用于指定隐式网格的宽高</p>
<p>关于项目属性，有如下：</p>
<h3 id="grid-column-start-属性、grid-column-end-属性、grid-row-start-属性以及grid-row-end-属性"><a href="#grid-column-start-属性、grid-column-end-属性、grid-row-start-属性以及grid-row-end-属性" class="headerlink" title="grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性"></a>grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性</h3><p>指定网格项目所在的四个边框，分别定位在哪根网格线，从而指定项目的位置</p>
<ul>
<li>grid-column-start 属性：左边框所在的垂直网格线</li>
<li>grid-column-end 属性：右边框所在的垂直网格线</li>
<li>grid-row-start 属性：上边框所在的水平网格线</li>
<li>grid-row-end 属性：下边框所在的水平网格线</li>
</ul>
<p>举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">        grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        grid-template-rows: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item-1</span> &#123;</span></span><br><span class="line"><span class="css">        grid-column-start: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">        grid-column-end: <span class="number">4</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过设置<code>grid-column</code>属性，指定1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线</p>
<p> <img src="https://static.vue-js.com/b7925530-9a94-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="grid-area-属性"><a href="#grid-area-属性" class="headerlink" title="grid-area 属性"></a>grid-area 属性</h3><p><code>grid-area</code> 属性指定项目放在哪一个区域</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-area: e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意思为将1号项目位于<code>e</code>区域</p>
<p>与上述讲到的<code>grid-template-areas</code>搭配使用</p>
<h3 id="justify-self-属性、align-self-属性以及-place-self-属性"><a href="#justify-self-属性、align-self-属性以及-place-self-属性" class="headerlink" title="justify-self 属性、align-self 属性以及 place-self 属性"></a>justify-self 属性、align-self 属性以及 place-self 属性</h3><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。</p>
<p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  justify-self: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个属性都可以取下面四个值。</p>
<ul>
<li>start：对齐单元格的起始边缘。</li>
<li>end：对齐单元格的结束边缘。</li>
<li>center：单元格内部居中。</li>
<li>stretch：拉伸，占满单元格的整个宽度（默认值）</li>
</ul>
<h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><p>文章开头就讲到，<code>Grid</code>是一个强大的布局，如一些常见的 CSS 布局，如居中，两列布局，三列布局等等是很容易实现的，在以前的文章中，也有使用<code>Grid</code>布局完成对应的功能</p>
<p>关于兼容性问题，结果如下：</p>
<p> <img src="https://static.vue-js.com/c24a2b10-9a94-11eb-85f6-6fac77c0c9b3.png"></p>
<p>总体兼容性还不错，但在 IE 10 以下不支持</p>
<p>目前，<code>Grid</code>布局在手机端支持还不算太友好</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></li>
<li><a href="https://juejin.cn/post/6854573220306255880#heading-2">https://juejin.cn/post/6854573220306255880#heading-2</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>hide_attributes</title>
    <url>/archives/3f038ede.html</url>
    <content><![CDATA[<h1 id="面试官：css中，有哪些方式可以隐藏页面元素？区别"><a href="#面试官：css中，有哪些方式可以隐藏页面元素？区别" class="headerlink" title="面试官：css中，有哪些方式可以隐藏页面元素？区别?"></a>面试官：css中，有哪些方式可以隐藏页面元素？区别?</h1><p><img src="https://static.vue-js.com/ccf96f50-929a-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在平常的样式排版中，我们经常遇到将某个模块隐藏的场景</p>
<p>通过<code>css</code>隐藏元素的方法有很多种，它们看起来实现的效果是一致的</p>
<p>但实际上每一种方法都有一丝轻微的不同，这些不同决定了在一些特定场合下使用哪一种方法</p>
<h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>通过<code>css</code>实现隐藏元素方法有如下：</p>
<ul>
<li>display:none</li>
<li>visibility:hidden</li>
<li>opacity:0</li>
<li>设置height、width模型属性为0</li>
<li>position:absolute</li>
<li>clip-path</li>
</ul>
<h3 id="display-none"><a href="#display-none" class="headerlink" title="display:none"></a>display:none</h3><p>设置元素的<code>display</code>为<code>none</code>是最常用的隐藏元素的方法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将元素设置为<code>display:none</code>后，元素在页面上将彻底消失</p>
<p>元素本身占有的空间就会被其他元素占有，也就是说它会导致浏览器的重排和重绘</p>
<p>消失后，自身绑定的事件不会触发，也不会有过渡效果</p>
<p>特点：元素不可见，不占据空间，无法响应点击事件</p>
<h3 id="visibility-hidden"><a href="#visibility-hidden" class="headerlink" title="visibility:hidden"></a>visibility:hidden</h3><p>设置元素的<code>visibility</code>为<code>hidden</code>也是一种常用的隐藏元素的方法</p>
<p>从页面上仅仅是隐藏该元素，DOM结果均会存在，只是当时在一个不可见的状态，不会触发重排，但是会触发重绘</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hidden</span>&#123;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给人的效果是隐藏了，所以他自身的事件不会触发</p>
<p>特点：元素不可见，占据页面空间，无法响应点击事件</p>
<h3 id="opacity-0"><a href="#opacity-0" class="headerlink" title="opacity:0"></a>opacity:0</h3><p><code>opacity</code>属性表示元素的透明度，将元素的透明度设置为0后，在我们用户眼中，元素也是隐藏的</p>
<p>不会引发重排，一般情况下也会引发重绘</p>
<blockquote>
<p>如果利用 animation 动画，对 opacity 做变化（animation会默认触发GPU加速），则只会触发 GPU 层面的 composite，不会触发重绘</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transparent</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于其仍然是存在于页面上的，所以他自身的的事件仍然是可以触发的，但被他遮挡的元素是不能触发其事件的</p>
<p>需要注意的是：其子元素不能设置opacity来达到显示的效果</p>
<p>特点：改变元素透明度，元素不可见，占据页面空间，可以响应点击事件</p>
<h3 id="设置height、width属性为0"><a href="#设置height、width属性为0" class="headerlink" title="设置height、width属性为0"></a>设置height、width属性为0</h3><p>将元素的<code>margin</code>，<code>border</code>，<code>padding</code>，<code>height</code>和<code>width</code>等影响元素盒模型的属性设置成0，如果元素内有子元素或内容，还应该设置其<code>overflow:hidden</code>来隐藏其子元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hiddenBox</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;     </span><br><span class="line">    <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：元素不可见，不占据页面空间，无法响应点击事件</p>
<h3 id="position-absolute"><a href="#position-absolute" class="headerlink" title="position:absolute"></a>position:absolute</h3><p>将元素移出可视区域</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: -<span class="number">9999px</span>;</span><br><span class="line">   <span class="attribute">left</span>: -<span class="number">9999px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：元素不可见，不影响页面布局</p>
<h3 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a>clip-path</h3><p>通过裁剪的形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0px</span> <span class="number">0px</span>,<span class="number">0px</span> <span class="number">0px</span>,<span class="number">0px</span> <span class="number">0px</span>,<span class="number">0px</span> <span class="number">0px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：元素不可见，占据页面空间，无法响应点击事件</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>最常用的还是<code>display:none</code>和<code>visibility:hidden</code>，其他的方式只能认为是奇招，它们的真正用途并不是用于隐藏元素，所以并不推荐使用它们</p>
<h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p>关于<code>display: none</code>、<code>  visibility: hidden</code>、<code>opacity: 0</code>的区别，如下表所示：</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">display: none</th>
<th align="left">visibility: hidden</th>
<th>opacity: 0</th>
</tr>
</thead>
<tbody><tr>
<td align="left">页面中</td>
<td align="left">不存在</td>
<td align="left">存在</td>
<td>存在</td>
</tr>
<tr>
<td align="left">重排</td>
<td align="left">会</td>
<td align="left">不会</td>
<td>不会</td>
</tr>
<tr>
<td align="left">重绘</td>
<td align="left">会</td>
<td align="left">会</td>
<td>不一定</td>
</tr>
<tr>
<td align="left">自身绑定事件</td>
<td align="left">不触发</td>
<td align="left">不触发</td>
<td>可触发</td>
</tr>
<tr>
<td align="left">transition</td>
<td align="left">不支持</td>
<td align="left">支持</td>
<td>支持</td>
</tr>
<tr>
<td align="left">子元素可复原</td>
<td align="left">不能</td>
<td align="left">能</td>
<td>不能</td>
</tr>
<tr>
<td align="left">被遮挡的元素可触发事件</td>
<td align="left">能</td>
<td align="left">能</td>
<td>不能</td>
</tr>
</tbody></table>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.cnblogs.com/a-cat/p/9039962.html">https://www.cnblogs.com/a-cat/p/9039962.html</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>hide_attributes</tag>
      </tags>
  </entry>
  <entry>
    <title>hots</title>
    <url>/archives/1e021099.html</url>
    <content><![CDATA[<p>[hint]你的无畏，来自你的未知[/hint]</p>
<hr>
<ol>
<li>一、Trident内核代表产品Internet Explorer，又称其为IE内核。Trident（又称为MSHTML），是微软开发的一种排版引擎。使用Trident渲染引擎的浏览器包括：IE、傲游、世界之窗浏览器、Avant、腾讯TT、Netscape 8、NetCaptor、Sleipnir、GOSURF、GreenBrowser和KKman等。</li>
<li> 二、Gecko内核代表作品Mozilla FirefoxGecko是一套开放源代码的、以C++编写的网页排版引擎。Gecko是最流行的排版引擎之一，仅次于Trident。使用它的最著名浏览器有Firefox、Netscape6至9。</li>
<li>三、WebKit内核代表作品Safari、Chromewebkit 是一个开源项目，包含了来自KDE项目和苹果公司的一些组件，主要用于Mac OS系统，它的特点在于源码结构清晰、渲染速度极快。缺点是对网页代码的兼容性不高，导致一些编写不标准的网页无法正常显示。主要代表作品有Safari和Google的浏览器Chrome。</li>
<li>四、Presto内核代表作品OperaPresto是由Opera Software开发的浏览器排版引擎，供Opera 7.0及以上使用。它取代了旧版Opera 4至6版本使用的Elektra排版引擎，包括加入动态功能，例如网页或其部分可随着DOM及Script语法的事件而重新排版</li>
<li>-moz代表firefox浏览器私有属性-ms代表IE浏览器私有属性</li>
<li>-webkit代表chrome、safari私有属性 IE使用的是Trident内核，Firefox 使用的是Gecko内核。目前使用IE内核的浏览器还有搜狗，遨游，360等等。</li>
<li>表单作用：为了收集用户信息，如登录、注册、搜索。</li>
<li>表单标记有文本框、密码框、单选框、多选框、下拉框、多行文本框、上传按钮、隐藏表单、提交按钮、重置按钮、图片提交按钮、普通按钮。</li>
<li>table是html的表格标签，和表单标记没有关系</li>
<li>拖放<br>拖放是一种常见的特性，即抓取对象以后拖到另一个位置。</li>
</ol>
<p>在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。<br>首先，为了使元素可拖动，把 draggable 属性设置为 true<br>拖动什么 - ondragstart<br>放到何处 - ondragover<br>ondragover 事件规定在何处放置被拖动的数据。</p>
<p>进行放置 - ondrop<br>当放置被拖数据时，会发生 drop 事件</p>
<hr>
<ol>
<li>参数是scroll时候，必会出现滚动条。<br>参数是auto时候，子元素内容大于父元素时出现滚动条。<br>参数是visible时候，溢出的内容出现在父元素之外。<br>参数是hidden时候，溢出隐藏。</li>
<li><!DOCTYPE> 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。</li>
<li>严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行。在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。</li>
<li>DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。</li>
</ol>
<hr>
<p>1.效果<br>border-style:none;//无边框<br>border-width:0;//边框宽度为0px<br>2.区别<br>（1）性能差异<br>border:0;浏览器对border-width、border-color进行渲染，占用内存。<br>border:none;浏览器不进行渲染，不占用内存。<br>Chrome：<br>border:none;&gt;&gt; border:initial none initial;<br>border:0;&gt;&gt; border:0 initial  initial ;<br>Firefox、360：<br>border:none; &gt;&gt;border:medium none;<br>border:0;&gt;&gt; border:0 none;<br>计算出的样式：<br>border:0px none 元素color属性值;<br>（2）浏览器兼容<br>IE7-不支持border:none;<br>W3C提示：请始终把border-style属性声明到border-color属性之前，元素必须在改变颜色之前获得边框。</p>
<hr>
<p>CSS Sprites<br>1.简介<br>CSS Sprites在国内很多人叫css精灵，是一种网页图片应用处理方式。它允许将一个页面涉及到的所有零星图片都包含到一张大图中， 利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位， 访问页面时避免图片载入缓慢的现象。<br>2.优点<br>（1）CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；<br>（2）CSS Sprites能减少图片的字节；<br>（3）CSS Sprites解决了网页设计师在图片命名上的困扰，只需对一张集合的图片命名，不需要对每一个小图片进行命名，从而提高了网页制作效率。<br>（4）CSS Sprites只需要修改一张或少张图片的颜色或样式来改变整个网页的风格。<br>3.缺点<br>（1）图片合并麻烦：图片合并时，需要把多张图片有序的合理的合并成一张图片，并留好足够的空间防止版块出现不必要的背景。<br>（2）图片适应性差：在高分辨的屏幕下自适应页面，若图片不够宽会出现背景断裂。<br>（3）图片定位繁琐：开发时需要通过工具测量计算每个背景单元的精确位置。<br>（4）可维护性差：页面背景需要少许改动，可能要修改部分或整张已合并的图片，进而要改动css。在避免改动图片的前提下，又只能（最好）往下追加图片，但这样增加了图片字节。</p>
<hr>
<p>alt 就是图片不出来时，显示的文本。即 提供替代图片的信息，使屏幕阅读器能获取到关于图片的信息<br>title是鼠标一上去之后显示的文本</p>
<hr>
<p>在CSS中，html中的标签元素大体被分为三种不同的类型： 块状元素、内联元素(又叫行内元素)和内联块状元素。 </p>
<p>常用的块状元素有：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">h1</span>&gt;</span>…<span class="tag">&lt;<span class="name">h6</span>&gt;</span>、<span class="tag">&lt;<span class="name">ol</span>&gt;</span>、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>、<span class="tag">&lt;<span class="name">dl</span>&gt;</span>、<span class="tag">&lt;<span class="name">table</span>&gt;</span>、<span class="tag">&lt;<span class="name">address</span>&gt;</span>、<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> 、<span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"> 什么是块级元素？ </span><br><span class="line">在html中<span class="tag">&lt;<span class="name">div</span>&gt;</span>、<span class="tag">&lt;<span class="name">p</span>&gt;</span>、<span class="tag">&lt;<span class="name">h1</span>&gt;</span>、<span class="tag">&lt;<span class="name">form</span>&gt;</span>、<span class="tag">&lt;<span class="name">ul</span>&gt;</span>和<span class="tag">&lt;<span class="name">li</span>&gt;</span>就是块级元素。设置display:block就是将元素显示为块级元素。如下代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点。 a&#123;display:block;&#125; </span><br><span class="line">块级元素特点：</span><br><span class="line"> 1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）;</span><br><span class="line"> 2、元素的高度、宽度、行高以及顶和底边距都可设置。</span><br><span class="line"> 3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。 </span><br><span class="line"></span><br><span class="line">常用的内联元素有： </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>、<span class="tag">&lt;<span class="name">span</span>&gt;</span>、<span class="tag">&lt;<span class="name">br</span>&gt;</span>、<span class="tag">&lt;<span class="name">i</span>&gt;</span>、<span class="tag">&lt;<span class="name">em</span>&gt;</span>、<span class="tag">&lt;<span class="name">strong</span>&gt;</span>、<span class="tag">&lt;<span class="name">label</span>&gt;</span>、<span class="tag">&lt;<span class="name">q</span>&gt;</span>、<span class="tag">&lt;<span class="name">var</span>&gt;</span>、<span class="tag">&lt;<span class="name">cite</span>&gt;</span>、<span class="tag">&lt;<span class="name">code</span>&gt;</span> 在html中，<span class="tag">&lt;<span class="name">span</span>&gt;</span>、<span class="tag">&lt;<span class="name">a</span>&gt;</span>、<span class="tag">&lt;<span class="name">label</span>&gt;</span>、<span class="tag">&lt;<span class="name">strong</span>&gt;</span> 和<span class="tag">&lt;<span class="name">em</span>&gt;</span>就是典型的内联元素（行内元素）（inline）元素。</span><br><span class="line">当然块状元素也可以通过代码display:inline将元素设置为内联元素。如下代码就是将块状元素div转换为内联元素，从而使div 元素具有内联元素特点。</span><br><span class="line"> div&#123; display:inline; &#125; ...... <span class="tag">&lt;<span class="name">div</span>&gt;</span>我要变成内联元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">内联元素特点： </span><br><span class="line">1、和其他元素都在一行上； </span><br><span class="line">2、元素的高度、宽度及顶部和底部边距不可设置； （这是答案^-^）</span><br><span class="line">3、元素的宽度就是它包含的文字或图片的宽度，不可改变。 </span><br><span class="line"></span><br><span class="line">常用的内联块状元素有：</span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span>&gt;</span>、<span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"> 内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码display:inline-block就是将元素设置为内联块状元素。</span><br><span class="line">inline-block 元素特点： </span><br><span class="line">1、和其他元素都在一行上； </span><br><span class="line">2、元素的高度、宽度、行高以及顶和底边距都可设置。</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
  </entry>
  <entry>
    <title>html</title>
    <url>/archives/1879f8e5.html</url>
    <content><![CDATA[<h2 id="html语法"><a href="#html语法" class="headerlink" title="html语法"></a>html语法</h2><div id="chakhsu" class="blog-title"></div> <script> var chakhsu = function (r) { function t() { return b[Math.floor(Math.random() * b.length)] } function e() { return String.fromCharCode(94 * Math.random() + 33) } function n(r) { for (var n = document.createDocumentFragment(), i = 0; r > i; i++) { var l = document.createElement("span"); l.textContent = e(), l.style.color = t(), n.appendChild(l) } return n } function i() { var t = o[c.skillI]; c.step ? c.step-- : (c.step = g, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : "forward" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = "backward", c.delay = a) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = "forward")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d) } /*以下内容自定义修改*/ var l = "这孩子，", o = ["或许可以用来煲汤。", ].map(function (r) { return r + "" }), a = 2, g = 1, s = 5, d = 75, b = ["rgb(110,64,170)", "rgb(150,61,179)", "rgb(191,60,175)", "rgb(228,65,157)", "rgb(254,75,131)", "rgb(255,94,99)", "rgb(255,120,71)", "rgb(251,150,51)", "rgb(226,183,47)", "rgb(198,214,60)", "rgb(175,240,91)", "rgb(127,246,88)", "rgb(82,246,103)", "rgb(48,239,130)", "rgb(29,223,163)", "rgb(26,199,194)", "rgb(35,171,216)", "rgb(54,140,225)", "rgb(76,110,219)", "rgb(96,84,200)"], c = {text: "", prefixP: -s, skillI: 0, skillP: 0, direction: "forward", delay: a, step: g}; i() }; chakhsu(document.getElementById('chakhsu')); </script> <div>


<p>
  <span class='gold'>svg 动图</span>
</p>

<style>
        .container {
            width: 200px;
            margin: 20px auto;
        }

        .yy {
            stroke-width: 1;
            stroke: #ff7700;
            animation: lineMove 3s ease-out infinite;
        }

        @keyframes lineMove {
            0% {
                stroke-dasharray: 0, 378;
            }

            50% {
                stroke-dasharray: 378, 378;
                fill: rgba(0, 0, 0, 0);
                opacity: 1;
            }

            100% {
                stroke-dasharray: 378, 378;
                fill: rgba(255, 119, 0, .5);
                opacity: 0;
            }
        }
      
    </style>
  <div class="container">
    <svg version="1.1" id="图层_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
        width="210" height="200" x="0px" y="0px" viewbox="0 0 100 100">
        <path class="yy" fill-rule="evenodd" clip-rule="evenodd" fill="none" d="M43.4,0.2c1.4,1.5,0.9,4,0.2,5.8c2-0.5,3.3-0.7,4.1-2.4
            c0.1,0.2,0.2,0.3,0.2,0.5c0.8,1.3-0.3,3.5,0.7,3.8c1.6,0.6,3.2,1.1,4.8,1.7c3.8-3.3,15.2-6,20.6-2.4c1.3,4.4,2.1,11.5,0.7,16.8
            c-0.6,1.6-1.3,3.2-1.9,4.8c-0.5,3,3.1,8.9,2.2,13.9c-1.4,7.4-6.1,11.1-8.9,15.8c5.3,1,9.1-3.1,16.3-1.7c10.3,2,18.4,13.5,10.6,24
            c-2.2,2.9-8.2,6.5-13.9,5.5c-3.1-0.5-7.2-1.5-10.6-0.7c-6.5,1.6-10.9,7.3-16.8,9.8c-1.9,0.8-7,1.4-9.1,0.2c-0.8-0.4-0.4-1.4-1.7-1.4
            c-1-0.1-6.3-0.3-7.2,0c-1.9,0.6-3.2,2.7-7.4,1.9c-7.7-1.5-12.8-11.4-12.7-20.9c-1,0.7-2.5,2-4.3,1.2c-0.4-0.2-0.8-0.5-1.2-0.7
            c-0.8-2.6,1.9-11,1.9-11c1.3-2.8,4.5-4.2,6.5-6.5c-0.2-0.2-0.5-0.3-0.7-0.5c-8.1-4-17.5-6.2-15.1-20.4c0.6-3,1.3-5.9,1.9-8.9
            C1.9,24.5-3.1,10.1,2.4,6.7c4.8-4.3,16.8,0.9,19.9,2.9c2.1-0.6,4.2-1.3,6.2-1.9c1.5-0.8,2.7-2.6,4.6-3.4C37.7,2.5,41.6,4.7,43.4,0.2
            z" />
    </svg>
    </div>

<!-- 按钮风格-->
  <p>
  <span class='label'>代码</span>
  </p>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.yy</span> &#123;</span></span><br><span class="line"><span class="css">    stroke-<span class="attribute">width</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">    stroke: <span class="number">#ff7700</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">animation</span>: lineMove <span class="number">3s</span> ease-out infinite;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="keyword">@keyframes</span> lineMove &#123;</span></span><br><span class="line"><span class="css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="css">      stroke-dasharray: <span class="number">0</span>, <span class="number">378</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="css">      stroke-dasharray: <span class="number">378</span>, <span class="number">378</span>;</span></span><br><span class="line"><span class="css">      fill: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="css">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="css">      stroke-dasharray: <span class="number">378</span>, <span class="number">378</span>;</span></span><br><span class="line"><span class="css">      fill: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">119</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;图层_1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;210&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x</span>=<span class="string">&quot;0px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y</span>=<span class="string">&quot;0px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">viewbox</span>=<span class="string">&quot;0 0 100 100&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;yy&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">d</span>=<span class="string">&quot;M43.4,0.2c1.4,1.5,0.9,4,0.2,5.8c2-0.5,3.3-0.7,4.1-2.4</span></span></span><br><span class="line"><span class="string"><span class="tag">            c0.1,0.2,0.2,0.3,0.2,0.5c0.8,1.3-0.3,3.5,0.7,3.8c1.6,0.6,3.2,1.1,4.8,1.7c3.8-3.3,15.2-6,20.6-2.4c1.3,4.4,2.1,11.5,0.7,16.8</span></span></span><br><span class="line"><span class="string"><span class="tag">            c-0.6,1.6-1.3,3.2-1.9,4.8c-0.5,3,3.1,8.9,2.2,13.9c-1.4,7.4-6.1,11.1-8.9,15.8c5.3,1,9.1-3.1,16.3-1.7c10.3,2,18.4,13.5,10.6,24</span></span></span><br><span class="line"><span class="string"><span class="tag">            c-2.2,2.9-8.2,6.5-13.9,5.5c-3.1-0.5-7.2-1.5-10.6-0.7c-6.5,1.6-10.9,7.3-16.8,9.8c-1.9,0.8-7,1.4-9.1,0.2c-0.8-0.4-0.4-1.4-1.7-1.4</span></span></span><br><span class="line"><span class="string"><span class="tag">            c-1-0.1-6.3-0.3-7.2,0c-1.9,0.6-3.2,2.7-7.4,1.9c-7.7-1.5-12.8-11.4-12.7-20.9c-1,0.7-2.5,2-4.3,1.2c-0.4-0.2-0.8-0.5-1.2-0.7</span></span></span><br><span class="line"><span class="string"><span class="tag">            c-0.8-2.6,1.9-11,1.9-11c1.3-2.8,4.5-4.2,6.5-6.5c-0.2-0.2-0.5-0.3-0.7-0.5c-8.1-4-17.5-6.2-15.1-20.4c0.6-3,1.3-5.9,1.9-8.9</span></span></span><br><span class="line"><span class="string"><span class="tag">            C1.9,24.5-3.1,10.1,2.4,6.7c4.8-4.3,16.8,0.9,19.9,2.9c2.1-0.6,4.2-1.3,6.2-1.9c1.5-0.8,2.7-2.6,4.6-3.4C37.7,2.5,41.6,4.7,43.4,0.2</span></span></span><br><span class="line"><span class="string"><span class="tag">            z&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>
  <span class='wram'>swiper 插件 </span>
</p>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">swiper 实现轮播图 只需更换图片，基本设置已有</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Swiper demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.css&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Demo styles --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-family</span>: Helvetica Neue, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.swiper-container</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.swiper-slide</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* Center slide text vertically */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: -ms-flexbox;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: -webkit-flex;</span></span><br><span class="line"><span class="css">        <span class="comment">/* display: flex; */</span></span></span><br><span class="line"><span class="css">        -webkit-box-pack: center;</span></span><br><span class="line"><span class="css">        -ms-<span class="attribute">flex</span>-pack: center;</span></span><br><span class="line"><span class="css">        -webkit-<span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        -webkit-box-align: center;</span></span><br><span class="line"><span class="css">        -ms-<span class="attribute">flex</span>-align: center;</span></span><br><span class="line"><span class="css">        -webkit-<span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">        <span class="comment">/* align-items: center; */</span></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.swiper-slide</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.swiper-container</span> &#123;</span></span><br><span class="line"><span class="css">        --swiper-theme-<span class="attribute">color</span>: <span class="number">#ff6600</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置Swiper风格 */</span></span></span><br><span class="line"><span class="css">        --swiper-navigation-<span class="attribute">color</span>: <span class="number">#00ff33</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 单独设置按钮颜色 */</span></span></span><br><span class="line"><span class="css">        --swiper-navigation-size: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置按钮大小 */</span></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/* &lt;!-- 第一个和最后一个slide隐藏按钮 --&gt; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.swiper-button-disabled</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Swiper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/nature-1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/nature-1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/nature-1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/nature-1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/nature-1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/nature-1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/nature-1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 左右箭头 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--左箭头。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--右箭头。如果放置在swiper-container外面，需要自定义样式。--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Add Pagination --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Initialize Swiper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> swiper = <span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">spaceBetween</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">autoplay</span>: <span class="literal">true</span>, <span class="comment">//开启定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">autoplay</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">delay</span>: <span class="number">1000</span>, <span class="comment">//1秒切换一次</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">disableOnInteraction</span>: <span class="literal">false</span> <span class="comment">/* 点击之后继续轮播 */</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">pauseOnMouseEnter</span>: <span class="literal">true</span> <span class="comment">/* 鼠标置于swiper时暂停自动切换，默认关闭此功能。 */</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 小圆点点击切换</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">pagination</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">el</span>: <span class="string">&quot;.swiper-pagination&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">clickable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 左右按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">navigation</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">nextEl</span>: <span class="string">&quot;.swiper-button-next&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">prevEl</span>: <span class="string">&quot;.swiper-button-prev&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 滑到最后一个slide时隐藏前进按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">on</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">slideChangeTransitionEnd</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">this</span>.isEnd) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.navigation.$nextEl.css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.navigation.$nextEl.css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;block&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 键盘控制 开启</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">keyboard</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//切换效果 翻转</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">effect</span>: <span class="string">&quot;flip&quot;</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// fade&quot;（淡入）</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// effect : &#x27;fade&#x27;,</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &quot;cube&quot;（方块）</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// effect: &#x27;cube&#x27;,</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &quot;coverflow&quot;（3d流）</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// effect: &#x27;coverflow&#x27;,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// slidesPerView: 3,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// centeredSlides: true,</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>inherit</title>
    <url>/archives/a0245a2a.html</url>
    <content><![CDATA[<h1 id="面试官：Javascript如何实现继承？"><a href="#面试官：Javascript如何实现继承？" class="headerlink" title="面试官：Javascript如何实现继承？"></a>面试官：Javascript如何实现继承？</h1><p><img src="https://static.vue-js.com/5d9c4450-72a3-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>继承（inheritance）是面向对象软件技术当中的一个概念。</p>
<p>如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”</p>
<ul>
<li>继承的优点</li>
</ul>
<p>继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码</p>
<p>在子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能</p>
<p>虽然<code>JavaScript</code>并不是真正的面向对象语言，但它天生的灵活性，使应用场景更加丰富</p>
<p>关于继承，我们举个形象的例子：</p>
<p>定义一个类（Class）叫汽车，汽车的属性包括颜色、轮胎、品牌、速度、排气量等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">color,speed</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color</span><br><span class="line">        <span class="built_in">this</span>.speed = speed</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由汽车这个类可以派生出“轿车”和“货车”两个类，在汽车的基础属性上，为轿车添加一个后备厢、给货车添加一个大货箱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 货车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">color,speed</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(color,speed)</span><br><span class="line">        <span class="built_in">this</span>.Container = <span class="literal">true</span> <span class="comment">// 货箱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样轿车和货车就是不一样的，但是二者都属于汽车这个类，汽车、轿车继承了汽车的属性，而不需要再次在“轿车”中定义汽车已经有的属性</p>
<p>在“轿车”继承“汽车”的同时，也可以重新定义汽车的某些属性，并重写或覆盖某些属性和方法，使其获得与“汽车”这个父类不同的属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">color,speed</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(color,speed)</span><br><span class="line">        <span class="built_in">this</span>.color = <span class="string">&quot;black&quot;</span> <span class="comment">//覆盖</span></span><br><span class="line">        <span class="built_in">this</span>.Container = <span class="literal">true</span> <span class="comment">// 货箱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这个例子中就能详细说明汽车、轿车以及卡车之间的继承关系</p>
<h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>下面给出<code>JavaScripy</code>常见的继承方式：</p>
<ul>
<li><p>原型链继承</p>
</li>
<li><p>构造函数继承（借助 call）</p>
</li>
<li><p>组合继承</p>
</li>
<li><p>原型式继承</p>
</li>
<li><p>寄生式继承</p>
</li>
<li><p>寄生组合式继承</p>
</li>
</ul>
<h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.name = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">   <span class="built_in">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.type = <span class="string">&#x27;child2&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> Child1.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">new</span> Child())</span><br></pre></td></tr></table></figure>

<p>上面代码看似没问题，实际存在潜在问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child2();</span><br><span class="line">s1.play.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1.play, s2.play); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<p>改变<code>s1</code>的<code>play</code>属性，会发现<code>s2</code>也跟着发生变化了，这是因为两个实例使用的是同一个原型对象，内存空间是共享的</p>
<h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><p>借助 <code>call </code>调用<code>Parent</code>函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Parent1.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.type = <span class="string">&#x27;child&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child);  <span class="comment">// 没问题</span></span><br><span class="line"><span class="built_in">console</span>.log(child.getName());  <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure>

<p>可以看到，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法</p>
<p>相比第一种原型链继承方式，父类的引用属性不会被共享，优化了第一种继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法</p>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>前面我们讲到两种继承方式，各有优缺点。组合继承则将前两种方式继承起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;parent3&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent3.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第二次调用 Parent3()</span></span><br><span class="line">    Parent3.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.type = <span class="string">&#x27;child3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次调用 Parent3()</span></span><br><span class="line">Child3.prototype = <span class="keyword">new</span> Parent3();</span><br><span class="line"><span class="comment">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class="line">Child3.prototype.constructor = Child3;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Child3();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Child3();</span><br><span class="line">s3.play.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s3.play, s4.play);  <span class="comment">// 不互相影响</span></span><br><span class="line"><span class="built_in">console</span>.log(s3.getName()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(s4.getName()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这种方式看起来就没什么问题，方式一和方式二的问题都解决了，但是从上面代码我们也可以看到<code> Parent3</code> 执行了两次，造成了多构造一次的性能开销</p>
<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>这里主要借助<code>Object.create</code>方法实现普通对象的继承</p>
<p>同样举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parent4 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;parent4&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line">    <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> person4 = <span class="built_in">Object</span>.create(parent4);</span><br><span class="line">  person4.name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">  person4.friends.push(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> person5 = <span class="built_in">Object</span>.create(parent4);</span><br><span class="line">  person5.friends.push(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(person4.name); <span class="comment">// tom</span></span><br><span class="line">  <span class="built_in">console</span>.log(person4.name === person4.getName()); <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(person5.name); <span class="comment">// parent4</span></span><br><span class="line">  <span class="built_in">console</span>.log(person4.friends); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br><span class="line">  <span class="built_in">console</span>.log(person5.friends); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;,&quot;jerry&quot;,&quot;lucy&quot;]</span></span><br></pre></td></tr></table></figure>

<p>这种继承方式的缺点也很明显，因为<code>Object.create </code>方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能</p>
<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>寄生式继承在上面继承基础上进行优化，利用这个浅拷贝的能力再进行增强，添加一些方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parent5 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;parent5&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line">    <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">original</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="built_in">Object</span>.create(original);</span><br><span class="line">    clone.getFriends = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.friends;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person5 = clone(parent5);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person5.getName()); <span class="comment">// parent5</span></span><br><span class="line"><span class="built_in">console</span>.log(person5.getFriends()); <span class="comment">// [&quot;p1&quot;, &quot;p2&quot;, &quot;p3&quot;]</span></span><br></pre></td></tr></table></figure>

<p>其优缺点也很明显，跟上面讲的原型式继承一样</p>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>寄生组合式继承，借助解决普通对象的继承问题的<code> Object.create</code> 方法，在前面几种继承方式的优缺点基础上进行改造，这也是所有继承方式里面相对最优的继承方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class="line">    child.prototype = <span class="built_in">Object</span>.create(parent.prototype);</span><br><span class="line">    child.prototype.constructor = child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;parent6&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">Parent6.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent6.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.friends = <span class="string">&#x27;child5&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clone(Parent6, Child6);</span><br><span class="line"></span><br><span class="line">Child6.prototype.getFriends = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.friends;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person6 = <span class="keyword">new</span> Child6();</span><br><span class="line"><span class="built_in">console</span>.log(person6); <span class="comment">//&#123;friends:&quot;child5&quot;,name:&quot;child5&quot;,play:[1,2,3],__proto__:Parent6&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(person6.getName()); <span class="comment">// parent6</span></span><br><span class="line"><span class="built_in">console</span>.log(person6.getFriends()); <span class="comment">// child5</span></span><br></pre></td></tr></table></figure>

<p>可以看到 person6 打印出来的结果，属性都得到了继承，方法也没问题</p>
<p>文章一开头，我们是使用<code>ES6</code> 中的<code>extends </code>关键字直接实现 <code>JavaScript </code>的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 原型方法</span></span><br><span class="line">  <span class="comment">// 即 Person.prototype.getName = function() &#123; &#125;</span></span><br><span class="line">  <span class="comment">// 下面可以简写为 getName() &#123;...&#125;</span></span><br><span class="line">  getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Person:&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamer</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</span></span><br><span class="line">    <span class="built_in">super</span>(name)</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> asuna = <span class="keyword">new</span> Gamer(<span class="string">&#x27;Asuna&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">asuna.getName() <span class="comment">// 成功访问到父类的方法</span></span><br></pre></td></tr></table></figure>

<p>利用<code>babel</code>工具进行转换，我们会发现<code>extends</code>实际采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>下面以一张图作为总结：</p>
<p> <img src="https://static.vue-js.com/0df74700-731c-11eb-ab90-d9ae814b240d.png"></p>
<p>通过<code>Object.create</code> 来划分不同的继承方式，最后的寄生式组合继承方式是通过组合继承改造之后的最优继承方式，而 <code>extends</code> 的语法糖和寄生组合继承的方式基本类似</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF">https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF</a></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>inherit</tag>
      </tags>
  </entry>
  <entry>
    <title>js_data_structure</title>
    <url>/archives/958c57b5.html</url>
    <content><![CDATA[<h1 id="面试官：说说你了解的js数据结构？"><a href="#面试官：说说你了解的js数据结构？" class="headerlink" title="面试官：说说你了解的js数据结构？"></a>面试官：说说你了解的js数据结构？</h1><h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><p>数据结构是计算机存储、组织数据的方式。<br>数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。</p>
<p>我们每天的编码中都会用到数据结构<br>数组是最简单的内存数据结构<br>下面是常见的数据结构：</p>
<ol>
<li>数组（Array）</li>
<li>栈（Stack）</li>
<li>队列（Queue）</li>
<li>链表（Linked List）</li>
<li>字典</li>
<li>散列表（Hash table）</li>
<li>树（Tree）</li>
<li>图（Graph）</li>
<li>堆（Heap）</li>
</ol>
<h2 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h2><p>数组是最最基本的数据结构，很多语言都内置支持数组。<br>数组是使用一块连续的内存空间保存数据，保存的数据的个数在分配内存的时候就是确定的。</p>
<p>在日常生活中，人们经常使用列表：待办事项列表、购物清单等。</p>
<p>而计算机程序也在使用列表，在下面的条件下，选择列表作为数据结构就显得尤为有用：<br>数据结构较为简单<br>不需要在一个长序列中查找元素，或者对其进行排序<br>反之，如果数据结构非常复杂，列表的作用就没有那么大了。</p>
<h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>栈是一种遵循后进先出（LIFO）原则的有序集合<br>在栈里，新元素都接近栈顶，旧元素都接近栈底。<br>每次加入新的元素和拿走元素都在顶部操作<br><img src="https://upload-images.jianshu.io/upload_images/13253432-ddcb884374470d2c?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"></p>
<h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p>队列是遵循先进先出（FIFO，也称为先来先服务）原则的一组有序的项<br>队列在尾部添加新元素，并从顶部移除元素<br>最新添加的元素必须排在队列的末尾<br><img src="https://upload-images.jianshu.io/upload_images/13253432-55ad7c7db40d3796?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp"></p>
<h2 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（Linked List）</h2><p>链表也是一种列表，已经设计了数组，为什么还需要链表呢？<br>JavaScript中数组的主要问题时，它们被实现成了对象，<br>与其他语言（比如C++和Java）的数组相对，效率很低。<br>如果你发现数组在实际使用时很慢，就可以考虑使用链表来代替它。</p>
<p>使用条件：<br>链表几乎可以用在任何可以使用一维数组的情况中。<br>如果需要随机访问，数组仍然是更好的选择。<br><img src="https://raw.githubusercontent.com/zoro-web/blog/master/img/lian.jpg"></p>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是一种以键-值对存储数据的数据结构，js中的Object类就是以字典的形式设计的。JavaScript可以通过实现字典类，让这种字典类型的对象使用起来更加简单，字典可以实现对象拥有的常见功能，并相应拓展自己想要的功能，而对象在JavaScript编写中随处可见，所以字典的作用也异常明显了。</p>
<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>也称为哈希表，特点是在散列表上插入、删除和取用数据都非常快。<br>为什么要设计这种数据结构呢？<br>用数组或链表存储数据，如果想要找到其中一个数据，需要从头进行遍历，因为不知道这个数据存储到了数组的哪个位置。</p>
<p>散列表在JavaScript中可以基础数组去进行设计。<br>数组的长度是预先设定的，所有元素根据和该元素对应的键，保存在数组的特定位置，这里的键和对象的键是类型的概念。<br>使用散列表存储数组时，通过一个散列函数将键映射为一个数字，这个数字的范围是0到散列表的长度。</p>
<p>即使使用一个高效的散列函数，依然存在将两个键映射为同一个值得可能，这种现象叫做碰撞。常见碰撞的处理方法有：开链法和线性探测法（具体概念有兴趣的可以网上自信了解）<br>使用条件：<br>可以用于数据的插入、删除和取用，不适用于查找数据<br><img src="https://raw.githubusercontent.com/zoro-web/blog/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170820211406.png"></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>js_data_structure</tag>
      </tags>
  </entry>
  <entry>
    <title>less</title>
    <url>/archives/d3b694df.html</url>
    <content><![CDATA[<p>[tag type=”primary” outline]官方介绍[/tag]</p>
<ul>
<li><strong>Less 是一门 CSS 预处理语言，</strong>它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。Less 可以运行在 Node 或浏览器端。</li>
<li><strong>Less是一门动态CSS语言，使得CSS样式更加灵活地作用于Html标签。</strong>试想如果没有Less，我们要对样式做一些逻辑计算的时候只能依靠Js去实现，有了Less之后，可以方便地动态给Html标签设置样式。比如一个最常见的需求，在当前浏览器的宽度小于500px的时候，给某一个div设置一个样式，使用less+css3就能很简单的解决问题。当然，这只是其中一个场景，less里面还能进行一些常见的条件和逻辑判断。总的来说，Less赋予了CSS逻辑运算的能力。</li>
<li><strong>除此之外，动态CSS语法还有一个重要的作用就是提高样式代码的可维护性。</strong>比如一个最简单的，我们可以定义一个全局的颜色变量@aaa:#222，系统里面所有的默认颜色用的@aaa来写的，这个时候如果需要修改这个全局颜色，我们只需要改下@aaa变量的值就好了，其他地方不用做任何修改，这点，作为编程人员应该很容易理解。</li>
</ul>
<hr>
<p>[tag type=”info” outline]维护css的弊端[/tag]</p>
<ol>
<li>css是一门非程序式语言，没有变量，函数，SCOPE（作用域）等概念。</li>
<li>css需要书写大量看似没有逻辑的代码，css的冗余度是比较高的。</li>
<li>不方便维护及扩展，不利于复用。</li>
<li>css没有很好的计算能力。</li>
<li>非前端工程师来讲，往往会因为缺少css变形经验而很难写出组织良好且易于维护的css代码项目。</li>
</ol>
<p>[tag type=”warn” outline]less变量[/tag]</p>
<ol>
<li>官网：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 定义一个粉色的变量</span><br><span class="line"><span class="keyword">@color</span>: pink;</span><br><span class="line">// 错误的变量名  <span class="keyword">@1color</span>   @<span class="attribute">color</span>~@#</span><br><span class="line">// 变量名区分大小写  @<span class="attribute">color</span>  和  @<span class="attribute">Color</span> 是两个不同的变量</span><br><span class="line">// 定义了一个 字体为<span class="number">14</span>像素的变量</span><br><span class="line">// 不能以数字开头，大小写不一致，</span><br><span class="line">@font14: <span class="number">14px</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: @color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: @aq;</span><br><span class="line">    <span class="attribute">font-size</span>: @font14;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: @font14;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>[tag outline]less编译[/tag]</p>
<ol>
<li>EASY less插件用来把less文件编译为css文件</li>
<li>优点：实时编译，css文件也会相应保存。</li>
<li>缺点：暂时没有发现，以后补充。</li>
</ol>
<hr>
<p>[tag type=”primary” outline]less嵌套[/tag]</p>
<ol>
<li>  less嵌套 子元素的样式直接写到父元素里面就好了 ==》儿子住在父母家</li>
<li> 如果有伪类、交集选择器、 伪元素选择器 我们内层选择器的前面需要加 &amp;</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">header</span>&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> href=&quot;#&quot;&gt;文字&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">nav</span>&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;logo&quot;&gt;传智播客&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;fa&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;sd&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    // <span class="number">1</span>. less嵌套 子元素的样式直接写到父元素里面就好了 ==》儿子住在父母家</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">// <span class="number">2</span>. 如果有伪类、交集选择器、 伪元素选择器 我们内层选择器的前面需要加 &amp;</span><br><span class="line">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;憨憨&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@aq</span>:aqua;</span><br><span class="line"><span class="selector-class">.fa</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="selector-class">.son</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>:@aq;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">background</span>: gold;</span><br><span class="line">        // 自身，此时hover写在son中</span><br><span class="line">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 此时hover。fa</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;憨憨&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fa</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fa</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: aqua;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fa</span> <span class="selector-class">.son</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fa</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<span id="more"></span>


<p>[tag type=”info” outline]less运算[/tag]</p>
<ol>
<li> 我们运算符的左右两侧必须敲一个空格隔开</li>
<li> 两个数参与运算  如果只有一个数有单位，则最后的结果就以这个单位为准</li>
<li> 两个数参与运算，如果2个数都有单位，而且不一样的单位 最后的结果以第一个单位为准</li>
<li>  ** 除法运算一定记得加扩号，否则编译后将会是两个变量。**</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@baseFont</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: @baseFont;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@border</span>: <span class="number">5px</span> + <span class="number">5</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span> - <span class="number">50</span>;</span><br><span class="line">    <span class="attribute">height</span>: (<span class="number">200px</span> + <span class="number">50px</span> ) * <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">border</span>: @border solid red;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#666</span> - <span class="number">#222</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">82rem</span> / @baseFont;</span><br><span class="line">    // 编译后结果： <span class="attribute">width</span>: <span class="number">82rem</span> / <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>:( <span class="number">82rem</span> / @baseFont);</span><br><span class="line">    // 编译后结果： <span class="attribute">height</span>: <span class="number">1.64rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span> + <span class="number">30</span>;</span><br><span class="line">    <span class="attribute">border</span>: @border - <span class="number">3</span> solid rebeccapurple;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">height</span>: (<span class="number">30px</span> - <span class="number">10</span>) * <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: @baseFont + <span class="number">2px</span>;</span><br><span class="line">        <span class="attribute">height</span>: (<span class="number">100px</span> / @baseFont);</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”warn” outline]less参数[/tag]</p>
<ul>
<li>当传递参数有默认值，形参没有默认值，会覆盖</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 居中<span class="number">2</span>  </span><br><span class="line"><span class="selector-class">.df</span>(<span class="keyword">@wi</span>, @hi) &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: @wi;</span><br><span class="line">    <span class="attribute">height</span>: @hi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当传递参数有默认值，形参没有默认值，会覆盖</span><br><span class="line"><span class="selector-class">.dfs</span>(<span class="keyword">@wis</span>: <span class="number">300px</span>, @<span class="attribute">his</span>: <span class="number">300px</span>) &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: @wis;</span><br><span class="line">    <span class="attribute">height</span>: @his;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="selector-class">.center</span>;</span><br><span class="line">    // 此参数会作为最终参数</span><br><span class="line">    <span class="selector-class">.df</span>(<span class="keyword">@wi</span>: <span class="number">366px</span>, @<span class="attribute">hi</span>: <span class="number">300px</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">color</span>: @aq;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.son</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">10</span>, <span class="number">134</span>, <span class="number">192</span>);</span><br><span class="line">        <span class="attribute">color</span>: @re;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        // <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">display</span>: table-cell;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">        // <span class="selector-class">.center</span>;</span><br><span class="line">        <span class="selector-class">.animate</span>(all, <span class="number">4s</span>);</span><br><span class="line"></span><br><span class="line">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: @aq;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">85</span>, <span class="number">6</span>, <span class="number">61</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>[tag type=”danger” outline]less插值[/tag]</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 插值 --&gt; css属性</span><br><span class="line"><span class="keyword">@w</span>: <span class="attribute">width</span>;</span><br><span class="line"><span class="keyword">@h</span>: <span class="attribute">height</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    @&#123;w&#125;: (<span class="number">100px</span> / <span class="number">2</span>) + <span class="number">10</span>;</span><br><span class="line">    @&#123;h&#125;: <span class="number">100px</span> + <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">background</span>: gold;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: @aq;</span><br><span class="line">        <span class="attribute">color</span>: goldenrod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;show&#x27;</span>;</span><br><span class="line">        <span class="attribute">color</span>: @re;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: red;</span><br><span class="line">        <span class="keyword">@ws</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="keyword">@hs</span>: <span class="number">30px</span>;</span><br><span class="line">        @&#123;w&#125;: @ws;</span><br><span class="line">        @&#123;h&#125;: @hs;</span><br><span class="line">        // 实现居中</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="built_in">-</span>(@ws / <span class="number">2</span>);</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="built_in">-</span>(@hs / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>[tag type=”success” outline=”1”]可变参数[/tag]</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 可变参数</span><br><span class="line">// <span class="selector-class">.animate</span> (<span class="keyword">@name</span>, @time, @mode, @delay) &#123;</span><br><span class="line">//     <span class="attribute">transition</span>: @arguments;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="selector-class">.animate</span> (...) &#123;</span><br><span class="line">//     <span class="attribute">transition</span>: @arguments;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 规定必须需要<span class="number">2</span>个 参数</span><br><span class="line"><span class="selector-class">.animate</span> (<span class="keyword">@name</span>, @time, ...) &#123;</span><br><span class="line">    <span class="attribute">transition</span>: @arguments;</span><br><span class="line">    // <span class="keyword">@arguments</span> 接受所有参数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">实列： .animate(all, <span class="number">3s</span>, );</span><br></pre></td></tr></table></figure>


<!--more-->

<p>[tag type=”info”]匹配模式[/tag]</p>
<ul>
<li> @-通用匹配模式</li>
<li> @- 表示匹配所有，只要调用了triangle,就会调用有@-的样式</li>
<li> 无论哪一个混合被匹配了，都会执行通用匹配模式的代码</li>
<li> 执行顺序：先执行通用匹配，在执行匹配模式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> (@-, @<span class="attribute">width</span>, @colors) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 匹配模式</span><br><span class="line">// 三角形</span><br><span class="line">// up</span><br><span class="line"><span class="selector-class">.triangle</span> (&#x27;up&#x27;, <span class="keyword">@width</span>, @colors) &#123;</span><br><span class="line">    // <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    // <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    // <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: @width;</span><br><span class="line">    <span class="attribute">border-color</span>: @colors transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="attribute">bottom</span></span><br><span class="line"><span class="selector-class">.triangle</span> (&#x27;<span class="attribute">bottom</span>&#x27;, <span class="keyword">@width</span>, @colors) &#123;</span><br><span class="line">    // <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    // <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    // <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: @width;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent @colors transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// <span class="attribute">left</span></span><br><span class="line"><span class="selector-class">.triangle</span> (&#x27;<span class="attribute">left</span>&#x27;, <span class="keyword">@width</span>, @colors) &#123;</span><br><span class="line">    // <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    // <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    // <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: @width;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent transparent @colors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="attribute">right</span></span><br><span class="line"><span class="selector-class">.triangle</span> (&#x27;<span class="attribute">right</span>&#x27;, <span class="keyword">@width</span>, @colors) &#123;</span><br><span class="line">    // <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    // <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    // <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: @width;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent @colors transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.delta</span> &#123;</span><br><span class="line">    // <span class="selector-class">.triangle</span>(&#x27;up&#x27;, <span class="number">40px</span>, gold);</span><br><span class="line">    // <span class="selector-class">.triangle</span>(&#x27;<span class="attribute">left</span>&#x27;, <span class="number">40px</span>, gold);</span><br><span class="line">    // <span class="selector-class">.triangle</span>(&#x27;<span class="attribute">right</span>&#x27;, <span class="number">40px</span>, gold);</span><br><span class="line">    <span class="selector-class">.triangle</span>(&#x27;<span class="attribute">bottom</span>&#x27;, <span class="number">40px</span>, gold);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>[tag type=”warn”]less继承[/tag]</p>
<ul>
<li><strong>版权声明：less继承为CSDN博主「Liekkas_BX」的原创文章。</strong></li>
<li>原文链接：<a href="https://blog.csdn.net/qq_19865749/article/details/52523178">https://blog.csdn.net/qq_19865749/article/details/52523178</a></li>
<li>一、Extend Syntax（语法）</li>
<li>说明：The extend is either attached to a selector or placed into a ruleset. It looks like a pseudoclass with selector parameter optionally followed by the keyword。</li>
<li>继承被附在选择器后面或放置在规则集（即具体定于样式处），它看起来就像是一个在关键字extend后具有可选参数的伪类（pseudoclass）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parentClass</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subClassOne</span>&#123;</span><br><span class="line">	&amp;:<span class="built_in">extend</span>(.parentClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subClassTwo</span>:<span class="built_in">extend</span>(.parentClass)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">编译为：</span><br><span class="line"><span class="selector-class">.parentClass</span>,</span><br><span class="line"><span class="selector-class">.subClassOne</span>,</span><br><span class="line"><span class="selector-class">.subClassTwo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>二、深入了解</p>
</li>
<li><p>除了上面的基本语法外，less继承也支持CSS 的选择器分组等更多用法。</p>
</li>
<li><p>1、继承嵌套（nested）选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">parentClass&#123;</span><br><span class="line">	<span class="selector-tag">span</span>&#123;</span><br><span class="line">		<span class="attribute">color</span>:red</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subClassOne</span>&#123;</span><br><span class="line">	&amp;:<span class="built_in">extend</span>(.parentClass span);</span><br><span class="line">&#125;</span><br><span class="line">编译为：</span><br><span class="line"><span class="selector-class">.parentClass</span> <span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-class">.subClassOne</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>2、精确匹配（exactly matching）</p>
</li>
<li><p>Less中，关键字extend里面的选择器必须与已定义的样式选择器严格一致，</p>
</li>
<li><p>如div .a{}样式只能通过extend（div .a）继承，而不能是extend（.a），尽管这两者在CSS中并没太多区别。例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span><span class="selector-class">.class</span>,</span><br><span class="line"><span class="selector-class">.class</span><span class="selector-class">.a</span>,</span><br><span class="line"><span class="selector-class">.class</span> &gt; <span class="selector-class">.a</span> &#123;</span><br><span class="line"> 	<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span>:<span class="built_in">extend</span>(.class) &#123;&#125; // this will NOT match the any selectors above</span><br><span class="line">编译将提示：extend &#x27;<span class="selector-class">.class</span>&#x27; has no matches错误。此外，通配符也不能用于此情况。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>3、extend的选择器替代问题</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@myClass</span>:.redColor;</span><br><span class="line"></span><br><span class="line">@&#123;myClass&#125;&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subClass</span>:<span class="built_in">extend</span>(.redColor)&#123;&#125;	//extend参考的选择器名在参考处为变量，错误</span><br><span class="line"><span class="selector-class">.subClass</span>:<span class="built_in">extend</span>(@&#123;myClass&#125;)&#123;&#125;	//extend内选择器名为变量，错误。</span><br><span class="line"><span class="keyword">@myClass</span>:extend(.class)&#123;&#125;		//不是上面两种情况，无错。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>4、媒体查询@media内的继承范围（scope）问题</p>
</li>
<li><p>同一个媒体查询（@media）内可被继承，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line"> 	<span class="selector-class">.screenClass</span>:<span class="built_in">extend</span>(.selector) &#123;&#125; // extend inside media</span><br><span class="line">  	<span class="selector-class">.selector</span> &#123; // this will be matched - it is in the same media</span><br><span class="line">    	<span class="attribute">color</span>: black;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.selector</span> &#123; // ruleset on <span class="attribute">top</span> of style sheet - extend ignores it</span><br><span class="line">  	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">  	<span class="selector-class">.selector</span> &#123;  // ruleset inside another media - extend ignores it</span><br><span class="line">    	<span class="attribute">color</span>: blue;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br><span class="line">编译为：</span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.selector</span>,</span><br><span class="line">  <span class="selector-class">.screenClass</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">  <span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">说明：并非内外部优先级问题，实际编译可知，若将媒体查询print内部的<span class="selector-class">.selector</span>去掉，仍然无法继承外部的<span class="selector-class">.selector</span>。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>5、Duplication（重复）问题</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class1</span>,<span class="selector-class">.class2</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class3</span>:<span class="built_in">extend</span>(.class1,.class2)&#123;&#125;</span><br><span class="line">注意：class1与class2是用逗号隔开，属于分组查询，所有不会有上面的第<span class="number">2</span>条。编译为：</span><br><span class="line"><span class="selector-class">.class1</span>,</span><br><span class="line"><span class="selector-class">.class2</span>,</span><br><span class="line"><span class="selector-class">.class3</span>,</span><br><span class="line"><span class="selector-class">.class3</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">可见继承于分组选择器将是每个都单独继承。对于此处class1与class2完全一样的情况，extend内只写一个即可，不存在匹配问题。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>继承实际上是将当前的选择器名以分组形式添加到被继承的选择器处，</li>
<li>所以当既有继承又有自身样式时，应注意被继承的选择器的位置。</li>
<li>情况一：被继承的选择器在前面<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parentClass</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subClass</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:blue;</span><br><span class="line">	&amp;:<span class="built_in">extend</span>(.parentClass);</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line">编译结果，与预期一致，使用了自身的特殊<span class="attribute">color</span>：</span><br><span class="line"><span class="selector-class">.parentClass</span>,</span><br><span class="line"><span class="selector-class">.subClass</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.subClass</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>情况二：被继承的选择器在后面<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.subClass</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:blue;</span><br><span class="line">	&amp;:<span class="built_in">extend</span>(.parentClass);</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parentClass</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">编译结果，因为位置原因，与预期不一致，此时此例中继承没达到目的：</span><br><span class="line"><span class="selector-class">.subClass</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parentClass</span>,</span><br><span class="line"><span class="selector-class">.subClass</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/lessa1.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/lessa2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/lessa3.png" alt="请输入图片描述"></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>layout_painting</title>
    <url>/archives/78ca6597.html</url>
    <content><![CDATA[<h1 id="面试官：怎么理解回流跟重绘？什么场景下会触发？"><a href="#面试官：怎么理解回流跟重绘？什么场景下会触发？" class="headerlink" title="面试官：怎么理解回流跟重绘？什么场景下会触发？"></a>面试官：怎么理解回流跟重绘？什么场景下会触发？</h1><p> <img src="https://static.vue-js.com/1ed5d340-9cdc-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>在<code>HTML</code>中，每个元素都可以理解成一个盒子，在浏览器解析过程中，会涉及到回流与重绘：</p>
<ul>
<li><p>回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置</p>
</li>
<li><p>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</p>
</li>
</ul>
<p>具体的浏览器解析渲染机制如下所示：</p>
<p> <img src="https://static.vue-js.com/2b56a950-9cdc-11eb-ab90-d9ae814b240d.png"></p>
<ul>
<li><p>解析HTML，生成DOM树，解析CSS，生成CSSOM树</p>
</li>
<li><p>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</p>
</li>
<li><p>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</p>
</li>
<li><p>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</p>
</li>
<li><p>Display:将像素发送给GPU，展示在页面上</p>
</li>
</ul>
<p>在页面初始渲染阶段，回流不可避免的触发，可以理解成页面一开始是空白的元素，后面添加了新的元素使页面布局发生改变</p>
<p>当我们对 <code>DOM</code> 的修改引发了 <code>DOM </code>几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来</p>
<p>当我们对 <code>DOM </code>的修改导致了样式的变化（<code>color</code>或<code>background-color</code>），却并未影响其几何属性时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式，这里就仅仅触发了重绘</p>
<h2 id="二、如何触发"><a href="#二、如何触发" class="headerlink" title="二、如何触发"></a>二、如何触发</h2><p>要想减少回流和重绘的次数，首先要了解回流和重绘是如何触发的</p>
<h3 id="回流触发时机"><a href="#回流触发时机" class="headerlink" title="回流触发时机"></a>回流触发时机</h3><p>回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流，如下面情况：</p>
<ul>
<li>添加或删除可见的DOM元素</li>
<li>元素的位置发生变化</li>
<li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li>
<li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代</li>
<li>页面一开始渲染的时候（这避免不了）</li>
<li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li>
</ul>
<p>还有一些容易被忽略的操作：获取一些特定属性的值</p>
<blockquote>
<p>offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight</p>
</blockquote>
<p>这些属性有一个共性，就是需要通过即时计算得到。因此浏览器为了获取这些值，也会进行回流</p>
<p>除此还包括<code>getComputedStyle </code>方法，原理是一样的</p>
<h3 id="重绘触发时机"><a href="#重绘触发时机" class="headerlink" title="重绘触发时机"></a>重绘触发时机</h3><p>触发回流一定会触发重绘</p>
<p>可以把页面理解为一个黑板，黑板上有一朵画好的小花。现在我们要把这朵从左边移到了右边，那我们要先确定好右边的具体位置，画好形状（回流），再画上它原有的颜色（重绘）</p>
<p>除此之外还有一些其他引起重绘行为：</p>
<ul>
<li><p>颜色的修改</p>
</li>
<li><p>文本方向的修改</p>
</li>
<li><p>阴影的修改</p>
</li>
</ul>
<h3 id="浏览器优化机制"><a href="#浏览器优化机制" class="headerlink" title="浏览器优化机制"></a>浏览器优化机制</h3><p>由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列</p>
<p>当你获取布局信息的操作的时候，会强制队列刷新，包括前面讲到的<code>offsetTop</code>等方法都会返回最新的数据</p>
<p>因此浏览器不得不清空队列，触发回流重绘来返回正确的值</p>
<h2 id="三、如何减少"><a href="#三、如何减少" class="headerlink" title="三、如何减少"></a>三、如何减少</h2><p>我们了解了如何触发回流和重绘的场景，下面给出避免回流的经验：</p>
<ul>
<li>如果想设定元素的样式，通过改变元素的 <code>class</code> 类名 (尽可能在 DOM 树的最里层)</li>
<li>避免设置多项内联样式</li>
<li>应用元素的动画，使用 <code>position</code> 属性的 <code>fixed</code> 值或 <code>absolute</code> 值(如前文示例所提)</li>
<li>避免使用 <code>table</code> 布局，<code>table</code> 中每个元素的大小以及内容的改动，都会导致整个 <code>table</code> 的重新计算</li>
<li>对于那些复杂的动画，对其设置 <code>position: fixed/absolute</code>，尽可能地使元素脱离文档流，从而减少对其他元素的影响</li>
<li>使用css3硬件加速，可以让<code>transform</code>、<code>opacity</code>、<code>filters</code>这些动画不会引起回流重绘</li>
<li>避免使用 CSS 的 <code>JavaScript</code> 表达式</li>
</ul>
<p>在使用 <code>JavaScript</code> 动态插入多个节点时, 可以使用<code>DocumentFragment</code>. 创建后一次插入. 就能避免多次的渲染性能</p>
<p>但有时候，我们会无可避免地进行回流或者重绘，我们可以更好使用它们</p>
<p>例如，多次修改一个把元素布局的时候，我们很可能会如下操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;el&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    el.style.top  = el.offsetTop  + <span class="number">10</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    el.style.left = el.offsetLeft + <span class="number">10</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次循环都需要获取多次<code>offset</code>属性，比较糟糕，可以使用变量的形式缓存起来，待计算完毕再提交给浏览器发出重计算请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缓存offsetLeft与offsetTop的值</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;el&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> offLeft = el.offsetLeft, offTop = el.offsetTop</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在JS层面进行计算</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  offLeft += <span class="number">10</span></span><br><span class="line">  offTop  += <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次性将计算结果应用到DOM上</span></span><br><span class="line">el.style.left = offLeft + <span class="string">&quot;px&quot;</span></span><br><span class="line">el.style.top = offTop  + <span class="string">&quot;px&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们还可避免改变样式，使用类名去合并样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line">container.style.width = <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">container.style.height = <span class="string">&#x27;200px&#x27;</span></span><br><span class="line">container.style.border = <span class="string">&#x27;10px solid red&#x27;</span></span><br><span class="line">container.style.color = <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用类名去合并样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.basic_style</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    container.classList.add(<span class="string">&#x27;basic_style&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前者每次单独操作，都去触发一次渲染树更改（新浏览器不会），</p>
<p>都去触发一次渲染树更改，从而导致相应的回流与重绘过程</p>
<p>合并之后，等于我们将所有的更改一次性发出</p>
<p>我们还可以通过通过设置元素属性<code>display: none</code>，将其从页面上去掉，然后再进行后续操作，这些后续操作也不会触发回流与重绘，这个过程称为离线操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line">container.style.width = <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">container.style.height = <span class="string">&#x27;200px&#x27;</span></span><br><span class="line">container.style.border = <span class="string">&#x27;10px solid red&#x27;</span></span><br><span class="line">container.style.color = <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>

<p>离线操作后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line">container.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">container.style.width = <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">container.style.height = <span class="string">&#x27;200px&#x27;</span></span><br><span class="line">container.style.border = <span class="string">&#x27;10px solid red&#x27;</span></span><br><span class="line">container.style.color = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">...（省略了许多类似的后续操作）</span><br><span class="line">container.style.display = <span class="string">&#x27;block&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><p><a href="https://juejin.cn/post/6844903942137053192">https://juejin.cn/post/6844903942137053192</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000017329980">https://segmentfault.com/a/1190000017329980</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>layout_painting</tag>
      </tags>
  </entry>
  <entry>
    <title>me</title>
    <url>/archives/ac5292c2.html</url>
    <content><![CDATA[<p>
  <span class='green'>me -</span>
</p>


<ul>
<li>·叫 freelaeder，不胖不宅。</li>
<li>·性别男，喜欢喝椰子，(感觉不喝椰子的人，长不高，真的！)</li>
<li>·身高在蜘蛛侠和绿巨人之间</li>
<li>·平时喜欢哒哒bug，这大概就是一种莫名的快乐</li>
</ul>
<p>
  <span class='purp'>her -</span>
</p>

<ul>
<li>・很漂亮，爱喝奶茶</li>
<li>・古灵精怪，总能让人感到意外</li>
<li>・一定要爱着什么，恰似草木对光阴的钟情</li>
</ul>
<p>
  <span class='purps'>his -</span>
</p>

<ul>
<li>有傻狍子，有快乐，有 bug</li>
<li>有掉不完的头发，有 困顿</li>
<li>有空多联系~</li>
</ul>
<p>
  <span class='wram'>写在最后 -</span>
</p>

<ul>
<li>暂不添加留言板，哎，我就是玩</li>
<li>qq：2590131280</li>
<li>人生是如此简单，而又是这般辉煌</li>
</ul>
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>less_12px</title>
    <url>/archives/30b90bc0.html</url>
    <content><![CDATA[<h1 id="面试官：让Chrome支持小于12px-的文字方式有哪些？区别？"><a href="#面试官：让Chrome支持小于12px-的文字方式有哪些？区别？" class="headerlink" title="面试官：让Chrome支持小于12px 的文字方式有哪些？区别？"></a>面试官：让Chrome支持小于12px 的文字方式有哪些？区别？</h1><p><img src="https://static.vue-js.com/62945fd0-a334-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>Chrome 中文版浏览器会默认设定页面的最小字号是12px，英文版没有限制</p>
<p>原由 Chrome 团队认为汉字小于12px就会增加识别难度</p>
<ul>
<li>中文版浏览器</li>
</ul>
<p>与网页语言无关，取决于用户在Chrome的设置里（chrome://settings/languages）把哪种语言设置为默认显示语言</p>
<ul>
<li>系统级最小字号</li>
</ul>
<p>浏览器默认设定页面的最小字号，用户可以前往 chrome://settings/fonts 根据需求更改</p>
<p>而我们在实际项目中，不能奢求用户更改浏览器设置</p>
<p>对于文本需要以更小的字号来显示，就需要用到一些小技巧</p>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><p>常见的解决方案有：</p>
<ul>
<li>zoom</li>
<li> -webkit-transform:scale()</li>
<li> -webkit-text-size-adjust:none</li>
</ul>
<h3 id="Zoom"><a href="#Zoom" class="headerlink" title="Zoom"></a>Zoom</h3><p><code>zoom</code> 的字面意思是“变焦”，可以改变页面上元素的尺寸，属于真实尺寸</p>
<p>其支持的值类型有：</p>
<ul>
<li>zoom:50%，表示缩小到原来的一半</li>
<li>zoom:0.5，表示缩小到原来的一半</li>
</ul>
<p>使用 <code>zoom</code> 来”支持“ 12px 以下的字体</p>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.span1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        zoom: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.span2</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>测试10px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span2&quot;</span>&gt;</span>测试12px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p> <img src="https://static.vue-js.com/d5243980-a334-11eb-ab90-d9ae814b240d.png"></p>
<blockquote>
<p>需要注意的是，<code>Zoom</code> 并不是标准属性，需要考虑其兼容性</p>
</blockquote>
<p> <img src="https://static.vue-js.com/3defe3c0-a343-11eb-85f6-6fac77c0c9b3.png" alt="image.png"></p>
<h3 id="webkit-transform-scale"><a href="#webkit-transform-scale" class="headerlink" title="-webkit-transform:scale()"></a>-webkit-transform:scale()</h3><p>针对<code>chrome</code>浏览器,加<code>webkit</code>前缀，用<code>transform:scale()</code>这个属性进行放缩</p>
<p>注意的是，使用<code>scale</code>属性只对可以定义宽高的元素生效，所以，下面代码中将<code>span</code>元素转为行内块元素</p>
<p>实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.span1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        -webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0.8</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.span2</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>测试10px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span2&quot;</span>&gt;</span>测试12px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p> <img src="https://static.vue-js.com/d5243980-a334-11eb-ab90-d9ae814b240d.png"></p>
<h3 id="webkit-text-size-adjust-none"><a href="#webkit-text-size-adjust-none" class="headerlink" title="-webkit-text-size-adjust:none"></a>-webkit-text-size-adjust:none</h3><p>该属性用来设定文字大小是否根据设备(浏览器)来自动调整显示大小</p>
<p>属性值：</p>
<ul>
<li>percentage：字体显示的大小；</li>
<li>auto：默认，字体大小会根据设备/浏览器来自动调整；</li>
<li>none:字体大小不会自动调整</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123; -webkit-text-size-adjust: none; &#125;</span><br></pre></td></tr></table></figure>

<p>这样设置之后会有一个问题，就是当你放大网页时，一般情况下字体也会随着变大，而设置了以上代码后，字体只会显示你当前设置的字体大小，不会随着网页放大而变大了</p>
<p>所以，我们不建议全局应用该属性，而是单独对某一属性使用</p>
<blockquote>
<p>需要注意的是，自从<code>chrome 27</code>之后，就取消了对这个属性的支持。同时，该属性只对英文、数字生效，对中文不生效</p>
</blockquote>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><code>Zoom</code> 非标属性，有兼容问题，缩放会改变了元素占据的空间大小，触发重排</p>
<p><code>-webkit-transform:scale()</code> 大部分现代浏览器支持，并且对英文、数字、中文也能够生效，缩放不会改变了元素占据的空间大小，页面布局不会发生变化</p>
<p><code>-webkit-text-size-adjust</code>对谷歌浏览器有版本要求，在27之后，就取消了该属性的支持，并且只对英文、数字生效</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-size-adjust">https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-size-adjust</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>less_12px</tag>
      </tags>
  </entry>
  <entry>
    <title>memory_leak</title>
    <url>/archives/171d1754.html</url>
    <content><![CDATA[<h1 id="面试官：说说-JavaScript-中内存泄漏的几种情况？"><a href="#面试官：说说-JavaScript-中内存泄漏的几种情况？" class="headerlink" title="面试官：说说 JavaScript 中内存泄漏的几种情况？"></a>面试官：说说 JavaScript 中内存泄漏的几种情况？</h1><p>  <img src="https://static.vue-js.com/19f76b30-824d-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存</p>
<p>并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费</p>
<p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存</p>
<p>对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃</p>
<p> <img src="https://static.vue-js.com/56d4bd90-821c-11eb-ab90-d9ae814b240d.png"></p>
<p>在<code>C</code>语言中，因为是手动管理内存，内存泄露是经常出现的事情。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char * buffer;</span><br><span class="line">buffer = (char*) malloc(42);</span><br><span class="line"></span><br><span class="line">// Do something with buffer</span><br><span class="line"></span><br><span class="line">free(buffer);</span><br></pre></td></tr></table></figure>

<p>上面是 C 语言代码，<code>malloc</code>方法用来申请内存，使用完毕之后，必须自己用<code>free</code>方法释放内存。</p>
<p>这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为”垃圾回收机制”</p>
<h2 id="二、垃圾回收机制"><a href="#二、垃圾回收机制" class="headerlink" title="二、垃圾回收机制"></a>二、垃圾回收机制</h2><p>Javascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存</p>
<p>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存</p>
<p>通常情况下有两种实现方式：</p>
<ul>
<li>标记清除</li>
<li>引用计数</li>
</ul>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p><code>JavaScript</code>最常用的垃圾收回机制</p>
<p>当变量进入执行环境是，就标记这个变量为“进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境“</p>
<p>垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉</p>
<p>在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了</p>
<p>随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">0</span>,n = <span class="number">19</span> <span class="comment">// 把 m,n,add() 标记为进入环境。</span></span><br><span class="line">add(m, n) <span class="comment">// 把 a, b, c标记为进入环境。</span></span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// a,b,c标记为离开环境，等待垃圾回收。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  a++</span><br><span class="line">  <span class="keyword">var</span> c = a + b</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是<code>0</code>，就表示这个值不再用到了，因此可以将这块内存释放</p>
<p>如果一个值不再需要了，引用数却不为<code>0</code>，垃圾回收机制无法释放这块内存，从而导致内存泄漏</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>面代码中，数组<code>[1, 2, 3, 4]</code>是一个值，会占用内存。变量<code>arr</code>是仅有的对这个值的引用，因此引用次数为<code>1</code>。尽管后面的代码没有用到<code>arr</code>，它还是会持续占用内存</p>
<p>如果需要这块内存被垃圾回收机制释放，只需要设置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>通过设置<code>arr</code>为<code>null</code>，就解除了对数组<code>[1,2,3,4]</code>的引用，引用次数变为 0，就被垃圾回收了</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>有了垃圾回收机制，不代表不用关注内存泄露。那些很占空间的值，一旦不再用到，需要检查是否还存在对它们的引用。如果是的话，就必须手动解除引用</p>
<h2 id="三、常见内存泄露情况"><a href="#三、常见内存泄露情况" class="headerlink" title="三、常见内存泄露情况"></a>三、常见内存泄露情况</h2><p>意外的全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    bar = <span class="string">&quot;this is a hidden global variable&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种意外的全局变量可能由 <code>this</code> 创建：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.variable = <span class="string">&quot;potential accidental global&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo 调用自己，this 指向了全局对象（window）</span></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>

<p>上述使用严格模式，可以避免意外的全局变量</p>
<p>定时器也常会造成内存泄露</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someResource = getData();</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;Node&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">        <span class="comment">// 处理 node 和 someResource</span></span><br><span class="line">        node.innerHTML = <span class="built_in">JSON</span>.stringify(someResource));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>如果<code>id</code>为Node的元素从<code>DOM</code>中移除，该定时器仍会存在，同时，因为回调函数中包含对<code>someResource</code>的引用，定时器外面的<code>someResource</code>也不会被释放</p>
<p>包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">document</span>.createElement(<span class="string">&#x27;XXX&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> unused = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj, <span class="string">&#x27;闭包内引用obj obj不会被释放&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  obj = <span class="literal">null</span>; <span class="comment">// 解决方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有清理对<code>DOM</code>元素的引用同样造成内存泄露</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> refA = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;refA&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(refA); <span class="comment">// dom删除了</span></span><br><span class="line"><span class="built_in">console</span>.log(refA, <span class="string">&#x27;refA&#x27;</span>); <span class="comment">// 但是还存在引用能console出整个div 没有被回收</span></span><br><span class="line">refA = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(refA, <span class="string">&#x27;refA&#x27;</span>); <span class="comment">// 解除引用</span></span><br></pre></td></tr></table></figure>

<p>包括使用事件监听<code>addEventListener</code>监听的时候，在不监听的情况下使用<code>removeEventListener</code>取消对事件监听</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html">http://www.ruanyifeng.com/blog/2017/04/memory-leak.html</a></li>
<li><a href="https://zh.wikipedia.org/wiki">https://zh.wikipedia.org/wiki</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>memory_leak</tag>
      </tags>
  </entry>
  <entry>
    <title>loss_accuracy</title>
    <url>/archives/e0c98e7a.html</url>
    <content><![CDATA[<h1 id="面试官：说说-Javascript-数字精度丢失的问题，如何解决？"><a href="#面试官：说说-Javascript-数字精度丢失的问题，如何解决？" class="headerlink" title="面试官：说说 Javascript 数字精度丢失的问题，如何解决？"></a>面试官：说说 Javascript 数字精度丢失的问题，如何解决？</h1><p> <img src="https://static.vue-js.com/09646a10-86f4-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、场景复现"><a href="#一、场景复现" class="headerlink" title="一、场景复现"></a>一、场景复现</h2><p>一个经典的面试题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>为什么是<code>false</code>呢?</p>
<p>先看下面这个比喻</p>
<p>比如一个数 1÷3=0.33333333…… </p>
<p>3会一直无限循环，数学可以表示，但是计算机要存储，方便下次取出来再使用，但0.333333…… 这个数无限循环，再大的内存它也存不下，所以不能存储一个相对于数学来说的值，只能存储一个近似值，当计算机存储后再取出时就会出现精度丢失问题</p>
<h2 id="二、浮点数"><a href="#二、浮点数" class="headerlink" title="二、浮点数"></a>二、浮点数</h2><p>“浮点数”是一种表示数字的标准，整数也可以用浮点数的格式来存储</p>
<p>我们也可以理解成，浮点数就是小数</p>
<p>在<code>JavaScript</code>中，现在主流的数值类型是<code>Number</code>，而<code>Number</code>采用的是<code>IEEE754</code>规范中64位双精度浮点数编码</p>
<p>这样的存储结构优点是可以归一化处理整数和小数，节省存储空间</p>
<p>对于一个整数，可以很轻易转化成十进制或者二进制。但是对于一个浮点数来说，因为小数点的存在，小数点的位置不是固定的。解决思路就是使用科学计数法，这样小数点位置就固定了</p>
<p>而计算机只能用二进制（0或1）表示，二进制转换为科学记数法的公式如下：</p>
<p> <img src="https://static.vue-js.com/1b4b1620-86f4-11eb-ab90-d9ae814b240d.png"></p>
<p>其中，<code>a</code>的值为0或者1，e为小数点移动的位置</p>
<p>举个例子：</p>
<p>27.0转化成二进制为11011.0 ，科学计数法表示为：</p>
<p> <img src="https://static.vue-js.com/37007090-86f4-11eb-ab90-d9ae814b240d.png"></p>
<p>前面讲到，<code>javaScript</code>存储方式是双精度浮点数，其长度为8个字节，即64位比特</p>
<p>64位比特又可分为三个部分：</p>
<ul>
<li>符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数</li>
<li>指数位E：中间的 11 位存储指数（exponent），用来表示次方数，可以为正负数。在双精度浮点数中，指数的固定偏移量为1023</li>
<li>尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零</li>
</ul>
<p>如下图所示：</p>
<p> <img src="https://static.vue-js.com/430d0100-86f4-11eb-85f6-6fac77c0c9b3.png"></p>
<p>举个例子：</p>
<p>27.5 转换为二进制11011.1</p>
<p>11011.1转换为科学记数法 <img src="https://www.zhihu.com/equation?tex=1.10111*2%5E4" alt="[公式]"></p>
<p>符号位为1(正数)，指数位为4+，1023+4，即1027</p>
<p>因为它是十进制的需要转换为二进制，即 <code>10000000011</code>，小数部分为<code>10111</code>，补够52位即： 1011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000`</p>
<p>所以27.5存储为计算机的二进制标准形式（符号位+指数位+小数部分 (阶数)），既下面所示</p>
<p>0+10000000011+011 1000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000`</p>
<h2 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h2><p>再回到问题上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>通过上面的学习，我们知道，在<code>javascript</code>语言中，0.1 和 0.2 都转化成二进制后再进行运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0.1 和 0.2 都转化成二进制后再进行运算</span></span><br><span class="line"><span class="number">0.00011001100110011001100110011001100110011001100110011010</span> +</span><br><span class="line"><span class="number">0.0011001100110011001100110011001100110011001100110011010</span> =</span><br><span class="line"><span class="number">0.0100110011001100110011001100110011001100110011001100111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转成十进制正好是 0.30000000000000004</span></span><br></pre></td></tr></table></figure>

<p>所以输出<code>false</code></p>
<p>再来一个问题，那么为什么<code>x=0.1</code>得到<code>0.1</code>？</p>
<p>主要是存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是<code>2^53=9007199254740992</code>，对应科学计数尾数是 <code>9.007199254740992</code>，这也是 JS 最多能表示的精度</p>
<p>它的长度是 16，所以可以使用 <code>toPrecision(16)</code> 来做精度运算，超过的精度会自动做凑整处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">.10000000000000000555</span>.toPrecision(<span class="number">16</span>)</span><br><span class="line"><span class="comment">// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1</span></span><br></pre></td></tr></table></figure>

<p>但看到的 <code>0.1</code> 实际上并不是 <code>0.1</code>。不信你可用更高的精度试试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span>.toPrecision(<span class="number">21</span>) = <span class="number">0.100000000000000005551</span></span><br></pre></td></tr></table></figure>

<p>如果整数大于 <code>9007199254740992</code> 会出现什么情况呢？</p>
<p>由于指数位最大值是1023，所以最大可以表示的整数是 <code>2^1024 - 1</code>，这就是能表示的最大整数。但你并不能这样计算这个数字，因为从 <code>2^1024</code> 开始就变成了 <code>Infinity</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Math.pow(2, 1023)</span><br><span class="line">8.98846567431158e+307</span><br><span class="line"></span><br><span class="line">&gt; Math.pow(2, 1024)</span><br><span class="line">Infinity</span><br></pre></td></tr></table></figure>

<p>那么对于 <code>(2^53, 2^63)</code> 之间的数会出现什么情况呢？</p>
<ul>
<li><code>(2^53, 2^54)</code> 之间的数会两个选一个，只能精确表示偶数</li>
<li><code>(2^54, 2^55)</code> 之间的数会四个选一个，只能精确表示4个倍数</li>
<li>… 依次跳过更多2的倍数</li>
</ul>
<p>要想解决大数的问题你可以引用第三方库 <code>bignumber.js</code>，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生差很多</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>计算机存储双精度浮点数需要先把十进制数转换为二进制的科学记数法的形式，然后计算机以自己的规则{符号位+(指数位+指数偏移量的二进制)+小数部分}存储二进制的科学记数法</p>
<p>因为存储时有位数限制（64位），并且某些十进制的浮点数在转换为二进制数时会出现无限循环，会造成二进制的舍入操作(0舍1入)，当再转换为十进制时就造成了计算误差</p>
<h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果</p>
<p>当你拿到 <code>1.4000000000000001</code> 这样的数据要展示时，建议使用 <code>toPrecision</code> 凑整并 <code>parseFloat</code> 转成数字后再显示，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parseFloat(1.4000000000000001.toPrecision(12)) === 1.4  // True</span><br></pre></td></tr></table></figure>

<p>封装成方法就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">num, precision = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +<span class="built_in">parseFloat</span>(num.toPrecision(precision));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于运算类操作，如 <code>+-*/</code>，就不能使用 <code>toPrecision</code> 了。正确的做法是把小数转成整数后再运算。以加法为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 精确加法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> num1Digits = (num1.toString().split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>).length;</span><br><span class="line">  <span class="keyword">const</span> num2Digits = (num2.toString().split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>).length;</span><br><span class="line">  <span class="keyword">const</span> baseNum = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(num1Digits, num2Digits));</span><br><span class="line">  <span class="keyword">return</span> (num1 * baseNum + num2 * baseNum) / baseNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后还可以使用第三方库，如<code>Math.js</code>、<code>BigDecimal.js</code></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/100353781">https://zhuanlan.zhihu.com/p/100353781</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>loss_accuracy</tag>
      </tags>
  </entry>
  <entry>
    <title>new</title>
    <url>/archives/6be34445.html</url>
    <content><![CDATA[<h1 id="面试官：说说new操作符具体干了什么？"><a href="#面试官：说说new操作符具体干了什么？" class="headerlink" title="面试官：说说new操作符具体干了什么？"></a>面试官：说说new操作符具体干了什么？</h1><p><img src="https://static.vue-js.com/880d0010-7a39-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>在<code>JavaScript</code>中，<code>new</code>操作符用于创建一个给定构造函数的实例对象</p>
<p>例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person1)  <span class="comment">// Person &#123;name: &quot;Tom&quot;, age: 20&#125;</span></span><br><span class="line">t.sayName() <span class="comment">// &#x27;Tom&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面可以看到：</p>
<ul>
<li><code>new</code> 通过构造函数 <code>Person</code> 创建出来的实例可以访问到构造函数中的属性</li>
<li><code>new</code> 通过构造函数 <code>Person</code> 创建出来的实例可以访问到构造函数原型链中的属性（即实例与构造函数通过原型链连接了起来）</li>
</ul>
<p>现在在构建函数中显式加上返回值，并且这个返回值是一个原始类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> Test(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(t.name) <span class="comment">// &#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以发现，构造函数中返回一个原始值，然而这个返回值并没有作用</p>
<p>下面在构造函数中返回一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Test &#123; name: &#x27;xxx&#x27; &#125;</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">age</span>: <span class="number">26</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> Test(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(t) <span class="comment">// &#123; age: 26 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(t.name) <span class="comment">// &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure>

<p>从上面可以发现，构造函数如果返回值为一个对象，那么这个返回值会被正常使用</p>
<h2 id="二、流程"><a href="#二、流程" class="headerlink" title="二、流程"></a>二、流程</h2><p>从上面介绍中，我们可以看到<code>new</code>关键字主要做了以下的工作：</p>
<ul>
<li><p>创建一个新的对象<code>obj</code></p>
</li>
<li><p>将对象与构建函数通过原型链连接起来</p>
</li>
<li><p>将构建函数中的<code>this</code>绑定到新建的对象<code>obj</code>上</p>
</li>
<li><p>根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理</p>
</li>
</ul>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person1)  <span class="comment">// Person &#123;name: &quot;Tom&quot;, age: 20&#125;</span></span><br><span class="line">t.sayName() <span class="comment">// &#x27;Tom&#x27;</span></span><br></pre></td></tr></table></figure>

<p>流程图如下：</p>
<p> <img src="https://static.vue-js.com/b429b990-7a39-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="三、手写new操作符"><a href="#三、手写new操作符" class="headerlink" title="三、手写new操作符"></a>三、手写new操作符</h2><p>现在我们已经清楚地掌握了<code>new</code>的执行过程</p>
<p>那么我们就动手来实现一下<code>new</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mynew</span>(<span class="params">Func, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建一个新对象</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 2.新对象原型指向构造函数原型对象</span></span><br><span class="line">    obj.__proto__ = Func.prototype</span><br><span class="line">    <span class="comment">// 3.将构建函数的this指向新对象</span></span><br><span class="line">    <span class="keyword">let</span> result = Func.apply(obj, args)</span><br><span class="line">    <span class="comment">// 4.根据返回值判断</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mynew</span>(<span class="params">func, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    obj.__proto__ = func.prototype</span><br><span class="line">    <span class="keyword">let</span> result = func.apply(obj, args)</span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = mynew(Person, <span class="string">&quot;huihui&quot;</span>, <span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p) <span class="comment">// Person &#123;name: &quot;huihui&quot;, age: 123&#125;</span></span><br><span class="line">p.say() <span class="comment">// huihui</span></span><br></pre></td></tr></table></figure>

<p>可以发现，代码虽然很短，但是能够模拟实现<code>new</code></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>new</tag>
      </tags>
  </entry>
  <entry>
    <title>node</title>
    <url>/archives/857fe845.html</url>
    <content><![CDATA[<p>你好</p>
<p> node.js是什么？</p>
<ul>
<li>node.js不是一门语言，不是库，不是框架，node.js是一个运行javaScript运行时的环境。</li>
<li>node.js没有Bom，Dom；</li>
<li>作用：文件读写，网络服务的构建，网络通信，HTTP服务器等</li>
<li>特性：event.driven事件驱动，ligtweight and efficient 轻量和高效，non-blocking I/o非阻塞io模型</li>
</ul>
<p> 浏览器中的JavaScript组成</p>
<ul>
<li>Chrome 浏览器 =&gt; V8 </li>
<li>Firefox 浏览器=&gt; OdinMonkey(奥丁猴)</li>
<li>Safri 浏览器=&gt; JSCore</li>
<li>IE 浏览器=&gt; Chakra(查克拉) </li>
<li>etc… 其中，Chrome 浏览器的 V8 解析引擎性能最好! </li>
</ul>
<p> 注意</p>
<ul>
<li>运行环境，指 代码能够正常执行，所必须的条件浏览器，就是 JS 代码的 运行环境。（包括解析引擎、窗口显示结果……）脱离运行环境，JS 代码将会失去作用。</li>
<li>浏览器运行环境中，能够执行的 JS 代码包括（ECMAScript、WebAPI）ECMAScript 肯定能够运行，因为它是核心语法<br>WebAPI 是浏览器环境特有的，只能在浏览器环境中才能使用。</li>
</ul>
<hr>
<ul>
<li><em>交互模式(了解)</em> </li>
<li>REPL(Read-Eval -Print-Loop)交互模式指的是在终端窗口中，执行简单的JavaScript代码</li>
<li>操作步骤：打开任意终端，直接输入 node 命令并回车执行你的JS代码，按回车表示执行按两次“Ctrl+C”退出</li>
<li>只适合少量js代码<br>[tag type=”success” outline=”1”]脚本模式(重要哦)[/tag]</li>
<li>如果有大段的JS代码需要在Node环境中运行，可以把JS代码写到JS文件中终端中，使用 node xxx.js 命令即可运行文件中的代码</li>
<li><strong>注意哟：两种模式不能混用，如果使用第一种模式，必须先退出，然后才能用第二种</strong><br>[tag type=”primary” outline]node中的模块化[/tag]</li>
<li>Node中的模块化，就是把一个大的JS文件拆分成若干个小文件，还能按照一定的语法组装到一起。</li>
<li>规定，用户创建的每个JS文件，就是一个小模块，叫做自定义模块</li>
<li>我们可以按照一定的语法将这些小模块组合到一起，形成一个完整的项目<br>[tag type=”success” outline=”1”]Node中的模块分类[/tag]</li>
<li>内置模块（核心模块）：Node安装后，即可使用的模块，Node环境自带。</li>
<li>自定义模块：用户自己创建的每个JS文件，都是自定义模块</li>
<li>第三方模块：其他人或公司、组织开发的模块，发布到 npm 网站，我们需要下载使用的模块<br>[tag type=”primary” outline]加载模块的语法[/tag]</li>
</ul>
<p>  <em>1.1加载自定义模块</em></p>
<ul>
<li>a 文件，必须通过 module.exports 共享（导出、暴露）当前模块中的变量</li>
<li>b 文件，需要通过 require() 加载（导入）。（a 文件导出什么，b 文件就得到什么）</li>
<li>加载自定义模块时，必须要带路径 （相对路径、绝对路径都可以；但必须带路径，哪怕是 ./ 也不能省略）</li>
<li>加载自定义模块时，可以省略后缀</li>
</ul>
<p><em>1.2加载内置模块</em></p>
<ul>
<li>直接使用 require() 加载即可。</li>
<li>加载模块时，无需带路径，比如 require(‘fs’)</li>
<li>加载内置模块，得到对象类型，对象中内置了很多API方法</li>
</ul>
<p><em>1.3加载第三方模块</em></p>
<ul>
<li>// npm （node package manager）,npm包管理器</li>
<li>第三方模块，发布在https：//<a href="http://www.npm.js.com/">www.npm.js.com</a></li>
<li>1,npm init 初始化package.json  || npm  init  -y</li>
<li>2,安装npm install 包名   || npm i 模块名</li>
<li>3,卸载npm uninstall 包名   || npm un  模块名</li>
<li>可以在文件package.json中的dependencied查看安装的模块</li>
</ul>
<hr>
<p>数组排序模块化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组第一个转大写，其余小写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + str.slice(<span class="number">1</span>).toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;asdfaknfsakfnaksd&#x27;</span></span><br><span class="line">change(str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortBy</span>(<span class="params">pro</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">item1, item2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item1[pro] - item2[pro]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对外暴露</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">change</span>: change,</span><br><span class="line">    <span class="attr">sortBy</span>: sortBy</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  接受数据</span></span><br><span class="line"><span class="keyword">var</span> &#123; change, sortBy &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./lib.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> r = change(<span class="string">&#x27;adfna&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(change(<span class="string">&#x27;asdkfksfn&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;AS&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">90</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;DS&#x27;</span>, <span class="attr">age</span>: <span class="number">13</span>, <span class="attr">score</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;AE&#x27;</span>, <span class="attr">age</span>: <span class="number">11</span>, <span class="attr">score</span>: <span class="number">9</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> res = arr.sort(sortBy(<span class="string">&#x27;score&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<hr>
<p>[tag type=”primary” outline]文件操作[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// fs 是file-system 的简写，文件系统的意思</span></span><br><span class="line"><span class="comment">// 在node 中如果想进行文件操作，就必须引入 fs 这个核心模块</span></span><br><span class="line"><span class="comment">// fs.readFine 用来读取文件</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 读取文件 第一个参数要读取的文件路径，第二个是回调函数</span></span><br><span class="line"><span class="comment">// 成功 data 数据  error null</span></span><br><span class="line"><span class="comment">// 失败 data null  error  错误对象</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./1.html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写文件第一个参数，路径 ；第二个参数，文件的内容；第三个参数，回调函数</span></span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">&#x27;./data.md&#x27;</span>,<span class="string">&#x27;大家好&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>Path 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// path 模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;a/b/c/index.js&#x27;</span></span><br><span class="line"><span class="comment">// 获取路径文件后缀名</span></span><br><span class="line"><span class="comment">// console.log(path.extname(url));</span></span><br><span class="line"><span class="comment">// 拼接给出的路径</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;a/b/c&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;d/e/index.html&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(path.join(a,b));</span></span><br><span class="line"><span class="comment">// 全局变量，表示当前的js的绝对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>querystring 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// querystring 模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="comment">// 定义变量，查询字符串</span></span><br><span class="line"><span class="keyword">let</span> urls = <span class="string">&#x27;uname= zhangsan&amp;age=20&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = querystring.parse(urls);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">// 将对象转化成字符串</span></span><br><span class="line"><span class="keyword">let</span> os = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;grils&#x27;</span>,</span><br><span class="line">    <span class="attr">lova</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">moeny</span>: <span class="number">12202</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = querystring.stringify(os);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>


<hr>
<p>http</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 服务器要干嘛  提供服务：对，数据服务发请求  接受请求  处理请求给个反馈（发送相应） 注册request 请求事件*/</span></span><br><span class="line"><span class="comment">// 1 http 加载http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2创建web服务器</span></span><br><span class="line"><span class="comment">// 使用http.createServer()创建web服务器 返回Server实列</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3监听request请求事件        /* req请求，res响应 */</span></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置响应头                   /* 文本数据 */</span></span><br><span class="line">    res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/pain;charest=utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">// 向客户响应数据</span></span><br><span class="line">    res.end(<span class="string">&#x27;你好啊,陌生人&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4,监听端口号.</span></span><br><span class="line">server.listen(<span class="number">5555</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;端口5555已启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化2 3 步骤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置响应头                   /* 文本数据 */</span></span><br><span class="line">    res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/pain;charest=utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">// 向客户响应数据</span></span><br><span class="line">    res.end(<span class="string">&#x27;你好啊,陌生人&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4,监听端口号.</span></span><br><span class="line">server.listen(<span class="number">5555</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;端口5555已启动&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>prototype</title>
    <url>/archives/a36a5ae4.html</url>
    <content><![CDATA[<h1 id="面试官：JavaScript原型，原型链-有什么特点？"><a href="#面试官：JavaScript原型，原型链-有什么特点？" class="headerlink" title="面试官：JavaScript原型，原型链 ? 有什么特点？"></a>面试官：JavaScript原型，原型链 ? 有什么特点？</h1><p> <img src="https://static.vue-js.com/4500e170-725e-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><p><code>JavaScript</code> 常被描述为一种基于原型的语言——每个对象拥有一个原型对象</p>
<p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾</p>
<p>准确地说，这些属性和方法定义在Object的构造器函数（constructor functions）之上的<code>prototype</code>属性上，而非实例对象本身</p>
<p>下面举个例子：</p>
<p>函数可以有属性。 每个函数都有一个特殊的属性叫作原型<code>prototype</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log( doSomething.prototype );</span><br></pre></td></tr></table></figure>

<p>控制台输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">constructor</span>: ƒ doSomething(),</span><br><span class="line">    <span class="attr">__proto__</span>: &#123;</span><br><span class="line">        <span class="attr">constructor</span>: ƒ <span class="built_in">Object</span>(),</span><br><span class="line">        <span class="attr">hasOwnProperty</span>: ƒ hasOwnProperty(),</span><br><span class="line">        <span class="attr">isPrototypeOf</span>: ƒ isPrototypeOf(),</span><br><span class="line">        <span class="attr">propertyIsEnumerable</span>: ƒ propertyIsEnumerable(),</span><br><span class="line">        <span class="attr">toLocaleString</span>: ƒ toLocaleString(),</span><br><span class="line">        <span class="attr">toString</span>: ƒ toString(),</span><br><span class="line">        <span class="attr">valueOf</span>: ƒ valueOf()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这个对象，就是大家常说的原型对象</p>
<p>可以看到，原型对象有一个自有属性<code>constructor</code>，这个属性指向该函数，如下图关系展示</p>
<p> <img src="https://static.vue-js.com/56d87250-725e-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h2><p>原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法</p>
<p>在对象实例和它的构造器之间建立一个链接（它是<code>__proto__</code>属性，是从构造函数的<code>prototype</code>属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法</p>
<p>下面举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二步 创建实例</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;person&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>根据代码，我们可以得到下图</p>
<p> <img src="https://static.vue-js.com/60825aa0-725e-11eb-85f6-6fac77c0c9b3.png"></p>
<p>下面分析一下：</p>
<ul>
<li><p>构造函数<code>Person</code>存在原型对象<code>Person.prototype</code></p>
</li>
<li><p>构造函数生成实例对象<code>person</code>，<code>person</code>的<code>__proto__</code>指向构造函数<code>Person</code>原型对象</p>
</li>
<li><p><code>Person.prototype.__proto__</code> 指向内置对象，因为 <code>Person.prototype</code> 是个对象，默认是由 <code>Object </code>函数作为类创建的，而 <code>Object.prototype</code> 为内置对象</p>
</li>
<li><p><code>Person.__proto__</code> 指向内置匿名函数 <code>anonymous</code>，因为 Person 是个函数对象，默认由 Function 作为类创建</p>
</li>
<li><p><code>Function.prototype</code> 和 <code>Function.__proto__ </code>同时指向内置匿名函数 <code>anonymous</code>，这样原型链的终点就是 <code>null</code></p>
</li>
</ul>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>下面首先要看几个概念：</p>
<p><code>__proto__</code>作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象的</p>
<p> <img src="https://static.vue-js.com/6a742160-725e-11eb-ab90-d9ae814b240d.png"></p>
<p>每个对象的<code>__proto__</code>都是指向它的构造函数的原型对象<code>prototype</code>的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person1.__proto__ === Person.prototype</span><br></pre></td></tr></table></figure>

<p>构造函数是一个函数对象，是通过 <code>Function </code>构造器产生的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.__proto__ === <span class="built_in">Function</span>.prototype</span><br></pre></td></tr></table></figure>

<p>原型对象本身是一个普通对象，而普通对象的构造函数都是<code>Object</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure>

<p>刚刚上面说了，所有的构造器都是函数对象，函数对象都是 <code>Function </code>构造产生的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</span><br></pre></td></tr></table></figure>

<p><code>Object </code>的原型对象也有<code>__proto__</code>属性指向<code>null</code>，<code>null</code>是原型链的顶端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>下面作出总结：</p>
<ul>
<li><p>一切对象都是继承自<code>Object</code>对象，<code>Object</code> 对象直接继承根源对象<code> null</code></p>
</li>
<li><p>一切的函数对象（包括 <code>Object</code> 对象），都是继承自 <code>Function</code> 对象</p>
</li>
<li><p><code>Object</code> 对象直接继承自 <code>Function</code> 对象</p>
</li>
<li><p><code>Function</code>对象的<code>__proto__</code>会指向自己的原型对象，最终还是继承自<code>Object</code>对象</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://juejin.cn/post/6870732239556640775#heading-7">https://juejin.cn/post/6870732239556640775#heading-7</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>prototype</tag>
      </tags>
  </entry>
  <entry>
    <title>下拉刷新</title>
    <url>/archives/97b76847.html</url>
    <content><![CDATA[<h1 id="面试官：如何实现上拉加载，下拉刷新？"><a href="#面试官：如何实现上拉加载，下拉刷新？" class="headerlink" title="面试官：如何实现上拉加载，下拉刷新？"></a>面试官：如何实现上拉加载，下拉刷新？</h1><p> <img src="https://static.vue-js.com/89cd1850-8adc-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>下拉刷新和上拉加载这两种交互方式通常出现在移动端中</p>
<p>本质上等同于PC网页中的分页，只是交互形式不同</p>
<p>开源社区也有很多优秀的解决方案，如<code>iscroll</code>、<code>better-scroll</code>、<code>pulltorefresh.js</code>库等等</p>
<p>这些第三方库使用起来非常便捷</p>
<p>我们通过原生的方式实现一次上拉加载，下拉刷新，有助于对第三方库有更好的理解与使用</p>
<h2 id="二、实现原理"><a href="#二、实现原理" class="headerlink" title="二、实现原理"></a>二、实现原理</h2><p>上拉加载及下拉刷新都依赖于用户交互</p>
<p>最重要的是要理解在什么场景，什么时机下触发交互动作</p>
<h3 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h3><p>首先可以看一张图</p>
<p> <img src="https://static.vue-js.com/df498a00-8ae3-11eb-ab90-d9ae814b240d.png"></p>
<p>上拉加载的本质是页面触底，或者快要触底时的动作</p>
<p>判断页面触底我们需要先了解一下下面几个属性</p>
<ul>
<li><p><code>scrollTop</code>：滚动视窗的高度距离<code>window</code>顶部的距离，它会随着往上滚动而不断增加，初始值是0，它是一个变化的值</p>
</li>
<li><p><code>clientHeight</code>:它是一个定值，表示屏幕可视区域的高度；</p>
</li>
<li><p><code>scrollHeight</code>：页面不能滚动时也是存在的,此时scrollHeight等于clientHeight。scrollHeight表示<code>body</code>所有元素的总长度(包括body元素自身的padding)</p>
</li>
</ul>
<p>综上我们得出一个触底公式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scrollTop + clientHeight &gt;= scrollHeight</span><br></pre></td></tr></table></figure>

<p>简单实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> clientHeight  = <span class="built_in">document</span>.documentElement.clientHeight; <span class="comment">//浏览器高度</span></span><br><span class="line"><span class="keyword">let</span> scrollHeight = <span class="built_in">document</span>.body.scrollHeight;</span><br><span class="line"><span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> distance = <span class="number">50</span>;  <span class="comment">//距离视窗还用50的时候，开始触发；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((scrollTop + clientHeight) &gt;= (scrollHeight - distance)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;开始加载数据&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><p>下拉刷新的本质是页面本身置于顶部时，用户下拉时需要触发的动作</p>
<p>关于下拉刷新的原生实现，主要分成三步：</p>
<ul>
<li>监听原生<code>touchstart</code>事件，记录其初始位置的值，<code>e.touches[0].pageY</code>；</li>
<li>监听原生<code>touchmove</code>事件，记录并计算当前滑动的位置值与初始位置值的差值，大于<code>0</code>表示向下拉动，并借助CSS3的<code>translateY</code>属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值；</li>
<li>监听原生<code>touchend</code>事件，若此时元素滑动达到最大值，则触发<code>callback</code>，同时将<code>translateY</code>重设为<code>0</code>，元素回到初始位置</li>
</ul>
<p>举个例子：</p>
<p><code>Html</code>结构如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;main&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;refreshText&quot;</span>&gt;</span>&lt;/p &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;refreshContainer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>555<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>监听<code>touchstart</code>事件，记录初始的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _element = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;refreshContainer&#x27;</span>),</span><br><span class="line">    _refreshText = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.refreshText&#x27;</span>),</span><br><span class="line">    _startPos = <span class="number">0</span>,  <span class="comment">// 初始的值</span></span><br><span class="line">    _transitionHeight = <span class="number">0</span>; <span class="comment">// 移动的距离</span></span><br><span class="line"></span><br><span class="line">_element.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    _startPos = e.touches[<span class="number">0</span>].pageY; <span class="comment">// 记录初始位置</span></span><br><span class="line">    _element.style.position = <span class="string">&#x27;relative&#x27;</span>;</span><br><span class="line">    _element.style.transition = <span class="string">&#x27;transform 0s&#x27;</span>;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>监听<code>touchmove</code>移动事件，记录滑动差值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_element.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// e.touches[0].pageY 当前位置</span></span><br><span class="line">    _transitionHeight = e.touches[<span class="number">0</span>].pageY - _startPos; <span class="comment">// 记录差值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_transitionHeight &gt; <span class="number">0</span> &amp;&amp; _transitionHeight &lt; <span class="number">60</span>) &#123; </span><br><span class="line">        _refreshText.innerText = <span class="string">&#x27;下拉刷新&#x27;</span>; </span><br><span class="line">        _element.style.transform = <span class="string">&#x27;translateY(&#x27;</span>+_transitionHeight+<span class="string">&#x27;px)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_transitionHeight &gt; <span class="number">55</span>) &#123;</span><br><span class="line">            _refreshText.innerText = <span class="string">&#x27;释放更新&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                </span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>最后，就是监听<code>touchend</code>离开的事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_element.addEventListener(<span class="string">&#x27;touchend&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    _element.style.transition = <span class="string">&#x27;transform 0.5s ease 1s&#x27;</span>;</span><br><span class="line">    _element.style.transform = <span class="string">&#x27;translateY(0px)&#x27;</span>;</span><br><span class="line">    _refreshText.innerText = <span class="string">&#x27;更新中...&#x27;</span>;</span><br><span class="line">    <span class="comment">// todo...</span></span><br><span class="line"></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>从上面可以看到，在下拉到松手的过程中，经历了三个阶段：</p>
<ul>
<li>当前手势滑动位置与初始位置差值大于零时，提示正在进行下拉刷新操作</li>
<li>下拉到一定值时，显示松手释放后的操作提示</li>
<li>下拉到达设定最大值松手时，执行回调，提示正在进行更新操作</li>
</ul>
<h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>在实际开发中，我们更多的是使用第三方库，下面以<code>better-scroll</code>进行举例：</p>
<p>HTML结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;position-wrapper&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;refresh&quot;</span>&gt;</span>下拉刷新&lt;/p &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;position-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!--列表内容--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span>查看更多&lt;/p &gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>实例化上拉下拉插件，通过<code>use</code>来注册插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">&quot;@better-scroll/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PullDown <span class="keyword">from</span> <span class="string">&quot;@better-scroll/pull-down&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PullUp <span class="keyword">from</span> <span class="string">&#x27;@better-scroll/pull-up&#x27;</span>;</span><br><span class="line">BScroll.use(PullDown);</span><br><span class="line">BScroll.use(PullUp);</span><br></pre></td></tr></table></figure>

<p>实例化<code>BetterScroll</code>，并传入相关的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pageNo = <span class="number">1</span>,pageSize = <span class="number">10</span>,dataList = [],isMore = <span class="literal">true</span>;  </span><br><span class="line"><span class="keyword">var</span> scroll= <span class="keyword">new</span> BScroll(<span class="string">&quot;#position-wrapper&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">scrollY</span>:<span class="literal">true</span>,<span class="comment">//垂直方向滚动</span></span><br><span class="line">    <span class="attr">click</span>:<span class="literal">true</span>,<span class="comment">//默认会阻止浏览器的原生click事件，如果需要点击，这里要设为true</span></span><br><span class="line">    <span class="attr">pullUpLoad</span>:<span class="literal">true</span>,<span class="comment">//上拉加载更多</span></span><br><span class="line">    <span class="attr">pullDownRefresh</span>:&#123;</span><br><span class="line">        <span class="attr">threshold</span>:<span class="number">50</span>,<span class="comment">//触发pullingDown事件的位置</span></span><br><span class="line">        <span class="attr">stop</span>:<span class="number">0</span><span class="comment">//下拉回弹后停留的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听下拉刷新</span></span><br><span class="line">scroll.on(<span class="string">&quot;pullingDown&quot;</span>,pullingDownHandler);</span><br><span class="line"><span class="comment">//监测实时滚动</span></span><br><span class="line">scroll.on(<span class="string">&quot;scroll&quot;</span>,scrollHandler);</span><br><span class="line"><span class="comment">//上拉加载更多</span></span><br><span class="line">scroll.on(<span class="string">&quot;pullingUp&quot;</span>,pullingUpHandler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">pullingDownHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    dataList=[];</span><br><span class="line">    pageNo=<span class="number">1</span>;</span><br><span class="line">    isMore=<span class="literal">true</span>;</span><br><span class="line">    $(<span class="string">&quot;.more&quot;</span>).text(<span class="string">&quot;查看更多&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> getlist();<span class="comment">//请求数据</span></span><br><span class="line">    scroll.finishPullDown();<span class="comment">//每次下拉结束后，需要执行这个操作</span></span><br><span class="line">    scroll.refresh();<span class="comment">//当滚动区域的dom结构有变化时，需要执行这个操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">pullingUpHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isMore)&#123;</span><br><span class="line">        $(<span class="string">&quot;.more&quot;</span>).text(<span class="string">&quot;没有更多数据了&quot;</span>);</span><br><span class="line">        scroll.finishPullUp();<span class="comment">//每次上拉结束后，需要执行这个操作</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pageNo++;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.getlist();<span class="comment">//请求数据</span></span><br><span class="line">    scroll.finishPullUp();<span class="comment">//每次上拉结束后，需要执行这个操作</span></span><br><span class="line">    scroll.refresh();<span class="comment">//当滚动区域的dom结构有变化时，需要执行这个操作    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.y&gt;<span class="number">50</span>) $(<span class="string">&#x27;.refresh&#x27;</span>).text(<span class="string">&quot;松手开始加载&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> $(<span class="string">&#x27;.refresh&#x27;</span>).text(<span class="string">&quot;下拉刷新&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getlist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//返回的数据</span></span><br><span class="line">    <span class="keyword">let</span> result=....;</span><br><span class="line">    dataList=dataList.concat(result);</span><br><span class="line">    <span class="comment">//判断是否已加载完</span></span><br><span class="line">    <span class="keyword">if</span>(result.length&lt;pageSize) isMore=<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//将dataList渲染到html内容中</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<p>使用<code>better-scroll </code>实现下拉刷新、上拉加载时要注意以下几点：</p>
<ul>
<li><code>wrapper</code>里必须只有一个子元素</li>
<li>子元素的高度要比<code>wrapper</code>要高</li>
<li>使用的时候，要确定<code>DOM</code>元素是否已经生成，必须要等到<code>DOM</code>渲染完成后，再<code>new BScroll()</code></li>
<li>滚动区域的<code>DOM</code>元素结构有变化后，需要执行刷新 <code>refresh() </code></li>
<li>上拉或者下拉，结束后，需要执行<code>finishPullUp()</code>或者<code>finishPullDown()</code>，否则将不会执行下次操作</li>
<li><code>better-scroll</code>，默认会阻止浏览器的原生<code>click</code>事件，如果滚动内容区要添加点击事件，需要在实例化属性里设置<code>click:true</code></li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>下拉刷新、上拉加载原理本身都很简单，真正复杂的是封装过程中，要考虑的兼容性、易用性、性能等诸多细节</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000014423308">https://segmentfault.com/a/1190000014423308</a></li>
<li><a href="https://github.com/ustbhuangyi/better-scroll">https://github.com/ustbhuangyi/better-scroll</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>下拉刷新</tag>
      </tags>
  </entry>
  <entry>
    <title>regexp</title>
    <url>/archives/f9f4b1e7.html</url>
    <content><![CDATA[<h1 id="面试官：说说你对正则表达式的理解？应用场景？"><a href="#面试官：说说你对正则表达式的理解？应用场景？" class="headerlink" title="面试官：说说你对正则表达式的理解？应用场景？"></a>面试官：说说你对正则表达式的理解？应用场景？</h1><p><img src="https://static.vue-js.com/55388a40-7f1d-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>正则表达式是一种用来匹配字符串的强有力的武器</p>
<p>它的设计思想是用一种描述性的语言定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的</p>
<p>在 <code>JavaScript</code>中，正则表达式也是对象，构建正则表达式有两种方式：</p>
<ol>
<li>字面量创建，其由包含在斜杠之间的模式组成</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="regexp">/\d+/g</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>调用<code>RegExp</code>对象的构造函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\d+&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rul = <span class="string">&quot;\\d+&quot;</span></span><br><span class="line"><span class="keyword">const</span> re1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(rul,<span class="string">&quot;g&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>使用构建函数创建，第一个参数可以是一个变量，遇到特殊字符<code>\</code>需要使用<code>\\</code>进行转义</p>
<h2 id="二、匹配规则"><a href="#二、匹配规则" class="headerlink" title="二、匹配规则"></a>二、匹配规则</h2><p>常见的校验规则如下：</p>
<table>
<thead>
<tr>
<th>规则</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>转义</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入的结束</td>
</tr>
<tr>
<td>*</td>
<td>匹配前一个表达式 0 次或多次</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面一个表达式 1 次或者多次。等价于 <code>&#123;1,&#125;</code></td>
</tr>
<tr>
<td>?</td>
<td>匹配前面一个表达式 0 次或者 1 次。等价于<code>&#123;0,1&#125;</code></td>
</tr>
<tr>
<td>.</td>
<td>默认匹配除换行符之外的任何单个字符</td>
</tr>
<tr>
<td>x(?=y)</td>
<td>匹配’x’仅仅当’x’后面跟着’y’。这种叫做先行断言</td>
</tr>
<tr>
<td>(?&lt;=y)x</td>
<td>匹配’x’仅当’x’前面是’y’.这种叫做后行断言</td>
</tr>
<tr>
<td>x(?!y)</td>
<td>仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找</td>
</tr>
<tr>
<td>(?&lt;!<em>y</em>)<em>x</em></td>
<td>仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配‘x’或者‘y’</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个正整数，匹配了前面一个字符刚好出现了 n 次</td>
</tr>
<tr>
<td>{n,}</td>
<td>n是一个正整数，匹配前一个字符至少出现了n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>n 和 m 都是整数。匹配前面的字符至少n次，最多m次</td>
</tr>
<tr>
<td>[xyz]</td>
<td>一个字符集合。匹配方括号中的任意字符</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>匹配任何没有包含在方括号中的字符</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个词的边界，例如在字母和空格之间</td>
</tr>
<tr>
<td>\B</td>
<td>匹配一个非单词边界</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td>\s</td>
<td>匹配一个空白字符，包括空格、制表符、换页符和换行符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配一个非空白字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配一个单字字符（字母、数字或者下划线）</td>
</tr>
<tr>
<td>\W</td>
<td>匹配一个非单字字符</td>
</tr>
</tbody></table>
<h3 id="正则表达式标记"><a href="#正则表达式标记" class="headerlink" title="正则表达式标记"></a>正则表达式标记</h3><table>
<thead>
<tr>
<th align="left">标志</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>g</code></td>
<td align="left">全局搜索。</td>
</tr>
<tr>
<td align="left"><code>i</code></td>
<td align="left">不区分大小写搜索。</td>
</tr>
<tr>
<td align="left"><code>m</code></td>
<td align="left">多行搜索。</td>
</tr>
<tr>
<td align="left"><code>s</code></td>
<td align="left">允许 <code>.</code> 匹配换行符。</td>
</tr>
<tr>
<td align="left"><code>u</code></td>
<td align="left">使用<code>unicode</code>码的模式进行匹配。</td>
</tr>
<tr>
<td align="left"><code>y</code></td>
<td align="left">执行“粘性(<code>sticky</code>)”搜索,匹配从目标字符串的当前位置开始。</td>
</tr>
</tbody></table>
<p>使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/pattern/</span>flags;</span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;pattern&quot;</span>, <span class="string">&quot;flags&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在了解下正则表达式基本的之外，还可以掌握几个正则表达式的特性：</p>
<h3 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h3><p>在了解贪婪模式前，首先举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/ab&#123;1,3&#125;c/</span></span><br></pre></td></tr></table></figure>

<p>在匹配过程中，尝试可能的顺序是从多往少的方向去尝试。首先会尝试<code>bbb</code>，然后再看整个正则是否能匹配。不能匹配时，吐出一个<code>b</code>，即在<code>bb</code>的基础上，再继续尝试，以此重复</p>
<p>如果多个贪婪量词挨着，则深度优先搜索</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regx = <span class="regexp">/(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(reg) );</span><br><span class="line"><span class="comment">// =&gt; [&quot;12345&quot;, &quot;123&quot;, &quot;45&quot;, index: 0, input: &quot;12345&quot;]</span></span><br></pre></td></tr></table></figure>

<p>其中，前面的<code>\d&#123;1,3&#125;</code>匹配的是”123”，后面的<code>\d&#123;1,3&#125;</code>匹配的是”45”</p>
<h3 id="懒惰模式"><a href="#懒惰模式" class="headerlink" title="懒惰模式"></a>懒惰模式</h3><p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;234&quot;, index: 0, input: &quot;12345&quot;]</span></span><br></pre></td></tr></table></figure>

<p>其中<code>\d&#123;1,3&#125;?</code>只匹配到一个字符”1”，而后面的<code>\d&#123;1,3&#125;</code>匹配了”234”</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组主要是用过<code>()</code>进行实现，比如<code>beyond&#123;3&#125;</code>，是匹配<code>d</code>字母3次。而<code>(beyond)&#123;3&#125;</code>是匹配<code>beyond</code>三次</p>
<p>在<code>()</code>内使用<code>|</code>达到或的效果，如<code>(abc | xxx)</code>可以匹配<code>abc</code>或者<code>xxx</code></p>
<p>反向引用，巧用<code>$</code>分组捕获</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;John Smith&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换名字和姓氏</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/(john) (smith)/i</span>, <span class="string">&#x27;$2, $1&#x27;</span>)) <span class="comment">// Smith, John</span></span><br></pre></td></tr></table></figure>





<h2 id="三、匹配方法"><a href="#三、匹配方法" class="headerlink" title="三、匹配方法"></a>三、匹配方法</h2><p>正则表达式常被用于某些方法，我们可以分成两类：</p>
<ul>
<li>字符串（str）方法：<code>match</code>、<code>matchAll</code>、<code>search</code>、<code>replace</code>、<code>split</code></li>
<li>正则对象下（regexp）的方法：<code>test</code>、<code>exec</code></li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">exec</td>
<td align="left">一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</td>
</tr>
<tr>
<td align="left">test</td>
<td align="left">一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。</td>
</tr>
<tr>
<td align="left">match</td>
<td align="left">一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。</td>
</tr>
<tr>
<td align="left">matchAll</td>
<td align="left">一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。</td>
</tr>
<tr>
<td align="left">search</td>
<td align="left">一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td>
</tr>
<tr>
<td align="left">replace</td>
<td align="left">一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td>
</tr>
<tr>
<td align="left">split</td>
<td align="left">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 <code>String</code> 方法。</td>
</tr>
</tbody></table>
<h3 id="str-match-regexp"><a href="#str-match-regexp" class="headerlink" title="str.match(regexp)"></a>str.match(regexp)</h3><p><code>str.match(regexp)</code> 方法在字符串 <code>str</code> 中找到匹配 <code>regexp</code> 的字符</p>
<p>如果 <code>regexp</code> 不带有 <code>g</code> 标记，则它以数组的形式返回第一个匹配项，其中包含分组和属性 <code>index</code>（匹配项的位置）、<code>input</code>（输入字符串，等于 <code>str</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = str.match(<span class="regexp">/Java(Script)/</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( result[<span class="number">0</span>] );     <span class="comment">// JavaScript（完全匹配）</span></span><br><span class="line"><span class="built_in">console</span>.log( result[<span class="number">1</span>] );     <span class="comment">// Script（第一个分组）</span></span><br><span class="line"><span class="built_in">console</span>.log( result.length ); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他信息：</span></span><br><span class="line"><span class="built_in">console</span>.log( result.index );  <span class="comment">// 7（匹配位置）</span></span><br><span class="line"><span class="built_in">console</span>.log( result.input );  <span class="comment">// I love JavaScript（源字符串）</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>regexp</code> 带有 <code>g</code> 标记，则它将所有匹配项的数组作为字符串返回，而不包含分组和其他详细信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = str.match(<span class="regexp">/Java(Script)/g</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( result[<span class="number">0</span>] ); <span class="comment">// JavaScript</span></span><br><span class="line"><span class="built_in">console</span>.log( result.length ); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>如果没有匹配项，则无论是否带有标记 <code>g</code> ，都将返回 <code>null</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = str.match(<span class="regexp">/HTML/</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>



<h3 id="str-matchAll-regexp"><a href="#str-matchAll-regexp" class="headerlink" title="str.matchAll(regexp)"></a>str.matchAll(regexp)</h3><p>返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regexp = <span class="regexp">/t(e)(st(\d?))/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;test1test2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...str.matchAll(regexp)];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;]</span></span><br></pre></td></tr></table></figure>







<h3 id="str-search-regexp"><a href="#str-search-regexp" class="headerlink" title="str.search(regexp)"></a>str.search(regexp)</h3><p>返回第一个匹配项的位置，如果未找到，则返回 <code>-1</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;A drop of ink may make a million think&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( str.search( <span class="regexp">/ink/i</span> ) ); <span class="comment">// 10（第一个匹配位置）</span></span><br></pre></td></tr></table></figure>

<p>这里需要注意的是，<code>search</code> 仅查找第一个匹配项</p>
<h2 id="str-replace-regexp"><a href="#str-replace-regexp" class="headerlink" title="str.replace(regexp)"></a>str.replace(regexp)</h2><p>替换与正则表达式匹配的子串，并返回替换后的字符串。在不设置全局匹配<code>g</code>的时候，只替换第一个匹配成功的字符串片段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg1=<span class="regexp">/javascript/i</span>;</span><br><span class="line"><span class="keyword">const</span> reg2=<span class="regexp">/javascript/ig</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello Javascript Javascript Javascript&#x27;</span>.replace(reg1,<span class="string">&#x27;js&#x27;</span>));</span><br><span class="line"><span class="comment">//hello js Javascript Javascript</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello Javascript Javascript Javascript&#x27;</span>.replace(reg2,<span class="string">&#x27;js&#x27;</span>));</span><br><span class="line"><span class="comment">//hello js js js</span></span><br></pre></td></tr></table></figure>



<h3 id="str-split-regexp"><a href="#str-split-regexp" class="headerlink" title="str.split(regexp)"></a>str.split(regexp)</h3><p>使用正则表达式（或子字符串）作为分隔符来分割字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;12, 34, 56&#x27;</span>.split(<span class="regexp">/,\s*/</span>)) <span class="comment">// 数组 [&#x27;12&#x27;, &#x27;34&#x27;, &#x27;56&#x27;]</span></span><br></pre></td></tr></table></figure>



<h3 id="regexp-exec-str"><a href="#regexp-exec-str" class="headerlink" title="regexp.exec(str)"></a>regexp.exec(str)</h3><p><code>regexp.exec(str)</code> 方法返回字符串 <code>str</code> 中的 <code>regexp</code> 匹配项，与以前的方法不同，它是在正则表达式而不是字符串上调用的</p>
<p>根据正则表达式是否带有标志 <code>g</code>，它的行为有所不同</p>
<p>如果没有 <code>g</code>，那么 <code>regexp.exec(str)</code> 返回的第一个匹配与 <code>str.match(regexp)</code> 完全相同</p>
<p>如果有标记 <code>g</code>，调用 <code>regexp.exec(str)</code> 会返回第一个匹配项，并将紧随其后的位置保存在属性<code>regexp.lastIndex</code> 中。 下一次同样的调用会从位置 <code>regexp.lastIndex</code> 开始搜索，返回下一个匹配项，并将其后的位置保存在 <code>regexp.lastIndex</code> 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;More about JavaScript at https://javascript.info&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> regexp = <span class="regexp">/javascript/ig</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (result = regexp.exec(str)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">`Found <span class="subst">$&#123;result[<span class="number">0</span>]&#125;</span> at position <span class="subst">$&#123;result.index&#125;</span>`</span> );</span><br><span class="line">  <span class="comment">// Found JavaScript at position 11</span></span><br><span class="line">  <span class="comment">// Found javascript at position 33</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="regexp-test-str"><a href="#regexp-test-str" class="headerlink" title="regexp.test(str)"></a>regexp.test(str)</h3><p>查找匹配项，然后返回 <code>true/false</code> 表示是否存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;I love JavaScript&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两个测试相同</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/love/i</span>.test(str) ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>





<h2 id="四、应用场景"><a href="#四、应用场景" class="headerlink" title="四、应用场景"></a>四、应用场景</h2><p>通过上面的学习，我们对正则表达式有了一定的了解</p>
<p>下面再来看看正则表达式一些案例场景：</p>
<p>验证QQ合法性（5~15位、全是数字、不以0开头）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^[1-9][0-9]&#123;4,14&#125;$/</span></span><br><span class="line"><span class="keyword">const</span> isvalid = patrn.exec(s)</span><br></pre></td></tr></table></figure>

<p>校验用户账号合法性（只能输入5-20个以字母开头、可带数字、“_”、“.”的字串）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> patrn=<span class="regexp">/^[a-zA-Z]&#123;1&#125;([a-zA-Z0-9]|[._])&#123;4,19&#125;$/</span>;</span><br><span class="line"><span class="keyword">const</span> isvalid = patrn.exec(s)</span><br></pre></td></tr></table></figure>

<p>将<code>url</code>参数解析为对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> protocol = <span class="string">&#x27;(?&lt;protocol&gt;https?:)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&#x27;(?&lt;host&gt;(?&lt;hostname&gt;[^/#?:]+)(?::(?&lt;port&gt;\\d+))?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="string">&#x27;(?&lt;pathname&gt;(?:\\/[^/#?]+)*\\/?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> search = <span class="string">&#x27;(?&lt;search&gt;(?:\\?[^#]*)?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> hash = <span class="string">&#x27;(?&lt;hash&gt;(?:#.*)?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^<span class="subst">$&#123;protocol&#125;</span>\/\/<span class="subst">$&#123;host&#125;</span><span class="subst">$&#123;path&#125;</span><span class="subst">$&#123;search&#125;</span><span class="subst">$&#123;hash&#125;</span>$`</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execURL</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = reg.exec(url);</span><br><span class="line">    <span class="keyword">if</span>(result)&#123;</span><br><span class="line">        result.groups.port = result.groups.port || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> result.groups;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">protocol</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">host</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">hostname</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">port</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">pathname</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">search</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">hash</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(execURL(<span class="string">&#x27;https://localhost:8080/?a=b#xxxx&#x27;</span>));</span><br><span class="line">protocol: <span class="string">&quot;https:&quot;</span></span><br><span class="line"><span class="attr">host</span>: <span class="string">&quot;localhost:8080&quot;</span></span><br><span class="line"><span class="attr">hostname</span>: <span class="string">&quot;localhost&quot;</span></span><br><span class="line"><span class="attr">port</span>: <span class="string">&quot;8080&quot;</span></span><br><span class="line"><span class="attr">pathname</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="attr">search</span>: <span class="string">&quot;?a=b&quot;</span></span><br><span class="line"><span class="attr">hash</span>: <span class="string">&quot;#xxxx&quot;</span></span><br></pre></td></tr></table></figure>

<p>再将上面的<code>search</code>和<code>hash</code>进行解析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execUrlParams</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    str = str.replace(<span class="regexp">/^[#?&amp;]/</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(!str)&#123; <span class="comment">//如果正则可能配到空字符串，极有可能造成死循环，判断很重要</span></span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/(?:^|&amp;)([^&amp;=]*)=?([^&amp;]*?)(?=&amp;|$)/y</span></span><br><span class="line">    <span class="keyword">let</span> exec = reg.exec(str);</span><br><span class="line">    <span class="keyword">while</span>(exec)&#123;</span><br><span class="line">        result[exec[<span class="number">1</span>]] = exec[<span class="number">2</span>];</span><br><span class="line">        exec = reg.exec(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(execUrlParams(<span class="string">&#x27;#&#x27;</span>));<span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(execUrlParams(<span class="string">&#x27;##&#x27;</span>));<span class="comment">//&#123;&#x27;#&#x27;:&#x27;&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(execUrlParams(<span class="string">&#x27;?q=3606&amp;src=srp&#x27;</span>)); <span class="comment">//&#123;q: &quot;3606&quot;, src: &quot;srp&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(execUrlParams(<span class="string">&#x27;test=a=b=c&amp;&amp;==&amp;a=&#x27;</span>));<span class="comment">//&#123;test: &quot;a=b=c&quot;, &quot;&quot;: &quot;=&quot;, a: &quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>regexp</tag>
      </tags>
  </entry>
  <entry>
    <title>responsive_layout</title>
    <url>/archives/203410a2.html</url>
    <content><![CDATA[<h3 id="1-什么是响应式设计"><a href="#1-什么是响应式设计" class="headerlink" title="1.什么是响应式设计"></a>1.什么是响应式设计</h3><p>响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整</p>
<p>描述响应式界面最著名的一句话就是“Content is like water”</p>
<p>大白话便是“如果将屏幕看作容器，那么内容就像水一样”</p>
<p>响应式网站常见特点：</p>
<ul>
<li><p>同时适配PC + 平板 + 手机等</p>
</li>
<li><p>标签导航在接近手持终端设备时改变为经典的抽屉式导航</p>
</li>
<li><p>网站的布局会根据视口来调整模块的大小和位置</p>
</li>
</ul>
<p> <img src="https://static.vue-js.com/ae68be30-9dba-11eb-85f6-6fac77c0c9b3.png"></p>
<h3 id="2-响应式基本原理"><a href="#2-响应式基本原理" class="headerlink" title="2.响应式基本原理"></a>2.响应式基本原理</h3><p>响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须有<code>meta</code>声明<code>viewport</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>属性对应如下：</p>
<ul>
<li><p>width=device-width: 是自适应手机屏幕的尺寸宽度</p>
</li>
<li><p>maximum-scale:是缩放比例的最大值</p>
</li>
<li><p>inital-scale:是缩放的初始化</p>
</li>
<li><p>user-scalable:是用户的可以缩放的操作</p>
</li>
</ul>
<p>实现响应式布局的方式有如下：</p>
<ul>
<li>媒体查询</li>
<li>百分比</li>
<li>vw/vh</li>
<li>rem</li>
</ul>
<h3 id="3-媒体查询"><a href="#3-媒体查询" class="headerlink" title="3.媒体查询"></a>3.媒体查询</h3><p><code>CSS3 </code>中的增加了更多的媒体查询，就像<code>if</code>条件表达式一样，我们可以设置不同类型的媒体条件，并根据对应的条件，给相应符合条件的媒体调用相对应的样式表</p>
<p>使用<code>@Media</code>查询，可以针对不同的媒体类型定义不同的样式，如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1920px</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>当视口在375px - 600px之间，设置特定字体大小18px</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen (<span class="attribute">min-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片</p>
<p>比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现</p>
<h3 id="4-百分比"><a href="#4-百分比" class="headerlink" title="4.百分比"></a>4.百分比</h3><p>通过百分比单位 “ % “ 来实现响应式的效果</p>
<p> 比如当浏览器的宽度或者高度发生变化时，通过百分比单位，可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果</p>
<p><code>height</code>、<code>width</code>属性的百分比依托于父标签的宽高，但是其他盒子属性则不完全依赖父元素：</p>
<ul>
<li><p>子元素的top/left和bottom/right如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度/宽度</p>
</li>
<li><p>子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。</p>
</li>
<li><p>子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width</p>
</li>
<li><p>border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度</p>
</li>
</ul>
<p>可以看到每个属性都使用百分比，会照成布局的复杂度，所以不建议使用百分比来实现响应式</p>
<h3 id="5-vw-vh"><a href="#5-vw-vh" class="headerlink" title="5.vw/vh"></a>5.vw/vh</h3><p><code>vw</code>表示相对于视图窗口的宽度，<code>vh</code>表示相对于视图窗口高度。 任意层级元素，在使用<code>vw</code>单位的情况下，<code>1vw</code>都等于视图宽度的百分之一</p>
<p>与百分比布局很相似，在以前文章提过与<code>%</code>的区别，这里就不再展开述说</p>
<h3 id="6-rem"><a href="#6-rem" class="headerlink" title="6.rem"></a>6.rem</h3><p>在以前也讲到，<code>rem</code>是相对于根元素<code>html</code>的<code>font-size</code>属性，默认情况下浏览器字体大小为<code>16px</code>，此时<code>1rem = 16px</code></p>
<p>可以利用前面提到的媒体查询，针对不同设备分辨率改变<code>font-size</code>的值，如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">414px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">375px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了更准确监听设备可视窗口变化，我们可以在<code>css</code>之前插入<code>script</code>标签，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态为根元素设置字体大小</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取屏幕宽度</span></span><br><span class="line">    <span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">    <span class="comment">// 设置根元素字体大小。此时为宽的10等分</span></span><br><span class="line">    <span class="built_in">document</span>.documentElement.style.fontSize = width / <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首次加载应用，设置一次</span></span><br><span class="line">init()</span><br><span class="line"><span class="comment">// 监听手机旋转的事件的时机，重新设置</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;orientationchange&#x27;</span>, init)</span><br><span class="line"><span class="comment">// 监听手机窗口变化，重新设置</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, init)</span><br></pre></td></tr></table></figure>

<p>无论设备可视窗口如何变化，始终设置<code>rem</code>为<code>width</code>的1/10，实现了百分比布局</p>
<p>除此之外，我们还可以利用主流<code>UI</code>框架，如：<code>element ui</code>、<code>antd</code>提供的栅格布局实现响应式</p>
<h3 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h3><p>响应式设计实现通常会从以下几方面思考：</p>
<ul>
<li>弹性盒子（包括图片、表格、视频）和媒体查询等技术</li>
<li>使用百分比布局创建流式布局的弹性UI，同时使用媒体查询限制元素的尺寸和内容变更范围</li>
<li>使用相对单位使得内容自适应调节</li>
<li>选择断点，针对不同断点实现不同布局和内容展示</li>
</ul>
<h3 id="8-响应式优缺点"><a href="#8-响应式优缺点" class="headerlink" title="8.响应式优缺点"></a>8.响应式优缺点</h3><p>响应式布局优点可以看到：</p>
<ul>
<li>面对不同分辨率设备灵活性强</li>
<li>能够快捷解决多设备显示适应问题</li>
</ul>
<p>缺点：</p>
<ul>
<li>仅适用布局、信息、框架并不复杂的部门类型网站</li>
<li>兼容各种设备工作量大，效率低下</li>
<li>代码累赘，会出现隐藏无用的元素，加载时间加长</li>
<li>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</li>
<li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>responsive_layout</tag>
      </tags>
  </entry>
  <entry>
    <title>sass_less_stylus</title>
    <url>/archives/2039e3ed.html</url>
    <content><![CDATA[<h1 id="面试官：说说对Css预编语言的理解？有哪些区别"><a href="#面试官：说说对Css预编语言的理解？有哪些区别" class="headerlink" title="面试官：说说对Css预编语言的理解？有哪些区别?"></a>面试官：说说对Css预编语言的理解？有哪些区别?</h1><p> <img src="https://static.vue-js.com/81cca1c0-a42c-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>Css</code> 作为一门标记性语言，语法相对简单，对使用者的要求较低，但同时也带来一些问题</p>
<p>需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用，尤其对于非前端开发工程师来讲，往往会因为缺少 <code>Css</code> 编写经验而很难写出组织良好且易于维护的 <code>Css</code> 代码</p>
<p><code>Css</code>预处理器便是针对上述问题的解决方案</p>
<h4 id="预处理语言"><a href="#预处理语言" class="headerlink" title="预处理语言"></a>预处理语言</h4><p>扩充了 <code>Css</code> 语言，增加了诸如变量、混合（mixin）、函数等功能，让 <code>Css</code> 更易维护、方便</p>
<p>本质上，预处理是<code>Css</code>的超集</p>
<p>包含一套自定义的语法及一个解析器，根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 <code>Css</code> 文件</p>
<h2 id="二、有哪些"><a href="#二、有哪些" class="headerlink" title="二、有哪些"></a>二、有哪些</h2><p><code>Css</code>预编译语言在前端里面有三大优秀的预编处理器，分别是：</p>
<ul>
<li>sass</li>
<li>less</li>
<li>stylus</li>
</ul>
<h3 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h3><p>2007 年诞生，最早也是最成熟的 <code>Css </code>预处理器，拥有 Ruby 社区的支持和 <code>Compass</code> 这一最强大的 <code>Css </code>框架，目前受 <code>LESS</code> 影响，已经进化到了全面兼容 <code>Css</code> 的 <code>Scss</code></p>
<p>文件后缀名为<code>.sass</code>与<code>scss</code>，可以严格按照 sass 的缩进方式省去大括号和分号</p>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>2009年出现，受<code>SASS</code>的影响较大，但又使用 <code>Css</code> 的语法，让大部分开发者和设计师更容易上手，在 <code>Ruby </code>社区之外支持者远超过 <code>SASS</code></p>
<p>其缺点是比起 <code>SASS </code>来，可编程功能不够，不过优点是简单和兼容 <code>Css</code>，反过来也影响了 <code>SASS </code>演变到了<code> Scss</code> 的时代</p>
<h3 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h3><p><code>Stylus </code>是一个<code>Css</code>的预处理框架，2010 年产生，来自 <code>Node.js </code>社区，主要用来给 <code>Node</code> 项目进行 <code>Css</code> 预处理支持</p>
<p>所以<code> Stylus</code> 是一种新型语言，可以创建健壮的、动态的、富有表现力的<code> Css</code>。比较年轻，其本质上做的事情与<code>SASS/LESS</code>等类似</p>
<h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><p>虽然各种预处理器功能强大，但使用最多的，还是以下特性：</p>
<ul>
<li>变量（variables）</li>
<li>作用域（scope）</li>
<li>代码混合（ mixins）</li>
<li>嵌套（nested rules）</li>
<li>代码模块化（Modules）</li>
</ul>
<p>因此，下面就展开这些方面的区别</p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>less和scss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sass</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span></span><br><span class="line">  <span class="attribute">display</span>: block</span><br></pre></td></tr></table></figure>

<p>stylus</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span></span><br><span class="line">  <span class="attribute">display</span>: block</span><br></pre></td></tr></table></figure>





<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>三者的嵌套语法都是一致的，甚至连引用父级选择器的标记 &amp; 也相同</p>
<p>区别只是 Sass 和 Stylus 可以用没有大括号的方式书写</p>
<p>less</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  &amp;<span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量无疑为 Css 增加了一种有效的复用方式，减少了原来在 Css 中无法避免的重复「硬编码」</p>
<p><code>less</code>声明的变量必须以<code>@</code>开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号<code>:</code>分隔开</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@red</span>: #c00;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: @red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>sass</code>声明的变量跟<code>less</code>十分的相似，只是变量名前面使用<code>@</code>开头</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$red: <span class="number">#c00</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: $red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>stylus</code>声明的变量没有任何的限定，可以使用<code>$</code>开头，结尾的分号<code>;</code>可有可无，但变量与变量值之间需要使用<code>=</code></p>
<p>在<code>stylus</code>中我们不建议使用<code>@</code>符号开头声明变量</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">red = <span class="selector-id">#c00</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span></span><br><span class="line">  <span class="attribute">color</span>: red</span><br></pre></td></tr></table></figure>





<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><code>Css</code> 预编译器把变量赋予作用域，也就是存在生命周期。就像 <code>js </code>一样，它会先从局部作用域查找变量，依次向上级作用域查找</p>
<p><code>sass</code>中不存在全局变量</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$<span class="attribute">color</span>: black;</span><br><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  $bg: blue;</span><br><span class="line">  $<span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: $color;</span><br><span class="line">  <span class="attribute">background-color</span>:$bg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:$color;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>编译后</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:white;<span class="comment">/*是白色*/</span></span><br><span class="line">  <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:white;<span class="comment">/*白色（无全局变量概念）*/</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>所以，在<code>sass</code>中最好不要定义相同的变量名</p>
<p><code>less</code>与<code>stylus</code>的作用域跟<code>javascript</code>十分的相似，首先会查找局部定义的变量，如果没有找到，会像冒泡一样，一级一级往下查找，直到根为止</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@color</span>: black;</span><br><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  <span class="keyword">@bg</span>: blue;</span><br><span class="line">  <span class="keyword">@color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: @color;</span><br><span class="line">  <span class="attribute">background-color</span>:@bg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:@color;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>编译后：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:white;<span class="comment">/*白色（调用了局部变量）*/</span></span><br><span class="line">  <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.unscoped</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:black;<span class="comment">/*黑色（调用了全局变量）*/</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>





<h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><p>混入（mixin）应该说是预处理器最精髓的功能之一了，简单点来说，<code>Mixins</code>可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用</p>
<p>可以在<code>Mixins</code>中定义变量或者默认参数</p>
<p>在<code>less</code>中，混合的用法是指将定义好的<code>ClassA</code>中引入另一个已经定义的<code>Class</code>，也能使用够传递参数，参数变量为<code>@</code>声明</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span>(<span class="keyword">@color</span>: red) &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: @color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.heads-up</span> &#123;</span><br><span class="line">  <span class="selector-class">.alert</span>;</span><br><span class="line">  <span class="selector-class">.highlight</span>(red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译后</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.heads-up</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Sass</code>声明<code>mixins</code>时需要使用<code>@mixinn</code>，后面紧跟<code>mixin</code>的名，也可以设置参数，参数名为变量<code>$</code>声明的形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: Arial;</span><br><span class="line">    size: <span class="number">20px</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>stylus</code>中的混合和前两款<code>Css</code>预处理器语言的混合略有不同，他可以不使用任何符号，就是直接声明<code>Mixins</code>名，然后在定义参数和默认值之间用等号（=）来连接</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">error(borderWidth= <span class="number">2px</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: borderWidth solid <span class="number">#F00</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#F00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.generic-error</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">4px</span>;</span><br><span class="line">  error(); <span class="comment">/* 调用error mixins */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-error</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  error(<span class="number">5px</span>); <span class="comment">/* 调用error mixins，并将参数$borderWidth的值指定为5px */</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>





<h3 id="代码模块化"><a href="#代码模块化" class="headerlink" title="代码模块化"></a>代码模块化</h3><p>模块化就是将<code>Css</code>代码分成一个个模块</p>
<p><code>scss</code>、<code>less</code>、<code>stylus</code>三者的使用方法都如下所示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./common&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./github-markdown&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./mixin&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./variables&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://jelly.jd.com/article/5dcb9c73641a030153732a89">https://jelly.jd.com/article/5dcb9c73641a030153732a89</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23382462">https://zhuanlan.zhihu.com/p/23382462</a></li>
<li><a href="https://baike.baidu.com/item/Less/17570158">https://baike.baidu.com/item/Less/17570158</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>sass_less_stylus</tag>
      </tags>
  </entry>
  <entry>
    <title>scope</title>
    <url>/archives/af55d3.html</url>
    <content><![CDATA[<h1 id="面试官：说说你对作用域链的理解"><a href="#面试官：说说你对作用域链的理解" class="headerlink" title="面试官：说说你对作用域链的理解"></a>面试官：说说你对作用域链的理解</h1><p> <img src="https://static.vue-js.com/16f614a0-718f-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><p>作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合</p>
<p>换句话说，作用域决定了代码区块中变量和其他资源的可见性</p>
<p>举个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> inVariable = <span class="string">&quot;函数内部变量&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">myFunction();<span class="comment">//要先执行这个函数，否则根本不知道里面是啥</span></span><br><span class="line"><span class="built_in">console</span>.log(inVariable); <span class="comment">// Uncaught ReferenceError: inVariable is not defined</span></span><br></pre></td></tr></table></figure>

<p>上述例子中，函数<code>myFunction</code>内部创建一个<code>inVariable</code>变量，当我们在全局访问这个变量的时候，系统会报错</p>
<p>这就说明我们在全局是无法获取到（闭包除外）函数内部的变量</p>
<p>我们一般将作用域分成：</p>
<ul>
<li><p>全局作用域</p>
</li>
<li><p>函数作用域</p>
</li>
<li><p>块级作用域</p>
</li>
</ul>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> greeting = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 &#x27;Hello World!&#x27;</span></span><br><span class="line">greet();</span><br></pre></td></tr></table></figure>


<h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数作用域也叫局部作用域，如果一个变量是在函数内部声明的它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 &#x27;Hello World!&#x27;</span></span><br><span class="line">greet();</span><br><span class="line"><span class="comment">// 报错： Uncaught ReferenceError: greeting is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(greeting);</span><br></pre></td></tr></table></figure>
<p>可见上述代码中在函数内部声明的变量或函数，在函数外部是无法访问的，这说明在函数内部定义的变量或者方法只是函数作用域</p>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>ES6引入了<code>let</code>和<code>const</code>关键字,和<code>var</code>关键字不同，在大括号中使用<code>let</code>和<code>const</code>声明的变量存在于块级作用域中。在大括号之外不能访问这些变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 块级作用域中的变量</span></span><br><span class="line">  <span class="keyword">let</span> greeting = <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> lang = <span class="string">&#x27;English&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting); <span class="comment">// Prints &#x27;Hello World!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量 &#x27;English&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(lang);</span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: greeting is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(greeting);</span><br></pre></td></tr></table></figure>



<h2 id="二、词法作用域"><a href="#二、词法作用域" class="headerlink" title="二、词法作用域"></a>二、词法作用域</h2><p>词法作用域，又叫静态作用域，变量被创建时就确定好了，而非执行阶段确定的。也就是说我们写好代码时它的作用域就确定了，<code>JavaScript</code> 遵循的就是词法作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">n()</span><br></pre></td></tr></table></figure>

<p>上述代码改变成一张图</p>
<p> <img src="https://static.vue-js.com/29fab3d0-718f-11eb-85f6-6fac77c0c9b3.png"></p>
<p>由于<code>JavaScript</code>遵循词法作用域，相同层级的 <code>foo</code> 和 <code>bar</code> 就没有办法访问到彼此块作用域中的变量，所以输出2</p>
<h2 id="三、作用域链"><a href="#三、作用域链" class="headerlink" title="三、作用域链"></a>三、作用域链</h2><p>当在<code>Javascript</code>中使用一个变量的时候，首先<code>Javascript</code>引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域</p>
<p>如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错</p>
<p>这里拿《你不知道的Javascript(上)》中的一张图解释：</p>
<p>把作用域比喻成一个建筑，这份建筑代表程序中的嵌套作用域链，第一层代表当前的执行作用域，顶层代表全局作用域</p>
<p> <img src="https://static.vue-js.com/33f9c100-718f-11eb-85f6-6fac77c0c9b3.png"></p>
<p>变量的引用会顺着当前楼层进行查找，如果找不到，则会往上一层找，一旦到达顶层，查找的过程都会停止</p>
<p>下面代码演示下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(name); <span class="comment">// 张三</span></span><br><span class="line">        <span class="built_in">console</span>.log(sex); <span class="comment">// 男 </span></span><br><span class="line">    &#125;</span><br><span class="line">    student();</span><br><span class="line">    <span class="built_in">console</span>.log(age); <span class="comment">// Uncaught ReferenceError: age is not defined</span></span><br><span class="line">&#125;</span><br><span class="line">person();</span><br></pre></td></tr></table></figure>

<p>上述代码主要主要做了以下工作：</p>
<ul>
<li><code>student</code>函数内部属于最内层作用域，找不到<code>name</code>，向上一层作用域<code>person</code>函数内部找，找到了输出“张三”</li>
<li><code>student</code>内部输出<code>sex</code>时找不到，向上一层作用域<code>person</code>函数找，还找不到继续向上一层找，即全局作用域，找到了输出“男”</li>
<li>在<code>person</code>函数内部输出<code>age</code>时找不到，向上一层作用域找，即全局作用域，还是找不到则报错</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>scope</tag>
      </tags>
  </entry>
  <entry>
    <title>security</title>
    <url>/archives/c59bd5c1.html</url>
    <content><![CDATA[<h1 id="面试官：web常见的攻击方式有哪些？如何防御？"><a href="#面试官：web常见的攻击方式有哪些？如何防御？" class="headerlink" title="面试官：web常见的攻击方式有哪些？如何防御？"></a>面试官：web常见的攻击方式有哪些？如何防御？</h1><p> <img src="https://static.vue-js.com/d0892930-8d1d-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>Web攻击（WebAttack）是针对用户上网行为或网站服务器等设备进行攻击的行为</p>
<p>如植入恶意代码，修改网站权限，获取网站用户隐私信息等等</p>
<p>Web应用程序的安全性是任何基于Web业务的重要组成部分</p>
<p>确保Web应用程序安全十分重要，即使是代码中很小的 bug 也有可能导致隐私信息被泄露</p>
<p>站点安全就是为保护站点不受未授权的访问、使用、修改和破坏而采取的行为或实践</p>
<p>我们常见的Web攻击方式有</p>
<ul>
<li>XSS (Cross Site Scripting) 跨站脚本攻击</li>
<li>CSRF（Cross-site request forgery）跨站请求伪造</li>
<li>SQL注入攻击</li>
</ul>
<h2 id="二、XSS"><a href="#二、XSS" class="headerlink" title="二、XSS"></a>二、XSS</h2><p>XSS，跨站脚本攻击，允许攻击者将恶意代码植入到提供给其它用户使用的页面中</p>
<p><code>XSS</code>涉及到三方，即攻击者、客户端与<code>Web</code>应用</p>
<p><code>XSS</code>的攻击目标是为了盗取存储在客户端的<code>cookie</code>或者其他网站用于识别客户端身份的敏感信息。一旦获取到合法用户的信息后，攻击者甚至可以假冒合法用户与网站进行交互</p>
<p>举个例子：</p>
<p>一个搜索页面，根据<code>url</code>参数决定关键词的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;%= getParameter(&quot;</span><span class="attr">keyword</span>&quot;) %&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  您搜索的关键词是：&lt;%= getParameter(&quot;keyword&quot;) %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里看似并没有问题，但是如果不按套路出牌呢？</p>
<p>用户输入<code>&quot;&gt;&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>，拼接到 HTML 中返回给浏览器。形成了如下的 HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;XSS&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  您搜索的关键词是：&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;XSS&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器无法分辨出 <code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code> 是恶意代码，因而将其执行，试想一下，如果是获取<code>cookie</code>发送对黑客服务器呢？</p>
<p>根据攻击的来源，<code>XSS</code>攻击可以分成：</p>
<ul>
<li>存储型</li>
<li>反射型</li>
<li>DOM 型</li>
</ul>
<h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>存储型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者将恶意代码提交到目标网站的数据库中</li>
<li>用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等</p>
<h3 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h3><p>反射型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<p>反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。</p>
<p>反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。</p>
<p>由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。</p>
<p>POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见</p>
<h3 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h3><p>DOM 型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码</li>
<li>用户打开带有恶意代码的 URL</li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<p>DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞</p>
<h3 id="XSS的预防"><a href="#XSS的预防" class="headerlink" title="XSS的预防"></a>XSS的预防</h3><p>通过前面介绍，看到<code>XSS</code>攻击的两大要素：</p>
<ul>
<li>攻击者提交而恶意代码</li>
<li>浏览器执行恶意代码</li>
</ul>
<p>针对第一个要素，我们在用户输入的过程中，过滤掉用户输入的恶劣代码，然后提交给后端，但是如果攻击者绕开前端请求，直接构造请求就不能预防了</p>
<p>而如果在后端写入数据库前，对输入进行过滤，然后把内容给前端，但是这个内容在不同地方就会有不同显示</p>
<p>例如：</p>
<p>一个正常的用户输入了 <code>5 &lt; 7</code> 这个内容，在写入数据库前，被转义，变成了 <code>5 &lt; 7</code></p>
<p>在客户端中，一旦经过了 <code>escapeHTML()</code>，客户端显示的内容就变成了乱码( <code>5 &lt; 7</code> )</p>
<p>在前端中，不同的位置所需的编码也不同。</p>
<ul>
<li>当 <code>5 &lt; 7</code> 作为 HTML 拼接页面时，可以正常显示：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;comment&quot;</span>&gt;</span>5 <span class="symbol">&amp;lt;</span> 7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当 <code>5 &lt; 7</code> 通过 Ajax 返回，然后赋值给 JavaScript 的变量时，前端得到的字符串就是转义后的字符。这个内容不能直接用于 Vue 等模板的展示，也不能直接用于内容长度计算。不能用于标题、alert 等</li>
</ul>
<p>可以看到，过滤并非可靠的，下面就要通过防止浏览器执行恶意代码：</p>
<p>在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 <code>.textContent</code>、<code>.setAttribute()</code> 等</p>
<p>如果用 <code>Vue/React</code> 技术栈，并且不使用 <code>v-html</code>/<code>dangerouslySetInnerHTML</code> 功能，就在前端 <code>render</code> 阶段避免 <code>innerHTML</code>、<code>outerHTML</code> 的 XSS 隐患</p>
<p>DOM 中的内联事件监听器，如 <code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code> 等，<code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，JavaScript 的 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code> 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 链接内包含恶意代码 --&gt;</span><br><span class="line">&lt; a href=<span class="string">&quot; &quot;</span>&gt;<span class="number">1</span>&lt;/ a&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// setTimeout()/setInterval() 中调用恶意代码</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// location 调用恶意代码</span></span><br><span class="line">location.href = <span class="string">&#x27;UNTRUSTED&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eval() 中调用恶意代码</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="三、CSRF"><a href="#三、CSRF" class="headerlink" title="三、CSRF"></a>三、CSRF</h2><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求</p>
<p>利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目</p>
<p>一个典型的CSRF攻击有着如下的流程：</p>
<ul>
<li>受害者登录a.com，并保留了登录凭证（Cookie）</li>
<li>攻击者引诱受害者访问了b.com</li>
<li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie</li>
<li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求</li>
<li>a.com以受害者的名义执行了act=xx</li>
<li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作</li>
</ul>
<p><code>csrf</code>可以通过<code>get</code>请求，即通过访问<code>img</code>的页面后，浏览器自动访问目标地址，发送请求</p>
<p>同样，也可以设置一个自动提交的表单发送<code>post</code>请求，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://bank.example/withdraw&quot;</span> method=POST&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaoming&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;for&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="built_in">document</span>.forms[<span class="number">0</span>].submit(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br></pre></td></tr></table></figure>

<p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次<code>POST</code>操作</p>
<p>还有一种为使用<code>a</code>标签的，需要用户点击链接才会触发</p>
<p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; a href=&quot;http://test.com/csrf/withdraw.php?amount=1000&amp;for=hacker&quot; taget=&quot;_blank&quot;&gt;</span><br><span class="line">    重磅消息！！</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="CSRF的特点"><a href="#CSRF的特点" class="headerlink" title="CSRF的特点"></a>CSRF的特点</h3><ul>
<li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生</li>
<li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据</li>
<li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”</li>
<li>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪</li>
</ul>
<h3 id="CSRF的预防"><a href="#CSRF的预防" class="headerlink" title="CSRF的预防"></a>CSRF的预防</h3><p>CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性</p>
<p>防止<code>csrf</code>常用方案如下：</p>
<ul>
<li>阻止不明外域的访问<ul>
<li>同源检测</li>
<li>Samesite Cookie</li>
</ul>
</li>
<li>提交时要求附加本域才能获取的信息<ul>
<li>CSRF Token</li>
<li>双重Cookie验证</li>
</ul>
</li>
</ul>
<p>这里主要讲讲<code>token</code>这种形式，流程如下：</p>
<ul>
<li>用户打开页面的时候，服务器需要给这个用户生成一个Token</li>
<li>对于GET请求，Token将附在请求地址之后。对于 POST 请求来说，要在 form 的最后加上</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”hidden”</span> <span class="attr">name</span>=<span class="string">”csrftoken”</span> <span class="attr">value</span>=<span class="string">”tokenvalue”/</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性</li>
</ul>
<h2 id="四、SQL注入"><a href="#四、SQL注入" class="headerlink" title="四、SQL注入"></a>四、SQL注入</h2><p>Sql 注入攻击，是通过将恶意的 <code>Sql </code>查询或添加语句插入到应用的输入参数中，再在后台 <code>Sql </code>服务器上解析执行进行的攻击</p>
<p> <img src="https://static.vue-js.com/ead52fa0-8d1d-11eb-85f6-6fac77c0c9b3.png"></p>
<p>流程如下所示：</p>
<ul>
<li><p>找出SQL漏洞的注入点</p>
</li>
<li><p>判断数据库的类型以及版本</p>
</li>
<li><p> 猜解用户名和密码</p>
</li>
<li><p>利用工具查找Web后台管理入口</p>
</li>
<li><p>入侵和破坏</p>
</li>
</ul>
<p>预防方式如下：</p>
<ul>
<li>严格检查输入变量的类型和格式</li>
<li>过滤和转义特殊字符</li>
<li>对访问数据库的Web应用程序采用Web应用防火墙</li>
</ul>
<p>上述只是列举了常见的<code>web</code>攻击方式，实际开发过程中还会遇到很多安全问题，对于这些问题， 切记不可忽视</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://tech.meituan.com/2018/09/27/fe-security.html">https://tech.meituan.com/2018/09/27/fe-security.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/learn/Server-side/First_steps/Website_security">https://developer.mozilla.org/zh-CN/docs/learn/Server-side/First_steps/Website_security</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>selector</title>
    <url>/archives/9692e25d.html</url>
    <content><![CDATA[<h1 id="面试官：css选择器有哪些？优先级？哪些属性可以继承？"><a href="#面试官：css选择器有哪些？优先级？哪些属性可以继承？" class="headerlink" title="面试官：css选择器有哪些？优先级？哪些属性可以继承？"></a>面试官：css选择器有哪些？优先级？哪些属性可以继承？</h1><p> <img src="https://static.vue-js.com/f7dcd330-8fe1-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、选择器"><a href="#一、选择器" class="headerlink" title="一、选择器"></a>一、选择器</h2><p>CSS选择器是CSS规则的第一部分</p>
<p>它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式</p>
<p>选择器所选择的元素，叫做“选择器的对象”</p>
<p>我们从一个<code>Html</code>结构开始</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one_1&quot;</span>&gt;</span></span><br><span class="line">        &lt;/p &gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one_1&quot;</span>&gt;</span></span><br><span class="line">        &lt;/p &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于<code>css</code>属性选择器常用的有：</p>
<ul>
<li><p>id选择器（#box），选择id为box的元素</p>
</li>
<li><p>类选择器（.one），选择类名为one的所有元素</p>
</li>
<li><p>标签选择器（div），选择标签为div的所有元素</p>
</li>
<li><p>后代选择器（#box div），选择id为box元素内部所有的div元素</p>
</li>
<li><p>子选择器（.one&gt;one_1），选择父元素为.one的所有.one_1的元素</p>
</li>
<li><p>相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素</p>
</li>
<li><p>群组选择器（div,p），选择div、p的所有元素</p>
</li>
</ul>
<p>还有一些使用频率相对没那么多的选择器：</p>
<ul>
<li>伪类选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span> ：选择未被访问的链接</span><br><span class="line"><span class="selector-pseudo">:visited</span>：选取已被访问的链接</span><br><span class="line"><span class="selector-pseudo">:active</span>：选择活动链接</span><br><span class="line"><span class="selector-pseudo">:hover</span> ：鼠标指针浮动在上面的元素</span><br><span class="line"><span class="selector-pseudo">:focus</span> ：选择具有焦点的</span><br><span class="line"><span class="selector-pseudo">:first</span>-child：父元素的首个子元素</span><br></pre></td></tr></table></figure>

<ul>
<li>伪元素选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-letter ：用于选取指定选择器的首字母</span><br><span class="line"><span class="selector-pseudo">:first</span>-line ：选取指定选择器的首行</span><br><span class="line">:before : 选择器在被选元素的内容前面插入内容</span><br><span class="line">:after : 选择器在被选元素的内容后面插入内容</span><br></pre></td></tr></table></figure>

<ul>
<li>属性选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[attribute]</span> 选择带有attribute属性的元素</span><br><span class="line"><span class="selector-attr">[attribute=value]</span> 选择所有使用attribute=value的元素</span><br><span class="line"><span class="selector-attr">[attribute~=value]</span> 选择attribute属性包含value的元素</span><br><span class="line"><span class="selector-attr">[attribute|=value]</span>：选择attribute属性以value开头的元素</span><br></pre></td></tr></table></figure>

<p>在<code>CSS3</code>中新增的选择器有如下：</p>
<ul>
<li>层次选择器（p~ul），选择前面有p元素的每个ul元素</li>
<li>伪类选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-of-type 表示一组同级元素中其类型的第一个元素</span><br><span class="line"><span class="selector-pseudo">:last-of-type</span> 表示一组同级元素中其类型的最后一个元素</span><br><span class="line"><span class="selector-pseudo">:only-of-type</span> 表示没有同类型兄弟元素的元素</span><br><span class="line"><span class="selector-pseudo">:only-child</span> 表示没有任何兄弟的元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span>(n) 根据元素在一组同级中的位置匹配元素</span><br><span class="line"><span class="selector-pseudo">:nth-last-of-type</span>(n) 匹配给定类型的元素，基于它们在一组兄弟元素中的位置，从末尾开始计数</span><br><span class="line"><span class="selector-pseudo">:last-child</span> 表示一组兄弟元素中的最后一个元素</span><br><span class="line"><span class="selector-pseudo">:root</span> 设置<span class="selector-tag">HTML</span>文档</span><br><span class="line"><span class="selector-pseudo">:empty</span> 指定空的元素</span><br><span class="line"><span class="selector-pseudo">:enabled</span> 选择可用元素</span><br><span class="line"><span class="selector-pseudo">:disabled</span> 选择被禁用元素</span><br><span class="line"><span class="selector-pseudo">:checked</span> 选择选中的元素</span><br><span class="line"><span class="selector-pseudo">:not</span>(selector) 选择与 &lt;selector&gt; 不匹配的所有元素</span><br></pre></td></tr></table></figure>

<ul>
<li>属性选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[attribute*=value]</span>：选择attribute属性值包含value的所有元素</span><br><span class="line"><span class="selector-attr">[attribute^=value]</span>：选择attribute属性开头为value的所有元素</span><br><span class="line"><span class="selector-attr">[attribute$=value]</span>：选择attribute属性结尾为value的所有元素</span><br></pre></td></tr></table></figure>



<h2 id="二、优先级"><a href="#二、优先级" class="headerlink" title="二、优先级"></a>二、优先级</h2><p>相信大家对<code>CSS</code>选择器的优先级都不陌生：</p>
<blockquote>
<p>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p>
</blockquote>
<p>到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：</p>
<ul>
<li><p>如果存在内联样式，那么 A = 1, 否则 A = 0</p>
</li>
<li><p>B的值等于 ID选择器出现的次数</p>
</li>
<li><p>C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数</p>
</li>
<li><p>D 的值等于 标签选择器 和 伪元素 出现的总次数</p>
</li>
</ul>
<p>这里举个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav-global</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-class">.nav-link</span></span><br></pre></td></tr></table></figure>

<p>套用上面的算法，依次求出 <code>A</code> <code>B</code> <code>C</code> <code>D</code> 的值：</p>
<ul>
<li><p>因为没有内联样式 ，所以 A = 0</p>
</li>
<li><p>ID选择器总共出现了1次， B = 1</p>
</li>
<li><p>类选择器出现了1次， 属性选择器出现了0次，伪类选择器出现0次，所以 C = (1 + 0 + 0) = 1</p>
</li>
<li><p>标签选择器出现了3次， 伪元素出现了0次，所以 D = (3 + 0) = 3</p>
</li>
</ul>
<p>上面算出的<code>A</code> 、 <code>B</code>、<code>C</code>、<code>D</code> 可以简记作：<code>(0, 1, 1, 3)</code></p>
<p>知道了优先级是如何计算之后，就来看看比较规则：</p>
<ul>
<li>从左往右依次进行比较 ，较大者优先级更高</li>
<li>如果相等，则继续往右移动一位进行比较</li>
<li>如果4位全部相等，则后面的会覆盖前面的</li>
</ul>
<p>经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用<code>!important</code></p>
<h2 id="三、继承属性"><a href="#三、继承属性" class="headerlink" title="三、继承属性"></a>三、继承属性</h2><p>在<code>css</code>中，继承是指的是给父元素设置一些属性，后代元素会自动拥有这些属性</p>
<p>关于继承属性，可以分成：</p>
<ul>
<li>字体系列属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>:组合字体</span><br><span class="line">font-family:规定元素的字体系列</span><br><span class="line">font-weight:设置字体的粗细</span><br><span class="line">font-size:设置字体的尺寸</span><br><span class="line">font-style:定义字体的风格</span><br><span class="line">font-variant:偏大或偏小的字体</span><br></pre></td></tr></table></figure>

<ul>
<li>文本系列属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>：文本缩进</span><br><span class="line"><span class="attribute">text-align</span>：文本水平对刘</span><br><span class="line"><span class="attribute">line-height</span>：行高</span><br><span class="line"><span class="attribute">word-spacing</span>：增加或减少单词间的空白</span><br><span class="line"><span class="attribute">letter-spacing</span>：增加或减少字符间的空白</span><br><span class="line"><span class="attribute">text-transform</span>：控制文本大小写</span><br><span class="line"><span class="attribute">direction</span>：规定文本的书写方向</span><br><span class="line"><span class="attribute">color</span>：文本颜色</span><br></pre></td></tr></table></figure>

<ul>
<li>元素可见性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">visibility</span></span><br></pre></td></tr></table></figure>

<ul>
<li>表格布局属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">caption-side</span>：定位表格标题位置</span><br><span class="line"><span class="attribute">border-collapse</span>：合并表格边框</span><br><span class="line"><span class="attribute">border-spacing</span>：设置相邻单元格的边框间的距离</span><br><span class="line"><span class="attribute">empty-cells</span>：单元格的边框的出现与消失</span><br><span class="line"><span class="attribute">table-layout</span>：表格的宽度由什么决定</span><br></pre></td></tr></table></figure>

<ul>
<li>列表属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">list-style-type</span>：文字前面的小点点样式</span><br><span class="line"><span class="attribute">list-style-position</span>：小点点位置</span><br><span class="line"><span class="attribute">list-style</span>：以上的属性可通过这属性集合</span><br></pre></td></tr></table></figure>

<ul>
<li>引用</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">quotes</span>：设置嵌套引用的引号类型</span><br></pre></td></tr></table></figure>

<ul>
<li>光标属性</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cursor</span>：箭头可以变成需要的形状</span><br></pre></td></tr></table></figure>

<p>继承中比较特殊的几点：</p>
<ul>
<li><p>a 标签的字体颜色不能被继承</p>
</li>
<li><p>h1-h6标签字体的大下也是不能被继承的</p>
</li>
</ul>
<h3 id="无继承的属性"><a href="#无继承的属性" class="headerlink" title="无继承的属性"></a>无继承的属性</h3><ul>
<li><p>display</p>
</li>
<li><p>文本属性：vertical-align、text-decoration</p>
</li>
<li><p>盒子模型的属性：宽度、高度、内外边距、边框等</p>
</li>
<li><p>背景属性：背景图片、颜色、位置等</p>
</li>
<li><p>定位属性：浮动、清除浮动、定位position等</p>
</li>
<li><p>生成内容属性：content、counter-reset、counter-increment</p>
</li>
<li><p>轮廓样式属性：outline-style、outline-width、outline-color、outline</p>
</li>
<li><p>页面样式属性：size、page-break-before、page-break-after</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.html.cn/qa/css3/13444.html">https://www.html.cn/qa/css3/13444.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>selector</tag>
      </tags>
  </entry>
  <entry>
    <title>single_multi_line</title>
    <url>/archives/f7feebc7.html</url>
    <content><![CDATA[<h1 id="面试官：如何实现单行／多行文本溢出的省略样式？"><a href="#面试官：如何实现单行／多行文本溢出的省略样式？" class="headerlink" title="面试官：如何实现单行／多行文本溢出的省略样式？"></a>面试官：如何实现单行／多行文本溢出的省略样式？</h1><p> <img src="https://static.vue-js.com/ada8d840-a0e9-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在日常开发展示页面，如果一段文本的数量过长，受制于元素宽度的因素，有可能不能完全显示，为了提高用户的使用体验，这个时候就需要我们把溢出的文本显示成省略号</p>
<p>对于文本的溢出，我们可以分成两种形式：</p>
<ul>
<li>单行文本溢出</li>
<li>多行文本溢出</li>
</ul>
<h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><h3 id="单行文本溢出省略"><a href="#单行文本溢出省略" class="headerlink" title="单行文本溢出省略"></a>单行文本溢出省略</h3><p>理解也很简单，即文本在一行内显示，超出部分以省略号的形式展现</p>
<p>实现方式也很简单，涉及的<code>css</code>属性有：</p>
<ul>
<li>text-overflow：规定当文本溢出时，显示省略符号来代表被修剪的文本</li>
<li>white-space：设置文字在一行显示，不能换行</li>
<li>overflow：文字长度超出限定宽度，则隐藏超出的内容</li>
</ul>
<p><code>overflow</code>设为<code>hidden</code>，普通情况用在块级元素的外层隐藏内部溢出元素，或者配合下面两个属性实现文本溢出省略</p>
<p><code>white-space:nowrap</code>，作用是设置文本不换行，是<code>overflow:hidden</code>和<code>text-overflow：ellipsis</code>生效的基础</p>
<p><code>text-overflow</code>属性值有如下：</p>
<ul>
<li>clip：当对象内文本溢出部分裁切掉</li>
<li>ellipsis：当对象内文本溢出时显示省略标记（…）</li>
</ul>
<p><code>text-overflow</code>只有在设置了<code>overflow:hidden</code>和<code>white-space:nowrap</code>才能够生效的</p>
<p>举个例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本&lt;/<span class="attr">p</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p> <img src="https://static.vue-js.com/bb3048e0-a0e9-11eb-85f6-6fac77c0c9b3.png"></p>
<p>可以看到，设置单行文本溢出较为简单，并且省略号显示的位置较好</p>
<h3 id="多行文本溢出省略"><a href="#多行文本溢出省略" class="headerlink" title="多行文本溢出省略"></a>多行文本溢出省略</h3><p>多行文本溢出的时候，我们可以分为两种情况：</p>
<ul>
<li>基于高度截断</li>
<li>基于行数截断</li>
</ul>
<h4 id="基于高度截断"><a href="#基于高度截断" class="headerlink" title="基于高度截断"></a>基于高度截断</h4><h4 id="伪元素-定位"><a href="#伪元素-定位" class="headerlink" title="伪元素 + 定位"></a>伪元素 + 定位</h4><p>核心的<code>css</code>代码结构如下：</p>
<ul>
<li>position: relative：为伪元素绝对定位</li>
<li>overflow: hidden：文本溢出限定的宽度就隐藏内容）</li>
<li>position: absolute：给省略号绝对定位</li>
<li>line-height: 20px：结合元素高度,高度固定的情况下,设定行高, 控制显示行数</li>
<li>height: 40px：设定当前元素高度</li>
<li>::after {} ：设置省略号样式</li>
</ul>
<p>代码如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.demo</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&quot;...&quot;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span>这是一段很长的文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现原理很好理解，就是通过伪元素绝对定位到行尾并遮住文字，再通过 <code>overflow: hidden</code> 隐藏多余文字</p>
<p>这种实现具有以下优点：</p>
<ul>
<li>兼容性好，对各大主流浏览器有好的支持</li>
<li>响应式截断，根据不同宽度做出调整</li>
</ul>
<p>一般文本存在英文的时候，可以设置<code>word-break: break-all</code>使一个单词能够在换行时进行拆分</p>
<h4 id="基于行数截断"><a href="#基于行数截断" class="headerlink" title="基于行数截断"></a>基于行数截断</h4><p>纯<code>css</code>实现也非常简单，核心的<code>css</code>代码如下：</p>
<ul>
<li>-webkit-line-clamp: 2：用来限制在一个块元素显示的文本的行数，为了实现该效果，它需要组合其他的WebKit属性）</li>
<li>display: -webkit-box：和1结合使用，将对象作为弹性伸缩盒子模型显示 </li>
<li>-webkit-box-orient: vertical：和1结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 </li>
<li>overflow: hidden：文本溢出限定的宽度就隐藏内容</li>
<li>text-overflow: ellipsis：多行文本的情况下，用省略号“…”隐藏溢出范围的文本</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        -webkit-line-clamp: <span class="number">2</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="css">        -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</span><br><span class="line">    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</span><br><span class="line">&lt;/p &gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，上述使用了<code>webkit</code>的<code>CSS</code>属性扩展，所以兼容浏览器范围是<code>PC</code>端的<code>webkit</code>内核的浏览器，由于移动端大多数是使用<code>webkit</code>，所以移动端常用该形式</p>
<p>需要注意的是，如果文本为一段很长的英文或者数字，则需要添加<code>word-wrap: break-word</code>属性</p>
<p>还能通过使用<code>javascript</code>实现配合<code>css</code>，实现代码如下所示：</p>
<p>css结构如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p-after</span>:after&#123;</span><br><span class="line">    content: <span class="string">&quot;...&quot;</span>; </span><br><span class="line">    <span class="attribute">position</span>: absolute; </span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>; </span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>; </span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, transparent, <span class="number">#fff</span> <span class="number">55%</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(left, transparent, <span class="number">#fff</span> <span class="number">55%</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(left, transparent, <span class="number">#fff</span> <span class="number">55%</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, transparent, <span class="number">#fff</span> <span class="number">55%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>javascript代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="comment">//获取文本的行高，并获取文本的高度，假设我们规定的行数是五行，那么对超过行数的部分进行限制高度，并加上省略号</span></span><br><span class="line">   $(<span class="string">&#x27;p&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lineHeight = <span class="built_in">parseInt</span>($(<span class="built_in">this</span>).css(<span class="string">&quot;line-height&quot;</span>));</span><br><span class="line">        <span class="keyword">var</span> height = <span class="built_in">parseInt</span>($(<span class="built_in">this</span>).height());</span><br><span class="line">        <span class="keyword">if</span>((height / lineHeight) &gt;<span class="number">3</span> )&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).addClass(<span class="string">&quot;p-after&quot;</span>)</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&quot;height&quot;</span>,<span class="string">&quot;60px&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).removeClass(<span class="string">&quot;p-after&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><p><a href="https://www.zoo.team/article/text-overflow">https://www.zoo.team/article/text-overflow</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000017078153">https://segmentfault.com/a/1190000017078153</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>single_multi_line</tag>
      </tags>
  </entry>
  <entry>
    <title>single_sign</title>
    <url>/archives/7f6cf7b0.html</url>
    <content><![CDATA[<h1 id="面试官：什么是单点登录？如何实现？"><a href="#面试官：什么是单点登录？如何实现？" class="headerlink" title="面试官：什么是单点登录？如何实现？"></a>面试官：什么是单点登录？如何实现？</h1><p> <img src="https://static.vue-js.com/8a25a760-8c83-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一</p>
<p>SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统</p>
<p>SSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过<code>passport</code>，子系统本身将不参与登录操作</p>
<p>当一个系统成功登录以后，<code>passport</code>将会颁发一个令牌给各个子系统，子系统可以拿着令牌会获取各自的受保护资源，为了减少频繁认证，各个子系统在被<code>passport</code>授权以后，会建立一个局部会话，在一定时间内可以无需再次向<code>passport</code>发起认证</p>
<p> <img src="https://static.vue-js.com/2b9b0e70-8c4b-11eb-85f6-6fac77c0c9b3.png"></p>
<p>上图有四个系统，分别是<code>Application1</code>、<code>Application2</code>、<code>Application3</code>、和<code>SSO</code>，当<code>Application1</code>、<code>Application2</code>、<code>Application3</code>需要登录时，将跳到<code>SSO</code>系统，<code>SSO</code>系统完成登录，其他的应用系统也就随之登录了</p>
<h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>淘宝、天猫都属于阿里旗下，当用户登录淘宝后，再打开天猫，系统便自动帮用户登录了天猫，这种现象就属于单点登录</p>
<h2 id="二、如何实现"><a href="#二、如何实现" class="headerlink" title="二、如何实现"></a>二、如何实现</h2><h3 id="同域名下的单点登录"><a href="#同域名下的单点登录" class="headerlink" title="同域名下的单点登录"></a>同域名下的单点登录</h3><p><code>cookie</code>的<code>domain</code>属性设置为当前域的父域，并且父域的<code>cookie</code>会被子域所共享。<code>path</code>属性默认为<code>web</code>应用的上下文路径</p>
<p>利用 <code>Cookie</code> 的这个特点，没错，我们只需要将<code>Cookie</code>的<code> domain</code>属性设置为父域的域名（主域名），同时将 <code>Cookie </code>的<code>path</code>属性设置为根路径，将 <code>Session ID</code>（或 <code>Token</code>）保存到父域中。这样所有的子域应用就都可以访问到这个<code>Cookie</code></p>
<p>不过这要求应用系统的域名需建立在一个共同的主域名之下，如 <code>tieba.baidu.com</code> 和 <code>map.baidu.com</code>，它们都建立在 <code>baidu.com </code>这个主域名之下，那么它们就可以通过这种方式来实现单点登录</p>
<h3 id="不同域名下的单点登录-一"><a href="#不同域名下的单点登录-一" class="headerlink" title="不同域名下的单点登录(一)"></a>不同域名下的单点登录(一)</h3><p>如果是不同域的情况下，<code>Cookie</code>是不共享的，这里我们可以部署一个认证中心，用于专门处理登录请求的独立的 <code>Web </code>服务</p>
<p>用户统一在认证中心进行登录，登录成功后，认证中心记录用户的登录状态，并将 <code>token</code> 写入 <code>Cookie</code>（注意这个 <code>Cookie </code>是认证中心的，应用系统是访问不到的）</p>
<p>应用系统检查当前请求有没有 <code>Token</code>，如果没有，说明用户在当前系统中尚未登录，那么就将页面跳转至认证中心</p>
<p>由于这个操作会将认证中心的 <code>Cookie</code> 自动带过去，因此，认证中心能够根据 <code>Cookie</code> 知道用户是否已经登录过了</p>
<p>如果认证中心发现用户尚未登录，则返回登录页面，等待用户登录</p>
<p>如果发现用户已经登录过了，就不会让用户再次登录了，而是会跳转回目标 <code>URL </code>，并在跳转前生成一个 <code>Token</code>，拼接在目标<code> URL</code> 的后面，回传给目标应用系统</p>
<p>应用系统拿到 <code>Token </code>之后，还需要向认证中心确认下 <code>Token</code> 的合法性，防止用户伪造。确认无误后，应用系统记录用户的登录状态，并将 <code>Token </code>写入<code> Cookie</code>，然后给本次访问放行。（注意这个 <code>Cookie</code> 是当前应用系统的）当用户再次访问当前应用系统时，就会自动带上这个 <code>Token</code>，应用系统验证 Token 发现用户已登录，于是就不会有认证中心什么事了</p>
<p>此种实现方式相对复杂，支持跨域，扩展性好，是单点登录的标准做法</p>
<h3 id="不同域名下的单点登录-二"><a href="#不同域名下的单点登录-二" class="headerlink" title="不同域名下的单点登录(二)"></a>不同域名下的单点登录(二)</h3><p>可以选择将 <code>Session ID</code> （或 <code>Token</code> ）保存到浏览器的 <code>LocalStorage</code> 中，让前端在每次向后端发送请求时，主动将<code>LocalStorage</code>的数据传递给服务端</p>
<p>这些都是由前端来控制的，后端需要做的仅仅是在用户登录成功后，将 <code>Session ID </code>（或 <code>Token </code>）放在响应体中传递给前端</p>
<p>单点登录完全可以在前端实现。前端拿到 <code>Session ID </code>（或 <code>Token</code> ）后，除了将它写入自己的 <code>LocalStorage</code> 中之外，还可以通过特殊手段将它写入多个其他域下的 <code>LocalStorage</code> 中</p>
<p>关键代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 token</span></span><br><span class="line"><span class="keyword">var</span> token = result.data.token;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 动态创建一个不可见的iframe，在iframe中加载一个跨域HTML</span></span><br><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line">iframe.src = <span class="string">&quot;http://app1.com/localstorage.html&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.append(iframe);</span><br><span class="line"><span class="comment">// 使用postMessage()方法将token传递给iframe</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    iframe.contentWindow.postMessage(token, <span class="string">&quot;http://app1.com&quot;</span>);</span><br><span class="line">&#125;, <span class="number">4000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    iframe.remove();</span><br><span class="line">&#125;, <span class="number">6000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在这个iframe所加载的HTML中绑定一个事件监听器，当事件被触发时，把接收到的token数据写入localStorage</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;token&#x27;</span>, event.data)</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>前端通过 <code>iframe</code>+<code>postMessage()</code> 方式，将同一份 <code>Token</code> 写入到了多个域下的 <code>LocalStorage</code> 中，前端每次在向后端发送请求之前，都会主动从 <code>LocalStorage</code> 中读取<code>Token</code>并在请求中携带，这样就实现了同一份<code> Token</code> 被多个域所共享</p>
<p>此种实现方式完全由前端控制，几乎不需要后端参与，同样支持跨域</p>
<h2 id="三、流程"><a href="#三、流程" class="headerlink" title="三、流程"></a>三、流程</h2><p>单点登录的流程图如下所示：</p>
<p> <img src="https://static.vue-js.com/2422bc40-8c84-11eb-ab90-d9ae814b240d.png"></p>
<ul>
<li><p>用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</p>
</li>
<li><p>sso认证中心发现用户未登录，将用户引导至登录页面</p>
</li>
<li><p>用户输入用户名密码提交登录申请</p>
</li>
<li><p>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</p>
</li>
<li><p>sso认证中心带着令牌跳转会最初的请求地址（系统1）</p>
</li>
<li><p>系统1拿到令牌，去sso认证中心校验令牌是否有效</p>
</li>
<li><p>sso认证中心校验令牌，返回有效，注册系统1</p>
</li>
<li><p>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</p>
</li>
<li><p>用户访问系统2的受保护资源</p>
</li>
<li><p>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</p>
</li>
<li><p>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</p>
</li>
<li><p>系统2拿到令牌，去sso认证中心校验令牌是否有效</p>
</li>
<li><p>sso认证中心校验令牌，返回有效，注册系统2</p>
</li>
<li><p>系统2使用该令牌创建与用户的局部会话，返回受保护资源</p>
</li>
</ul>
<p>用户登录成功之后，会与<code>sso</code>认证中心及各个子系统建立会话，用户与<code>sso</code>认证中心建立的会话称为全局会话</p>
<p>用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过<code>sso</code>认证中心</p>
<p>全局会话与局部会话有如下约束关系：</p>
<ul>
<li>局部会话存在，全局会话一定存在</li>
<li>全局会话存在，局部会话不一定存在</li>
<li>全局会话销毁，局部会话必须销毁</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://blog.csdn.net/weixin_36380516/article/details/109006828">https://blog.csdn.net/weixin_36380516/article/details/109006828</a></li>
<li><a href="https://baike.baidu.com/item/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95">https://baike.baidu.com/item/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95</a></li>
<li><a href="https://juejin.cn/post/6844903664985866253">https://juejin.cn/post/6844903664985866253</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>single_sign</tag>
      </tags>
  </entry>
  <entry>
    <title>string_api</title>
    <url>/archives/7b268071.html</url>
    <content><![CDATA[<h1 id="面试官：JavaScript字符串的常用方法有哪些？"><a href="#面试官：JavaScript字符串的常用方法有哪些？" class="headerlink" title="面试官：JavaScript字符串的常用方法有哪些？"></a>面试官：JavaScript字符串的常用方法有哪些？</h1><p> <img src="https://static.vue-js.com/ceb6ebc0-65c1-11eb-ab90-d9ae814b240d.png"></p>
<h2 id="一、操作方法"><a href="#一、操作方法" class="headerlink" title="一、操作方法"></a>一、操作方法</h2><p>我们也可将字符串常用的操作方法归纳为增、删、改、查，需要知道字符串的特点是一旦创建了，就不可变</p>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>这里增的意思并不是说直接增添内容，而是创建字符串的一个副本，再进行操作</p>
<p>除了常用<code>+</code>以及<code>$&#123;&#125;</code>进行字符串拼接之外，还可通过<code>concat</code></p>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>用于将一个或多个字符串拼接成一个新字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = stringValue.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue); <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>这里的删的意思并不是说删除原字符串的内容，而是创建字符串的一个副本，再进行操作</p>
<p>常见的有：</p>
<ul>
<li>slice()</li>
<li>substr()</li>
<li>substring()</li>
</ul>
<p>这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>这里改的意思也不是改变原字符串，而是创建字符串的一个副本，再进行操作</p>
<p>常见的有：</p>
<ul>
<li><p>trim()、trimLeft()、trimRight()</p>
</li>
<li><p>repeat()</p>
</li>
<li><p>padStart()、padEnd()</p>
</li>
<li><p>toLowerCase()、 toUpperCase()</p>
</li>
</ul>
<h4 id="trim-、trimLeft-、trimRight"><a href="#trim-、trimLeft-、trimRight" class="headerlink" title="trim()、trimLeft()、trimRight()"></a>trim()、trimLeft()、trimRight()</h4><p>删除前、后或前后所有空格符，再返回新的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot; hello world &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> trimmedStringValue = stringValue.trim();</span><br><span class="line"><span class="built_in">console</span>.log(stringValue); <span class="comment">// &quot; hello world &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(trimmedStringValue); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;na &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> copyResult = stringValue.repeat(<span class="number">2</span>) <span class="comment">// na na </span></span><br></pre></td></tr></table></figure>



<h4 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h4><p>复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">6</span>)); <span class="comment">// &quot; foo&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>)); <span class="comment">// &quot;......foo&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="toLowerCase-、-toUpperCase"><a href="#toLowerCase-、-toUpperCase" class="headerlink" title="toLowerCase()、 toUpperCase()"></a>toLowerCase()、 toUpperCase()</h3><p>大小写转化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toUpperCase()); <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toLowerCase()); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>除了通过索引的方式获取字符串的值，还可通过：</p>
<ul>
<li><p>chatAt()</p>
</li>
<li><p>indexOf()</p>
</li>
<li><p>startWith()</p>
</li>
<li><p>includes()</p>
</li>
</ul>
<h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>返回给定索引位置的字符，由传给方法的整数参数指定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.charAt(<span class="number">2</span>)); <span class="comment">// &quot;c&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.indexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>



<h4 id="startWith-、includes"><a href="#startWith-、includes" class="headerlink" title="startWith()、includes()"></a>startWith()、includes()</h4><p>从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;foo&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;qux&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>





<h2 id="二、转换方法"><a href="#二、转换方法" class="headerlink" title="二、转换方法"></a>二、转换方法</h2><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>把字符串按照指定的分割符，拆分成数组中的每一项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;12+23+34&quot;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.split(<span class="string">&quot;+&quot;</span>) <span class="comment">// [12,23,34]</span></span><br></pre></td></tr></table></figure>



<h2 id="三、模板匹配方法"><a href="#三、模板匹配方法" class="headerlink" title="三、模板匹配方法"></a>三、模板匹配方法</h2><p>针对正则表达式，字符串设计了几个方法：</p>
<ul>
<li>match()</li>
<li>search()</li>
<li>replace()</li>
</ul>
<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，返回数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="keyword">let</span> matches = text.match(pattern);</span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// &quot;cat&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p>接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象，找到则返回匹配索引，否则返回 -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pos = text.search(<span class="regexp">/at/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pos); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>



<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p>接收两个参数，第一个参数为匹配的内容，第二个参数为替换的元素（可用函数）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.replace(<span class="string">&quot;at&quot;</span>, <span class="string">&quot;ond&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// &quot;cond, bat, sat, fat&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js面试</tag>
        <tag>string_api</tag>
      </tags>
  </entry>
  <entry>
    <title>That gril</title>
    <url>/archives/b7b51641.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6fef2d6c87cb9b5f93c6b1d4076c2761a4993209fdd14536a865c52bd8b5978f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">想看我的秘密，需要密码呦༼ つ ◕_◕ ༽つ</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>fine</category>
      </categories>
      <tags>
        <tag>fine</tag>
        <tag>his</tag>
      </tags>
  </entry>
  <entry>
    <title>triangle</title>
    <url>/archives/df976d87.html</url>
    <content><![CDATA[<h1 id="面试官：CSS如何画一个三角形？原理是什么？"><a href="#面试官：CSS如何画一个三角形？原理是什么？" class="headerlink" title="面试官：CSS如何画一个三角形？原理是什么？"></a>面试官：CSS如何画一个三角形？原理是什么？</h1><p><img src="https://static.vue-js.com/bd310120-a279-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在前端开发的时候，我们有时候会需要用到一个三角形的形状，比如地址选择或者播放器里面播放按钮</p>
<p> <img src="https://static.vue-js.com/d6d8ff60-a279-11eb-85f6-6fac77c0c9b3.png"></p>
<p>通常情况下，我们会使用图片或者<code>svg</code>去完成三角形效果图，但如果单纯使用<code>css</code>如何完成一个三角形呢？</p>
<p>实现过程似乎也并不困难，通过边框就可完成</p>
<h2 id="二、实现过程"><a href="#二、实现过程" class="headerlink" title="二、实现过程"></a>二、实现过程</h2><p>在以前也讲过盒子模型，默认情况下是一个矩形，实现也很简单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">2px</span> solid;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-color</span>: <span class="number">#96ceb4</span> <span class="number">#ffeead</span> <span class="number">#d9534f</span> <span class="number">#ffad60</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;border&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下图所示：</p>
<p> <img src="https://static.vue-js.com/e3f244e0-a279-11eb-ab90-d9ae814b240d.png"></p>
<p>将<code>border</code>设置<code>50px</code>，效果图如下所示：</p>
<p> <img src="https://static.vue-js.com/ee0b42b0-a279-11eb-ab90-d9ae814b240d.png"></p>
<p>白色区域则为<code>width</code>、<code>height</code>，这时候只需要你将白色区域部分宽高逐渐变小，最终变为0，则变成如下图所示：</p>
<p> <img src="https://static.vue-js.com/2afaa030-a27a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>这时候就已经能够看到4个不同颜色的三角形，如果需要下方三角形，只需要将上、左、右边框设置为0就可以得到下方的红色三角形</p>
<p> <img src="https://static.vue-js.com/2afaa030-a27a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>但这种方式，虽然视觉上是实现了三角形，但实际上，隐藏的部分任然占据部分高度，需要将上方的宽度去掉</p>
<p>最终实现代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#d9534f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要实现一个只有边框是空心的三角形，由于这里不能再使用<code>border</code>属性，所以最直接的方法是利用伪类新建一个小一点的三角形定位上去</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#d9534f</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>:after&#123;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">40px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#96ceb4</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图如下所示：</p>
<p> <img src="https://static.vue-js.com/59f4d720-a27a-11eb-85f6-6fac77c0c9b3.png" alt="i"></p>
<p>伪类元素定位参照对象的内容区域宽高都为0，则内容区域即可以理解成中心一点，所以伪元素相对中心这点定位</p>
<p>将元素定位进行微调以及改变颜色，就能够完成下方效果图：</p>
<p> <img src="https://static.vue-js.com/653a6e10-a27a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>最终代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span>:after &#123;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">40px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#96ceb4</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h2><p>可以看到，边框是实现三角形的部分，边框实际上并不是一个直线，如果我们将四条边设置不同的颜色，将边框逐渐放大，可以得到每条边框都是一个梯形</p>
<p> <img src="https://static.vue-js.com/78d4bd90-a27a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>当分别取消边框的时候，发现下面几种情况：</p>
<ul>
<li>取消一条边的时候，与这条边相邻的两条边的接触部分会变成直的</li>
<li>当仅有邻边时， 两个边会变成对分的三角</li>
<li>当保留边没有其他接触时，极限情况所有东西都会消失</li>
</ul>
<p> <img src="https://static.vue-js.com/84586ef0-a27a-11eb-85f6-6fac77c0c9b3.png"></p>
<p>通过上图的变化规则，利用旋转、隐藏，以及设置内容宽高等属性，就能够实现其他类型的三角形</p>
<p>如设置直角三角形，如上图倒数第三行实现过程，我们就能知道整个实现原理</p>
<p>实现代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">/* 内部大小 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="comment">/* 边框大小 只设置两条边*/</span></span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">#4285f4</span> solid;</span><br><span class="line">    <span class="attribute">border-right</span>: transparent solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">85px</span>; </span><br><span class="line">    <span class="comment">/* 其他设置 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.cnblogs.com/echolun/p/11888612.html">https://www.cnblogs.com/echolun/p/11888612.html</a></li>
<li><a href="https://juejin.cn/post/6844903567795421197">https://juejin.cn/post/6844903567795421197</a></li>
<li><a href="https://vue3js.cn/interview">https://vue3js.cn/interview</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>triangle</tag>
      </tags>
  </entry>
  <entry>
    <title>visual_scrolling</title>
    <url>/archives/9370d73f.html</url>
    <content><![CDATA[<h1 id="面试官：如何使用css完成视差滚动效果"><a href="#面试官：如何使用css完成视差滚动效果" class="headerlink" title="面试官：如何使用css完成视差滚动效果?"></a>面试官：如何使用css完成视差滚动效果?</h1><p> <img src="https://static.vue-js.com/1b2d33e0-a18d-11eb-85f6-6fac77c0c9b3.png"></p>
<h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p>视差滚动（Parallax Scrolling）是指多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验</p>
<p>我们可以把网页解刨成：背景层、内容层、悬浮层</p>
<p> <img src="https://static.vue-js.com/57c942a0-a1cc-11eb-85f6-6fac77c0c9b3.png"></p>
<p>当滚动鼠标滑轮的时候，各个图层以不同的速度移动，形成视觉差的效果</p>
<p> <img src="https://static.vue-js.com/e57ab280-a1dd-11eb-ab90-d9ae814b240d.png" alt="image.png"></p>
<h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><p>使用<code>css</code>形式实现视觉差滚动效果的方式有：</p>
<ul>
<li>background-attachment</li>
<li>transform:translate3D</li>
</ul>
<h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><p>作用是设置背景图像是否固定或者随着页面的其余部分滚动</p>
<p>值分别有如下：</p>
<ul>
<li>scroll：默认值，背景图像会随着页面其余部分的滚动而移动</li>
<li>fixed：当页面的其余部分滚动时，背景图像不会移动</li>
<li>inherit：继承父元素background-attachment属性的值</li>
</ul>
<p>完成滚动视觉差就需要将<code>background-attachment</code>属性设置为<code>fixed</code>，让背景相对于视口固定。及时一个元素有滚动机制，背景也不会随着元素的内容而滚动</p>
<p>也就是说，背景一开始就已经被固定在初始的位置</p>
<p>核心的<code>css</code>代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-img</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">...</span>);</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整体例子如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">7</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">20vh</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.a-img1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://images.pexels.com/photos/1097491/pexels-photo-1097491.jpeg</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.a-img2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://images.pexels.com/photos/2437299/pexels-photo-2437299.jpeg</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.a-img3</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://images.pexels.com/photos/1005417/pexels-photo-1005417.jpeg</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-text&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-img1&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-text&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-img2&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-text&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-img3&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-text&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="transform-translate3D"><a href="#transform-translate3D" class="headerlink" title="transform:translate3D"></a>transform:translate3D</h3><p>同样，让我们先来看一下两个概念<code>transform</code>和<code>perspective</code>：</p>
<ul>
<li>transform: css3 属性，可以对元素进行变换(2d/3d)，包括平移 translate,旋转 rotate,缩放 scale,等等</li>
<li>perspective: css3 属性，当元素涉及 3d 变换时，perspective 可以定义我们眼睛看到的 3d 立体效果，即空间感</li>
</ul>
<p><code>3D</code>视角示意图如下所示：</p>
<p> <img src="https://static.vue-js.com/24f37dd0-a18d-11eb-85f6-6fac77c0c9b3.png"></p>
<p>举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 视差元素的父级需要3D视角 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">perspective</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d; </span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow-y</span>: scroll;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow-x</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#app</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200vh</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>:skyblue;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-top</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.one</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>:<span class="number">#409eff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0px</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.two</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>:<span class="number">#67c23a</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">1px</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-bottom</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.three</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>:<span class="number">#e6a23c</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">2px</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-bottom</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span>three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>而这种方式实现视觉差动的原理如下：</p>
<ul>
<li><p>容器设置上 transform-style: preserve-3d 和 perspective: xpx，那么处于这个容器的子元素就将位于3D空间中，</p>
</li>
<li><p>子元素设置不同的 transform: translateZ()，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样</p>
</li>
<li><p>滚动滚动条，由于子元素设置了不同的 transform: translateZ()，那么他们滚动的上下距离 translateY 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://imweb.io/topic/5b73ef73a56e07401e48729d">https://imweb.io/topic/5b73ef73a56e07401e48729d</a></li>
<li><a href="https://juejin.cn/post/6844903654458146823#heading-5">https://juejin.cn/post/6844903654458146823#heading-5</a></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css面试</tag>
        <tag>visual_scrolling</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/archives/b9f20a20.html</url>
    <content><![CDATA[<h3 id="tag-webpack介绍-tag"><a href="#tag-webpack介绍-tag" class="headerlink" title="[tag]webpack介绍[/tag]"></a>[tag]webpack介绍[/tag]</h3><ul>
<li> 基于NodeJS实现的模块打包工具， 就是一个第三方包</li>
<li> 把很多文件打包整合到一起, 缩小项目体积, 提高加载速度</li>
<li> 将多个js文件打包生成最终一个压缩后的js文件, 减少文件数量和体积，从而提升访问, </li>
<li> 还可以打包任意类型的文件</li>
<li>官网地址：<a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></li>
</ul>
<hr>
<p>[file href=”//freelaeder.cn//usr/themes/Mirages/images/default/data/webpack.pdf”]webpack课件[/file]</p>
<ul>
<li><strong>课件资源来尚硅谷，原文视频地址：<a href="https://www.bilibili.com/video/BV1e7411j7T5?p=7&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1e7411j7T5?p=7&amp;spm_id_from=pageDriver</a></strong></li>
</ul>
<h3 id="tag-type-”primary”-webpack基本使用-tag"><a href="#tag-type-”primary”-webpack基本使用-tag" class="headerlink" title="[tag type=”primary”]webpack基本使用[/tag]"></a>[tag type=”primary”]webpack基本使用[/tag]</h3><h5 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h5><p><img src="//freelaeder.cn//usr/themes/Mirages/images/default/img/web1.png" alt="image-20210519092326352"></p>
<h4 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2. 实现步骤"></a>2. 实现步骤</h4><ol>
<li><h5 id="初始化包环境"><a href="#初始化包环境" class="headerlink" title="初始化包环境"></a>初始化包环境</h5></li>
<li><p><img src="//freelaeder.cn//usr/themes/Mirages/images/default/img/web2.png" alt="image-20210519092306481"></p>
</li>
<li><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4></li>
<li><p><img src="//freelaeder.cn//usr/themes/Mirages/images/default/img/web3.png" alt="image-20210519092530768"></p>
</li>
<li><h4 id="新建src-必须是src-和js文件"><a href="#新建src-必须是src-和js文件" class="headerlink" title="新建src(必须是src)和js文件"></a>新建src(必须是src)和js文件</h4><p><img src="//freelaeder.cn//usr/themes/Mirages/images/default/img/web4.png" alt="image-20210519093142548"></p>
<p>​    <strong>src目录不要写错， 里面的必须有一个index.js</strong></p>
</li>
</ol>
<h4 id="4-运行打包命令——–-npx-webpack"><a href="#4-运行打包命令——–-npx-webpack" class="headerlink" title="4.  运行打包命令——–    npx webpack"></a>4.  运行打包命令——–    npx webpack</h4><hr>
<p>####[tag type=”info”] ES6模块化[/tag]</p>
<ul>
<li><h5 id="导出变量"><a href="#导出变量" class="headerlink" title="导出变量"></a>导出变量</h5></li>
<li> export let/const/var  变量名 = 值     ===&gt;  import { 变量名 } from ‘文件路径’</li>
<li> export default 变量   ====&gt; import 变量名 from ‘文件路径’</li>
</ul>
<hr>
<p>[tabs]</p>
<p>[tab title=”add.js(最初版本)”]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// node</span></span><br><span class="line"><span class="comment">// function add (a,b) &#123;</span></span><br><span class="line"><span class="comment">//     return a + b;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// node 提供的模块化导出对象</span></span><br><span class="line"><span class="comment">// module.exports = &#123;</span></span><br><span class="line"><span class="comment">//     add</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 模块化 导出 一个函数变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function add (a,b) &#123;</span></span><br><span class="line"><span class="comment">//     return a + b;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// export default add;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>[/tab]</p>
<p>[tab title=”main.js(需压缩的js文件入口)”]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// node 引入js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const &#123;add&#125; = require(&#x27;./add&#x27;);</span></span><br><span class="line"><span class="comment">// const &#123;sum&#125; = require(&#x27;./tool/tool&#x27;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// let r = add(12,13);</span></span><br><span class="line"><span class="comment">// console.log(r);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let su = [1,3,9,3,23]</span></span><br><span class="line"><span class="comment">// console.log(sum(su));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="comment">// 有default 不需要加&#123;add&#125;</span></span><br><span class="line"><span class="comment">// import add from  &#x27;./add&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 无default 需要加&#123;add&#125;</span></span><br><span class="line"><span class="comment">// import &#123;add&#125; from &#x27;./add&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let r = add(2,11);</span></span><br><span class="line"><span class="comment">// console.log(r);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入jquery资源</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span>;</span><br><span class="line">$(<span class="string">&#x27;ul li:odd&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>),</span><br><span class="line">$(<span class="string">&#x27;ul li:even&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>[/tab]</p>
<p>[/tabs]</p>
<h3 id="3-配置webpack入口和出口"><a href="#3-配置webpack入口和出口" class="headerlink" title="3.配置webpack入口和出口"></a>3.配置webpack入口和出口</h3><h4 id="1-目标-1"><a href="#1-目标-1" class="headerlink" title="1.目标"></a>1.目标</h4><p><img src="//freelaeder.cn//usr/themes/Mirages/images/default/img/web5.png" alt="image-20210521081531029"></p>
<h4 id="2-实现步骤-1"><a href="#2-实现步骤-1" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h4><p><img src="//freelaeder.cn//usr/themes/Mirages/images/default/img/web6.png" alt="image-20210521081544821"></p>
<h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><p><img src="//freelaeder.cn//usr/themes/Mirages/images/default/img/web7.png" alt="image-20210521081624659"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 指定webpack打包的入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 配置webpack打包输出的文件夹和文件名</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 路径</span></span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundl.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h3 id="tag-type-”warn”-插件-tag"><a href="#tag-type-”warn”-插件-tag" class="headerlink" title="[tag type=”warn”]插件[/tag]"></a>[tag type=”warn”]插件[/tag]</h3><ul>
<li><h4 id="目标1-自动生成html，并且自动引入js文件"><a href="#目标1-自动生成html，并且自动引入js文件" class="headerlink" title="目标1  自动生成html，并且自动引入js文件"></a>目标1  自动生成html，并且自动引入js文件</h4></li>
<li><h4 id="目标2-引入css文件，并配置"><a href="#目标2-引入css文件，并配置" class="headerlink" title="目标2  引入css文件，并配置"></a>目标2  引入css文件，并配置</h4></li>
</ul>
<ul>
<li><h4 id="下载html-webpack-plugin插件"><a href="#下载html-webpack-plugin插件" class="headerlink" title="下载html-webpack-plugin插件"></a>下载html-webpack-plugin插件</h4></li>
<li><p>作用:默认会创建一个空的HTML，自动引入打包输出的所有资源（js\css）;</p>
</li>
<li><p>需求：<strong>需要有结构的HTML文件</strong></p>
</li>
<li><p> yarn add html-webpack-plugin -D </p>
</li>
<li><p>npm install html-webpack-plugin  -D</p>
</li>
<li><p> 2.下载style-loader,css-loader</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add style-loader css-loader -D </span><br><span class="line">npm install style-loader css-loader -D</span><br></pre></td></tr></table></figure></li>
<li><p> 2.1 引入css文件到入口文件<br><img src="//freelaeder.cn//usr/themes/Mirages/images/default/img/web10.png" alt="image-20210524091735083"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入css文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><h5 id="在webpack-config-js中配置"><a href="#在webpack-config-js中配置" class="headerlink" title="在webpack.config.js中配置"></a>在webpack.config.js中配置</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 配置开发环境</span></span><br><span class="line">    <span class="comment">// mode:&#x27;development&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置生产环境  默认模式</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;build.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 其他配置 自动引入html</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 引入的模板文件路径</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./build/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 配置css--loader css文件 一起打包到js文件中</span></span><br><span class="line">    <span class="comment">// style--loader 将css文件插入dom（style）</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 配置规则  </span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// 一个具体的loader配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/web0.png" alt="请输入图片描述"></p>
<hr>
<p>[tag type=”success”]webpack.config.js基本配置[/tag]<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/webp.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/webp2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/webp3.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/webp4.png" alt="请输入图片描述"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入html插件  npm install --save-dev html-webpack-plugin</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 配置开发环境</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置生产环境  默认模式</span></span><br><span class="line">    <span class="comment">// mode: &#x27;production&#x27;,</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;build.js&#x27;</span>,</span><br><span class="line">        <span class="comment">// publicPath:&#x27;../dist/&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 其他配置 自动引入html</span></span><br><span class="line">    <span class="comment">// plugins 1 下载 2 引入 3 使用</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 引入的模板文件路径</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./build/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 配置css-loader css文件 一起打包到js文件中</span></span><br><span class="line">    <span class="comment">// style-loader 将css文件插入dom（style）</span></span><br><span class="line">    <span class="comment">// loader 1下载  2配置 </span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 配置规则  </span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// 一个具体的loader配置</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">                <span class="comment">// 执行顺序，从右至左        </span></span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>,]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 下载 yarn add less less-loader</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">                <span class="comment">// 执行顺序，从右至左        </span></span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//处理图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">                <span class="comment">// 使用1个loader</span></span><br><span class="line">                <span class="comment">// 下载url-loader,file-loader</span></span><br><span class="line">                loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="comment">// 图片小于8kb，就会被base64处理</span></span><br><span class="line">                    <span class="comment">// 优点：减少请求数量，（减轻服务器压力）</span></span><br><span class="line">                    <span class="comment">// 缺点：图片体积会更大，（文件请求速度更慢）</span></span><br><span class="line">                    <span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span></span><br><span class="line">                    <span class="comment">// 解析时会出问题：[object Module]</span></span><br><span class="line">                    <span class="comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class="line">                    <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 下载loader   yarn add html-loader</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                <span class="comment">// 处理html文件的img图片，（负责引入img，从而能被url-loader进行处理）</span></span><br><span class="line">                loader: <span class="string">&#x27;html-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析字体图标</span></span><br><span class="line">            <span class="comment">// 无须下载</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff)$/i</span>,</span><br><span class="line">                <span class="comment">// 打包其他资源  排除其他资源exclude</span></span><br><span class="line">                <span class="comment">// exclude:/\.(css|js|html)$/</span></span><br><span class="line">                type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;font/[name].[hash:6][ext]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// js降级处理</span></span><br><span class="line">            <span class="comment">// 下载loader     yarn add -D babel-loader @babel/core @babel/preset-env</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启动开发服务器</span></span><br><span class="line">    <span class="comment">// 下载 yarn add webpack-dev-server -D</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="comment">// 修改端口为3000</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>星星落落</title>
    <url>/archives/84a91e69.html</url>
    <content><![CDATA[  <!-- header -->
  <div class="container grid-sm s-content header">
    <div class="column col-12">
      <h1 class="logo"> <i class="ico i-love"><img src="/img/love.gif" alt="">  </i> <a href="/">等你</a> </h1>
      <p class="description">
        与其说是一种记录，不如说是一种提醒手段，提醒自己时时刻刻要记得温柔和第一次见面时的憧憬。我也不知道这个页面多久才能正式投入使用，但我希望这个清单上的所有事能在有生之年全部完成。这是<a href="#"
          target="_blank">@六七</a> 与 <a href="#" target="_blank">@YY</a> 相爱的N件事。
      </p>
    </div>
  </div>
  <!-- body -->
  <div class="container grid-sm s-content posts">
    <div class="column col-12">
      <ol>
        <li class="done">
          <del>写下这份清单</del>
        </li>
        <li class="">
          <p>等你回来</p>
        </li>
        <li class="">
          <p>一起看夜景</p>
        </li>
        <li class="">
          <p>一起通宵跨年</p>
        </li>
        <li class="">
          <p>一起蹦极</p>
        </li>
        <li class="">
          <p>一起追剧</p>
        </li>
        <li class="">
          <p>把所有有意义的小物件拍照留念</p>
        </li>
        <li class="">
          <p>把对方送到家门口</p>
        </li>
        <li class="">
          <p>手牵手逛街</p>
        </li>
        <li class="">
          <p>一起看电影</p>
        </li>
        <li class="">
          <p>拥有真正的独立和自由</p>
        </li>
        <li class="">
          <p>成为更好的自己</p>
        </li>
        <li class="">
          <p>一起见证一场朋友的婚礼</p>
        </li>
        <li class="">
          <p>教对方一件你擅长的事情</p>
        </li>
        <li class="">
          <p>一起去鬼屋</p>
        </li>
        <li class="">
          <p>在生病的时候陪在对方身边</p>
        </li>
        <li class="">
          <p>耗尽心力的为对方做一件事</p>
        </li>
        <li class="">
          <p>一起期待未来的生活</p>
        </li>
        <li class="">
          <p>一起去当志愿者</p>
        </li>
        <li class="">
          <p>一起养一只宠物</p>
        </li>
        <li class="">
          <p>一起去寺庙里祈福/许愿池许愿</p>
        </li>
        <li class="">
          <p>一起坐摩天轮</p>
        </li>
        <li class="">
          <p>在沙滩上写对方的名字</p>
        </li>
        <li class="">
          <p>去对方的城市给对方一个惊喜</p>
        </li>
        <li class="">
          <p>帮对方化妆</p>
        </li>
        <li class="">
          <p>一起做一次大扫除</p>
        </li>
        <li class="">
          <p>一起组队玩一款游戏</p>
        </li>
        <li class="">
          <p>偷偷买对方想买但没舍得买的东西</p>
        </li>
        <li class="">
          <p>一起写我们的故事</p>
        </li>
        <li class="">
          <p>一起看日落</p>
        </li>
        <li class="">
          <p>一起数星星</p>
        </li>
        <li class="">
          <p>一起看日出</p>
        </li>
        <li class="">
          <p>喝同一杯奶茶</p>
        </li>
        <li class="">
          <p>一起看雪</p>
        </li>
        <li class="">
          <p>一起洗衣服</p>
        </li>
        <li class="">
          <p>去北海道看海</p>
        </li>
        <li class="">
          <p>把肩膀借给对方靠</p>
        </li>
        <li class="">
          <p>一起过我们的纪念日</p>
        </li>
        <li class="">
          <p>一起发呆</p>
        </li>
        <li class="">
          <p>告诉对方我想你</p>
        </li>
        <li class="">
          <p>为对方写篇日记</p>
        </li>
        <li class="">
          <p>在沙滩上画心写彼此的名字</p>
        </li>
        <li class="">
          <p>一起熬夜玩游戏</p>
        </li>
        <li class="">
          <p>学对方说话</p>
        </li>
        <li class="">
          <p>模仿对方喜欢的动漫人物</p>
        </li>
        <li class="">
          <p>给对方写信，然后读给对方听</p>
        </li>
        <li class="">
          <p>一起看流星并且许下心愿</p>
        </li>
        <li class="">
          <p>一起拍照片</p>
        </li>
        <li class="">
          <p>一起骑脚踏车</p>
        </li>
        <li class="">
          <p>戴同一条围巾</p>
        </li>
        <li class="">
          <p>戴同一双手套</p>
        </li>
        <li class="">
          <p>讲故事哄对方睡觉</p>
        </li>
        <li class="">
          <p>一起吃棉花糖</p>
        </li>
        <li class="">
          <p>一起录一首歌</p>
        </li>
        <li class="">
          <p>一起淋雨</p>
        </li>
        <li class="">
          <p>一起面对所有难堪</p>
        </li>
        <li class="">
          <p>一起爬山</p>
        </li>
        <li class="">
          <p>一起露营</p>
        </li>
        <li class="">
          <p>一起晨练</p>
        </li>
        <li class="">
          <p>一起在路边摊撸串</p>
        </li>
        <li class="">
          <p>一起帮助需要帮助的人</p>
        </li>
        <li class="">
          <p>穿情侣装在大街上拥抱</p>
        </li>
        <li class="">
          <p>一起存钱</p>
        </li>
        <li class="">
          <p>分享对方爱吃的食物</p>
        </li>
        <li class="">
          <p>一起手牵手压马路</p>
        </li>
        <li class="">
          <p>咬对方的脸颊</p>
        </li>
        <li class="">
          <p>每天说晚安</p>
        </li>
        <li class="">
          <p>假装当陌生人一天</p>
        </li>
        <li class="">
          <p>一起去海南的天涯海角</p>
        </li>
        <li class="">
          <p>一起买菜</p>
        </li>
        <li class="">
          <p>一起去见对方父母</p>
        </li>
        <li class="">
          <p>把朋友介绍给对方</p>
        </li>
        <li class="">
          <p>一起做鬼脸</p>
        </li>
        <li class="">
          <p>一起走遍世界</p>
        </li>
        <li class="">
          <p>一起扎气球赢奖品</p>
        </li>
        <li class="">
          <p>站在马路的两侧大喊对方的名字</p>
        </li>
        <li class="">
          <p>看你打场球赛</p>
        </li>
        <li class="">
          <p>一起看演唱会</p>
        </li>
        <li class="">
          <p>一起沿铁轨奔跑</p>
        </li>
        <li class="">
          <p>一起挤公车</p>
        </li>
        <li class="">
          <p>一起放风筝</p>
        </li>
        <li class="">
          <p>一起去普罗旺斯看花田</p>
        </li>
        <li class="">
          <p>趁睡觉偷亲对方</p>
        </li>
        <li class="">
          <p>一起放孔明灯</p>
        </li>
        <li class="">
          <p>一起钓鱼</p>
        </li>
        <li class="">
          <p>一起下棋</p>
        </li>
        <li class="">
          <p>交换一个秘密</p>
        </li>
        <li class="">
          <p>将手机屏保设置对方的照片</p>
        </li>
        <li class="">
          <p>每天给对方留言</p>
        </li>
        <li class="">
          <p>一起捏对方的脸</p>
        </li>
        <li class="">
          <p>比赛各种各样的事</p>
        </li>
        <li class="">
          <p>一起看烟火</p>
        </li>
        <li class="">
          <p>在树下埋下我们的约定</p>
        </li>
        <li class="">
          <p>一起去海边扔漂流瓶</p>
        </li>
        <li class="">
          <p>互相鼓励</p>
        </li>
        <li class="">
          <p>一起挑选结婚钻戒</p>
        </li>
        <li class="">
          <p>结婚生子</p>
        </li>
        <li class="">
          <p>拍一套婚纱照</p>
        </li>
        <li class="">
          <p>养育子女及完成人生各项大事</p>
        </li>
        <li class="">
          <p>白头偕老</p>
        </li>
      </ol>
    </div>
  </div>]]></content>
      <categories>
        <category>fine</category>
      </categories>
      <tags>
        <tag>星星</tag>
      </tags>
  </entry>
  <entry>
    <title>Es6</title>
    <url>/archives/42b82995.html</url>
    <content><![CDATA[<h2 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h2><div id="chakhsu" class="blog-title"></div> <script> var chakhsu = function (r) { function t() { return b[Math.floor(Math.random() * b.length)] } function e() { return String.fromCharCode(94 * Math.random() + 33) } function n(r) { for (var n = document.createDocumentFragment(), i = 0; r > i; i++) { var l = document.createElement("span"); l.textContent = e(), l.style.color = t(), n.appendChild(l) } return n } function i() { var t = o[c.skillI]; c.step ? c.step-- : (c.step = g, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : "forward" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = "backward", c.delay = a) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = "forward")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d) } /*以下内容自定义修改*/ var l = "这个世界", o = ["没什么好畏惧的，反正我们只来一次。", ].map(function (r) { return r + "" }), a = 2, g = 1, s = 5, d = 75, b = ["rgb(110,64,170)", "rgb(150,61,179)", "rgb(191,60,175)", "rgb(228,65,157)", "rgb(254,75,131)", "rgb(255,94,99)", "rgb(255,120,71)", "rgb(251,150,51)", "rgb(226,183,47)", "rgb(198,214,60)", "rgb(175,240,91)", "rgb(127,246,88)", "rgb(82,246,103)", "rgb(48,239,130)", "rgb(29,223,163)", "rgb(26,199,194)", "rgb(35,171,216)", "rgb(54,140,225)", "rgb(76,110,219)", "rgb(96,84,200)"], c = {text: "", prefixP: -s, skillI: 0, skillP: 0, direction: "forward", delay: a, step: g}; i() }; chakhsu(document.getElementById('chakhsu')); </script> <div>


<p>
  <span class='gold'>正则表达式</span>
</p>

<hr>
<img src="/img/zheng.png" alt="">

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="comment">// 正则表达式  RegExp对象    数字，字符，字母</span></span><br><span class="line">       <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\w/</span>);  </span><br><span class="line"></span><br><span class="line">       <span class="comment">// 字面量  不加引号</span></span><br><span class="line">       <span class="keyword">var</span> reg1 = <span class="regexp">/^abc/</span>;  <span class="comment">// 包含abc 返回true，无关顺序  ^ 起始位置  </span></span><br><span class="line">       <span class="keyword">var</span> reg2 = <span class="regexp">/love$/</span>   <span class="comment">//   $ 终止位置写在最后</span></span><br><span class="line">       <span class="comment">// test 检测是否合格</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// console.log(reg.test(&#x27;w&#x27;));     </span></span><br><span class="line">       <span class="comment">// console.log(reg);</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 校验数据，数据要加引号 。返回ture 或false； boolean值</span></span><br><span class="line">       <span class="keyword">var</span> r = reg.test(<span class="string">&#x27;l&#x27;</span>);  </span><br><span class="line">       <span class="built_in">console</span>.log(r);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> s = reg1.test(<span class="string">&#x27;abcda&#x27;</span>);</span><br><span class="line">       <span class="built_in">console</span>.log(s);  <span class="comment">//  true </span></span><br><span class="line">      </span><br><span class="line">       <span class="keyword">let</span> s1 = <span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;display&#x27;</span>));   <span class="comment">// false</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//1.5 精确匹配love 以love开始，以love结束</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> reg2 = <span class="regexp">/^love$/</span></span><br><span class="line"></span><br><span class="line">       <span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;love&#x27;</span>));  <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;lovelove&#x27;</span>));  <span class="comment">/* false */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.6字符类 []表示有一系列可供选择，只要匹配其中一个就可以</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> reg3 = <span class="regexp">/[agree]/</span>;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;ag&#x27;</span>))  <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;ea&#x27;</span>))  <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;ra&#x27;</span>))  <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;agre&#x27;</span>))  <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;aree&#x27;</span>))  <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;aee&#x27;</span>))  <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;zl&#x27;</span>))  <span class="comment">/* false */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.7  a || b|| c 其他都是false</span></span><br><span class="line">       <span class="keyword">var</span> reg4 = <span class="regexp">/^[abc]$/</span>;</span><br><span class="line">       <span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;b&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;c&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;ab&#x27;</span>)); <span class="comment">/* false */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;ac&#x27;</span>)); <span class="comment">/* false */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">/* false */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.8  26个小写英文字母，任何多个 </span></span><br><span class="line">       <span class="keyword">let</span>  reg5 = <span class="regexp">/[a-z]/</span>   <span class="comment">/* 大写 /[A-Z]/ 同理 */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg5.test(<span class="string">&#x27;sdfa&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg5.test(<span class="string">&#x27;Z&#x27;</span>)); <span class="comment">/* false  */</span></span><br><span class="line">       <span class="comment">// 1.9  26个小写英文字母，只有一个 </span></span><br><span class="line">       <span class="keyword">let</span> reg6 = <span class="regexp">/^[a-z]$/</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg6.test(<span class="string">&#x27;a&#x27;</span>));  <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg6.test(<span class="string">&#x27;sdfa&#x27;</span>)); <span class="comment">/* false */</span></span><br><span class="line">       <span class="built_in">console</span>.log(reg6.test(<span class="string">&#x27;Z&#x27;</span>)); <span class="comment">/* false  */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.0 26个英文字母 包含大小写 任何多个</span></span><br><span class="line">       <span class="keyword">let</span> re2 = <span class="regexp">/[a-zA-Z]/</span></span><br><span class="line">       <span class="built_in">console</span>.log(re2.test(<span class="string">&#x27;asZk&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.0 26个英文字母 包含大小写 只有一个</span></span><br><span class="line">       <span class="keyword">let</span> re3 = <span class="regexp">/^[a-zA-Z]$/</span></span><br><span class="line">       <span class="built_in">console</span>.log(re3.test(<span class="string">&#x27;asZk&#x27;</span>)); <span class="comment">/* false */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.0 26个英文字母 [^] 扩号里，取反</span></span><br><span class="line">       <span class="keyword">let</span> re4 = <span class="regexp">/[^a-zA-Z]$/</span></span><br><span class="line">       <span class="built_in">console</span>.log(re4.test(<span class="string">&#x27;asZk&#x27;</span>)); <span class="comment">/* false */</span></span><br><span class="line">       <span class="built_in">console</span>.log(re4.test(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 2.1 只匹配数字  满足有数字即可</span></span><br><span class="line">       <span class="keyword">let</span> re5 = <span class="regexp">/\d/</span></span><br><span class="line">       <span class="built_in">console</span>.log(re5.test(<span class="string">&#x27;sdf&#x27;</span>));  <span class="comment">/* false */</span></span><br><span class="line">       <span class="built_in">console</span>.log(re5.test(<span class="string">&#x27;sdf&#x27;</span>));  <span class="comment">/* false */</span></span><br><span class="line">       <span class="built_in">console</span>.log(re5.test(<span class="string">&#x27;sA&#x27;</span>));  <span class="comment">/* false */</span></span><br><span class="line">       <span class="built_in">console</span>.log(re5.test(<span class="string">&#x27;sdS2&#x27;</span>));  <span class="comment">/* ture */</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 2.2 量词符</span></span><br><span class="line">       <span class="comment">// 2.2.1   * 相当于 &gt;= 0,可以出现0 次或多次</span></span><br><span class="line">       <span class="comment">// 2.2.2   + 相当于 &gt;= 1,可以出现1 次或多次</span></span><br><span class="line">       <span class="keyword">let</span> re6 = <span class="regexp">/a*/</span></span><br><span class="line">       <span class="built_in">console</span>.log(re6.test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">/* true*/</span></span><br><span class="line">       <span class="built_in">console</span>.log(re6.test(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(re6.test(<span class="string">&#x27;b&#x27;</span>)); <span class="comment">/* ture */</span></span><br><span class="line">       <span class="built_in">console</span>.log(re6.test(<span class="string">&#x27;ab&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> re7 = <span class="regexp">/a+/</span></span><br><span class="line">       <span class="built_in">console</span>.log(re6.test(<span class="string">&#x27;&#x27;</span>)); <span class="comment">/* true*/</span></span><br><span class="line">       <span class="built_in">console</span>.log(re6.test(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line">       <span class="built_in">console</span>.log(re6.test(<span class="string">&#x27;b&#x27;</span>)); <span class="comment">/* ture */</span></span><br><span class="line">       <span class="built_in">console</span>.log(re6.test(<span class="string">&#x27;ab&#x27;</span>)); <span class="comment">/* true */</span></span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='label'>简单用户输入验证</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tabs]</span><br><span class="line"></span><br><span class="line">[tab title=<span class="string">&quot;css&quot;</span>]</span><br><span class="line"> span &#123;</span><br><span class="line">            <span class="attr">color</span>: #aaa;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .right &#123;</span><br><span class="line">            <span class="attr">color</span>: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .wrong &#123;</span><br><span class="line">            <span class="attr">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">[/tab]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[tab title=<span class="string">&quot;js&quot;</span>]</span><br><span class="line">  <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> span = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/^[a-zA-Z]&#123;6,10&#125;/</span>;</span><br><span class="line">        btn.addEventListener(<span class="string">&#x27;blur&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> text = btn.value;</span><br><span class="line">            <span class="keyword">if</span> (reg.test(text)) &#123;</span><br><span class="line">                span.style.color = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">                span.innerText =<span class="string">&#x27;right&#x27;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                span.classList.add(<span class="string">&#x27;wrong&#x27;</span>)</span><br><span class="line">                span.innerText=<span class="string">&#x27;wrong&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">[/tab]</span><br><span class="line"></span><br><span class="line">[/tabs]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>
  <span class='wram'>面向对象</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;success&quot;</span> outline=<span class="string">&quot;1&quot;</span>]面向对象[/tag]</span><br><span class="line">[collapse title=<span class="string">&quot;面向对象用户校验&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="title">constructor</span>(<span class="params">opt</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">Object</span>.assign(<span class="built_in">this</span>, opt);</span><br><span class="line">                <span class="built_in">this</span>.ipt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">ipt</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">                <span class="built_in">this</span>.btn.addEventListener(<span class="string">&#x27;blur&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>, <span class="string">&#x27;this&#x27;</span>); <span class="comment">/*此时this指向 btn，绑定事件，给谁绑定就是谁  */</span></span><br><span class="line">                    <span class="built_in">console</span>.log(that, <span class="string">&#x27;that&#x27;</span>); <span class="comment">/* 此时的that指向传递的数据 */</span></span><br><span class="line">                    <span class="keyword">let</span> text = <span class="built_in">this</span>.value;</span><br><span class="line">                    <span class="keyword">let</span> flag = that.reg.test(text);</span><br><span class="line">                    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                        that.span.style.color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">                        that.span.innerText = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        that.span.style.color = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">                        that.span.innerText = <span class="string">&#x27;wrong&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ex = <span class="keyword">new</span> Test(&#123;</span><br><span class="line">            <span class="attr">btn</span>: <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>),</span><br><span class="line">            <span class="attr">span</span>: <span class="built_in">document</span>.querySelector(<span class="string">&#x27;span&#x27;</span>),</span><br><span class="line">            <span class="attr">reg</span>: <span class="regexp">/^[a-zA-Z-]&#123;6,10&#125;/</span>,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='gold'>替换部分敏感词汇</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;danger&quot;</span> outline]替换部分敏感词汇[/tag]</span><br><span class="line">[collapse title=<span class="string">&quot;replace&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>enter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> test = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> tests = test.value;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            tests = tests.replace(<span class="regexp">/tmd|TMD|黃色|sb你妈的|fw/g</span>, <span class="string">&#x27;**&#x27;</span>); <span class="comment">/* g代表全部匹配  */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            div.innerText = tests;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='green'>扩展运算符</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;info&quot;</span> outline]扩展运算符[/tag]</span><br><span class="line"></span><br><span class="line">[collapse title=<span class="string">&quot;...扩展运算符&quot;</span>]</span><br><span class="line">&lt;span&gt;&lt;<span class="regexp">/span&gt;&lt;span&gt;&lt;/</span>span&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">let</span> arry = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		arry1 = [<span class="string">&#x27;qw&#x27;</span>, <span class="number">23</span>, <span class="number">32</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="comment">// 添加数组arry1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		arry.push(...arry1)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="built_in">console</span>.log(arry);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="comment">/*  [1, 2, 3, &quot;qw&quot;, 23, 32]  */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="built_in">console</span>.log(...arry);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="comment">/* 1 2 3 &quot;qw&quot; 23 32  */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">let</span> span = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;span&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="built_in">console</span>.log(span);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="built_in">console</span>.log(...span);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">var</span> obj = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="number">1</span>: <span class="string">&#x27;东风&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="number">2</span>: <span class="string">&#x27;东西&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="number">3</span>: <span class="string">&#x27;东得&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="number">4</span>: <span class="string">&#x27;东&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="attr">length</span>: <span class="number">5</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="comment">// 将为数组转化成数组，第二个参数是函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(obj, <span class="function"><span class="params">item</span> =&gt;</span> item + <span class="string">&#x27;sd&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="built_in">console</span>.log(arr2);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="comment">// [&quot;undefinedsd&quot;, &quot;东风sd&quot;, &quot;东西sd&quot;, &quot;东得sd&quot;, &quot;东sd&quot;]</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='aqua'>find</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;info&quot;</span>]find[/tag]</span><br><span class="line">[collapse title=<span class="string">&quot;find&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line">&lt;script&gt;</span><br><span class="line">		<span class="comment">//字面量 筛选数据，</span></span><br><span class="line">		<span class="keyword">var</span> arr = [</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">90</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">93</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">20</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;d&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;e&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;,</span><br><span class="line">		];</span><br><span class="line">		<span class="comment">// 遍历同时执行回调函数 找到目标后不再继续查找， 退出循环</span></span><br><span class="line">		<span class="keyword">var</span> res = arr.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123; <span class="keyword">return</span> item.score == <span class="number">100</span> &#125;);</span><br><span class="line">		<span class="built_in">console</span>.log(res); <span class="comment">/* name：d */</span></span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='purp'>findIndex</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;warn&quot;</span>]findIndex[/tag]</span><br><span class="line">		<span class="comment">//字面量 筛选数据，查找下标</span></span><br><span class="line">		<span class="keyword">var</span> arr = [</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">10</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">93</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">20</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;d&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">name</span>: <span class="string">&#x27;e&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;,</span><br><span class="line">		];</span><br><span class="line">		<span class="comment">// 遍历同时执行回调函数 找到目标后不再继续查找， 退出循环</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// var res = arr.findIndex(function (item) &#123; return item.score == 100 &#125;);</span></span><br><span class="line">		<span class="comment">// 箭头函数</span></span><br><span class="line">		<span class="keyword">var</span> res = arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.score == <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">console</span>.log(res); <span class="comment">/* 3 下标3*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='purps'>includes</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找数据是否存在 存在true ，不存在 false</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">34</span>, <span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="literal">NaN</span>));  <span class="comment">/* true */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="literal">NaN</span>));  <span class="comment">/* -1 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">12</span>));   <span class="comment">/* 返回下标，无法识别NaN，返回-1 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">&#x27; hello world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;hello&#x27;</span>));</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='pink'>startsWidth</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;success&quot;</span>]startsWith[/tag]</span><br><span class="line">[collapse title=<span class="string">&quot;startsWith&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line">&lt;script&gt;</span><br><span class="line">		<span class="comment">// 查找字符串以什么开始，结束，返回值boolean</span></span><br><span class="line">		<span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">		<span class="comment">// start</span></span><br><span class="line">		<span class="built_in">console</span>.log(str.startsWith(<span class="string">&#x27;h&#x27;</span>));  <span class="comment">/* true */</span></span><br><span class="line">		<span class="built_in">console</span>.log(str.startsWith(<span class="string">&#x27;H&#x27;</span>)); <span class="comment">/* false */</span></span><br><span class="line">		<span class="comment">// end</span></span><br><span class="line">		<span class="built_in">console</span>.log(str.endsWith(<span class="string">&#x27;d&#x27;</span>));</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='black'>Set</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;danger&quot;</span> outline]<span class="built_in">Set</span>[/tag]</span><br><span class="line">[collapse title=<span class="string">&quot;Set结构&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		<span class="comment">// Set 结构不是数组</span></span><br><span class="line">		<span class="comment">/* 数组去重  只会针对基本数据类型，number boolean,string,null,undefined */</span></span><br><span class="line">		<span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">34</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">10</span>];</span><br><span class="line">		<span class="keyword">var</span> res = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line">		<span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 数组长度</span></span><br><span class="line">		<span class="built_in">console</span>.log(res.size); <span class="comment">/* 7 */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 添加数据 </span></span><br><span class="line">		res.add(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">			.add(<span class="string">&#x27;欧文得&#x27;</span>)</span><br><span class="line">		<span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 删除</span></span><br><span class="line">		res.delete(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">		<span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 包含</span></span><br><span class="line">		<span class="built_in">console</span>.log(res.has(<span class="number">10</span>));  <span class="comment">/* true */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 清除所有数据  不需要传递参数</span></span><br><span class="line">		<span class="comment">// res.clear();</span></span><br><span class="line">		<span class="comment">// console.log(res);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 转化数组</span></span><br><span class="line">		<span class="comment">// var res1 = Array.from(res);</span></span><br><span class="line">		<span class="comment">// console.log(res1[1]);</span></span><br><span class="line">		<span class="comment">// console.log(...res1);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 简写  去重，返回数组</span></span><br><span class="line">		<span class="built_in">console</span>.log([... <span class="keyword">new</span> <span class="built_in">Set</span>(arr)]);</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr)));</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='blue'>深拷贝和浅拷贝</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;primary&quot;</span> outline]深拷贝和浅拷贝[/tag]</span><br><span class="line">[collapse title=<span class="string">&quot;深拷贝和浅拷贝&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">        <span class="comment">// 浅拷贝 将原数组或原对象的引用（指针）直接赋值给新对象</span></span><br><span class="line">        <span class="comment">// 注意：新对象，由于拷贝的是同一个指针，指向同一个内存中的同一个空间，会相互影响</span></span><br><span class="line">        <span class="keyword">var</span> o = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;war&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> obj = o;</span><br><span class="line">        obj.name = <span class="string">&#x27;peace&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(o);  <span class="comment">/* peace */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 深拷贝  创建的新对象和数组，将各项属性的值，是值而不是指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> o = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;war&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 方式一：手动复制实现深拷贝</span></span><br><span class="line">        <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: o.name &#125;; <span class="comment">/* 开辟新的空间 */</span></span><br><span class="line">        obj.name = <span class="string">&#x27;peace&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(o);  <span class="comment">/* war */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二：  无法解决多层的拷贝</span></span><br><span class="line">        <span class="keyword">var</span> r = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> s = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给 s 赋值 r 的各个属性</span></span><br><span class="line">        <span class="built_in">Object</span>.assign(s, r);</span><br><span class="line">        s.name = <span class="string">&#x27;world&#x27;</span>;  <span class="comment">/* 重复的属性，后面的会覆盖前者 */</span></span><br><span class="line">        <span class="built_in">console</span>.log(s); <span class="comment">/* world */</span></span><br><span class="line">        <span class="built_in">console</span>.log(r);<span class="comment">/* hello */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式三： </span></span><br><span class="line">        <span class="keyword">var</span> test = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;我的&#x27;</span>,</span><br><span class="line">            <span class="attr">info</span>: &#123;</span><br><span class="line">                <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">arr</span>: [<span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">            <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 函数无法实现深拷贝，原因：函数无法转化字符串</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(test));</span><br><span class="line">        r.info.age = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(test); <span class="comment">/* 21 */</span></span><br><span class="line">        <span class="built_in">console</span>.log(r);  <span class="comment">/* 20 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归</span></span><br><span class="line">        <span class="comment">/*思路：</span></span><br><span class="line"><span class="comment">        1，判断数据类型</span></span><br><span class="line"><span class="comment">        2，遍历数组和对象，  </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">var</span> tests = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;你的&#x27;</span>,</span><br><span class="line">            <span class="attr">info</span>: &#123;</span><br><span class="line">                <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">arr</span>: [<span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">            <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">say</span> :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">test</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 判断是否是基本数据类型 是=&gt;return</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> test !== <span class="string">&#x27;object&#x27;</span> || test == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断test的数据类型</span></span><br><span class="line">            <span class="keyword">let</span> result = test.__proto__.constructor == <span class="string">&#x27;Object&#x27;</span> ? &#123;&#125; : [];</span><br><span class="line">            <span class="comment">// console.log(result);</span></span><br><span class="line">            <span class="comment">// 遍历对象test（对象|数组）</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> test) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> test[key] == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// test[key] 是对象或数组</span></span><br><span class="line">                    result[key] = deepCopy(test[key])</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result[key] = test[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> rs = deepCopy(tests);</span><br><span class="line">        rs.name = <span class="string">&#x27;我的啊&#x27;</span></span><br><span class="line">        rs.say()</span><br><span class="line">        <span class="built_in">console</span>.log(rs);</span><br><span class="line">        <span class="built_in">console</span>.log(tests);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='blues'>数据类型严格校验</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;success&quot;</span> outline=<span class="string">&quot;1&quot;</span>]数据类型严格校验[/tag]</span><br><span class="line">[collapse title=<span class="string">&quot;isType&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 1 数据类型</span></span><br><span class="line">        <span class="comment">// 简单数据类型:string,Boolean,number,undefined,null</span></span><br><span class="line">        <span class="comment">// 复杂数据类型:Object,Array,Function</span></span><br><span class="line">        <span class="comment">// 严格校验数据类型</span></span><br><span class="line">        <span class="comment">//  基础</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);  <span class="comment">/* object */</span></span><br><span class="line">        <span class="built_in">console</span>.log(r.slice(<span class="number">8</span>, r.length - <span class="number">1</span>).toLowerCase());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装</span></span><br><span class="line">        <span class="comment">// function isType(content) &#123;</span></span><br><span class="line">        <span class="comment">//     let r = Object.prototype.toString.call(content);</span></span><br><span class="line">        <span class="comment">//     return r.slice(8, r.length - 1).toLowerCase();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 闭包高度优化 </span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content) == <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> util = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        [<span class="string">&#x27;Array&#x27;</span>, <span class="string">&#x27;Object&#x27;</span>, <span class="string">&#x27;Boolean&#x27;</span>, <span class="string">&#x27;Null&#x27;</span>, <span class="string">&#x27;Undefined&#x27;</span>, <span class="string">&#x27;Number&#x27;</span>, <span class="string">&#x27;Date&#x27;</span>, <span class="string">&#x27;Function&#x27;</span>, <span class="string">&#x27;String&#x27;</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            util[<span class="string">`is<span class="subst">$&#123;item&#125;</span>`</span>] = isType(item);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// var util = &#123;</span></span><br><span class="line">        <span class="comment">//     isArray :function(con)&#123;&#125;,</span></span><br><span class="line">        <span class="comment">//     isObject :function(con)&#123;&#125;,</span></span><br><span class="line">        <span class="comment">//     isNumber :function(con)&#123;&#125;,</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(util.isDate(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">/* true */</span></span><br><span class="line">        <span class="built_in">console</span>.log(util.isArray([]));  <span class="comment">/* true */</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">/* Object */</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> []); <span class="comment">/* Object */</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>); <span class="comment">/* function */</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>); <span class="comment">/* function */</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Array</span>); <span class="comment">/* function */</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>

<hr>
<p>
  <span class='just'>数组操作</span>
</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tag type=<span class="string">&quot;danger&quot;</span> outline]数组操作[/tag]</span><br><span class="line">[collapse title=<span class="string">&quot;数组操作部分&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(arr);  <span class="comment">/*  [empty × 10] */</span></span><br><span class="line">        <span class="built_in">console</span>.log(arr.length);  <span class="comment">/* 长度为10的空数组 */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> arrs = [<span class="number">100</span>];</span><br><span class="line">        <span class="comment">// 添加  从后添加 push</span></span><br><span class="line">        <span class="comment">//push(): 可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。 </span></span><br><span class="line">        <span class="comment">//pop()：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。</span></span><br><span class="line">        <span class="keyword">var</span> r = arrs.push(<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(r, <span class="string">&#x27;r&#x27;</span>); <span class="comment">/* 返回数组的新length  2*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(arrs, <span class="string">&#x27;arrs&#x27;</span>);  <span class="comment">/* [100, 200] */</span></span><br><span class="line">        <span class="keyword">var</span> r = arrs.pop()</span><br><span class="line">        <span class="built_in">console</span>.log(r, <span class="string">&#x27;r&#x27;</span>); <span class="comment">/* 返回删掉的数据 100*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(arrs, <span class="string">&#x27;arrs&#x27;</span>);  <span class="comment">/* [] */</span></span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        <span class="comment">// shift()：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。</span></span><br><span class="line">        <span class="keyword">var</span> r = arrs.shift();</span><br><span class="line">        <span class="built_in">console</span>.log(r, <span class="string">&#x27;r&#x27;</span>); <span class="comment">/* 返回删掉的数据 100*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(arrs, <span class="string">&#x27;arrs&#x27;</span>);  <span class="comment">/* [] */</span></span><br><span class="line">        <span class="comment">//unshift:将参数添加到原数组开头，并返回数组的长度 。</span></span><br><span class="line">        <span class="keyword">var</span> r = arrs.unshift(<span class="number">122</span>, <span class="number">12</span>, <span class="number">23</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(r, <span class="string">&#x27;r&#x27;</span>); <span class="comment">/* 返回新的数组length 4*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(arrs, <span class="string">&#x27;arrs&#x27;</span>);  <span class="comment">/* [122, 12, 23, 100] */</span></span><br><span class="line">        <span class="keyword">var</span> re = arrs.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(re); <span class="comment">/* 空的数组 */</span></span><br><span class="line">        <span class="built_in">console</span>.log(arrs);</span><br><span class="line">        <span class="comment">// 第一个参数当前操作的下标,</span></span><br><span class="line">        <span class="comment">// 第二个参数,1,删掉一个,2,删掉2个,0,代表添加</span></span><br><span class="line">        <span class="comment">// 第三个参数,替换的数据</span></span><br><span class="line">[/collapse]</span><br></pre></td></tr></table></figure>
<ol>
<li>js中，call(),apply(),bind()的作用？共同点？</li>
</ol>
<p> <em>共同点：都会改变this指向；不同点：call和apply会调用函数，可以改变函数内部的this指向；call传递参数用逗号分开，apply用数组传递参数；bind，不会立即调用函数，可以改变函数内部this指向，一般用在定时器中</em></p>
<hr>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax</title>
    <url>/archives/c5a6a264.html</url>
    <content><![CDATA[<p> [hint]Http协议是什么？[/hint]</p>
<ul>
<li>http协议（ hypertext transport protocol协议）【超文本传输协议】，详细规定了浏览器和万维网之间通信的的规则 ；<br>[tag type=”primary” outline]常见状态码&amp;含义[/tag]</li>
<li>200 - 请求成功，已经正常处理完毕</li>
<li>301 - 请求永久重定向，转移到其它URL</li>
<li>302 - 请求临时重定向</li>
<li>304 - 请求被重定向到客户端本地缓存</li>
<li>400 - 客户端请求存在语法错误</li>
<li>401 - 客户端请求没有经过授权</li>
<li>403 - 客户端的请求被服务器拒绝，一般为客户端没有访问权限</li>
<li>404 - 客户端请求的URL在服务端不存在</li>
<li>500 - 服务端永久错误</li>
</ul>
<hr>
<ul>
<li>100-199 用于指定客户端应相应的某些动作。</li>
<li>200-299 用于表示请求成功。</li>
<li>300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。</li>
<li>400-499 用于指出客户端的错误。</li>
<li>500-599 用于支持服务器错误。</li>
</ul>
<hr>
<p>[tag type=”danger”]Ajax 概述[/tag]<br>​Ajax：标准读音 [ˈeɪˌdʒæks] ，中文音译：阿贾克斯<br>它是浏览器提供的一套方法，可以实现页面无刷新更新数据，提高用户浏览网站应用的体验。<br>[tag type=”success”]Ajax 应用场景[/tag]</p>
<ul>
<li>页面上拉加载更多数据</li>
<li>列表数据无刷新分页</li>
<li>表单项离开焦点数据验证</li>
<li>搜索框提示文字下拉列表</li>
</ul>
<hr>
<p>[tag type=”warn” outline]JSON[/tag]</p>
<ul>
<li>JSON是什么</li>
<li>JSON ( JavaScript Object Notation) ，是一种数据交互格式。</li>
<li>在真实的项目中，服务器端<strong>大多数情况下会以 JSON对象作为响应数据的格式</strong>。当客户端拿到响应数据时，要将 JSON 数据和 HTML 字符串进行拼接，然后将拼接的结果展示在页面中。</li>
<li>在 http 请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输。</li>
<li>注意事项</li>
<li>JSON 规定字符集是UTF-8，字符串必须使用””，Object 的键也必须使用””</li>
<li>数组或对象的最后一个成员，不能加 逗号</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.parse() <span class="comment">// 将 json 字符串转换为json对象</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify() <span class="comment">// 将json对象转换为json字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 JSON对象</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;starcraft&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="string">&quot;12&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2 JSON数组</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;person&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;jobs&quot;</span>,</span><br><span class="line">        <span class="number">60</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3  JSON 数组对象</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;arr&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;tom&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;丽里&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: <span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[tabs]</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>文件</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;圣诞节&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;arr&quot;</span>:[<span class="number">10</span>,<span class="number">20</span>,<span class="number">39</span>,<span class="number">43</span>],</span><br><span class="line">    <span class="string">&quot;bl&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;null&quot;</span>:<span class="string">&quot;null&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;接受文件&quot;</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="built_in">require</span>(<span class="string">&quot;./home.json&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line"><span class="comment">//&#123;&quot;name&quot;:&quot;圣诞节&quot;,&quot;age&quot;:18,&quot;arr&quot;:[10,20,39,43],&quot;bl&quot;:true,&quot;null&quot;:&quot;null&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<hr>
<p>[tag type=”info” outline]简单获取接口渲染页面[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;获取接口渲染页面&quot;</span> </span><br><span class="line"> &lt;script&gt;</span><br><span class="line"><span class="comment">// 1.获取btn</span></span><br><span class="line">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="comment">// 绑定事件</span></span><br><span class="line">        btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 发送数据</span></span><br><span class="line">            $.get(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//    打印返回的数据</span></span><br><span class="line">                <span class="keyword">let</span> datas = data.data;</span><br><span class="line">                <span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">                ul.innerHTML = datas.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;li&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;<span class="subst">$&#123;item.bookname&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;<span class="subst">$&#123;item.author&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;<span class="subst">$&#123;item.publisher&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">                `</span></span><br><span class="line">                &#125;).join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”warn” outline]get的实现步骤[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[collapse title=<span class="string">&quot;原生js的实现步骤&quot;</span> show=<span class="string">&quot;true&quot;</span>]</span><br><span class="line">          <span class="comment">/* </span></span><br><span class="line"><span class="comment">            0：请求未初始化(还没有调用open())</span></span><br><span class="line"><span class="comment">            1：请求已经建立，但是还没有发送(还没有调用send())</span></span><br><span class="line"><span class="comment">            2：请求已经发送</span></span><br><span class="line"><span class="comment">            3：请求正在处理中，通常响应中已经有部分数据可以用了</span></span><br><span class="line"><span class="comment">            4：响应已经完成，可以获取并使用服务器的响应了</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="number">1.</span> 创建ajax对象</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 告诉 Ajax 请求地址以及请求方式</span><br><span class="line"></span><br><span class="line">   xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.example.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 发送请求</span><br><span class="line"></span><br><span class="line">   xhr.send();</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 获取服务器端给与客户端的响应数据</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText); <span class="comment">/* 4等于完全响应成功 */</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">[tag type=&quot;warn&quot; outline]post的实现步骤[/tag]</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 原生js实现post请求  404请求路径错误</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="comment">// 监听事件</span></span><br><span class="line">        <span class="comment">// xhr.onreadystatechange = function () &#123;</span></span><br><span class="line">        <span class="comment">//     // 拿到服务端响应的数据</span></span><br><span class="line">        <span class="comment">//     console.log(xhr.responseText);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.告诉ajax请求地址和请求方式</span></span><br><span class="line">        xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>);</span><br><span class="line">        <span class="comment">// 设置请求头格式</span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        xhr.send(<span class="string">&#x27;bookname=嘻嘻&amp;author=阿斯达克&amp;publisher=纳斯达克&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(xhr.readyState); <span class="comment">/* 4等于完全响应成功 */</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”info” outline]ajax练习[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>gets<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>get<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>del<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// all</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">0</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 原生js 发送aiax 获取所有数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>)) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// one</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 原生js 发送aiax 获取one数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="comment">// 原生js 发送aiax del数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 2.告诉ajax请求地址和请求方式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=5706&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 设置请求头格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 3.发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(xhr.readyState); <span class="comment">/* 4等于完全响应成功 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// &#123;status: 200, msg: &quot;获取图书列表成功&quot;, data: Array(2)&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// add</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">2</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 原生js 发送aiax 获取所有数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// // 原生js实现post请求  404请求路径错误</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 监听事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// xhr.onreadystatechange = function () &#123;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">//     // 拿到服务端响应的数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">//     console.log(xhr.responseText);</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 2.告诉ajax请求地址和请求方式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 设置请求头格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 3.发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send(<span class="string">&#x27;bookname=嘻嘻&amp;author=阿斯达克&amp;publisher=打开纳斯达克&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(xhr.readyState); <span class="comment">/* 4等于完全响应成功 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// &#123;status: 200, msg: &quot;获取图书列表成功&quot;, data: Array(2)&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// del</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btns[<span class="number">3</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 原生js 发送aiax del数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 2.告诉ajax请求地址和请求方式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/delbook?id=5716&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 设置请求头格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 3.发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(xhr.readyState); <span class="comment">/* 4等于完全响应成功 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// &#123;status: 200, msg: &quot;获取图书列表成功&quot;, data: Array(2)&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>[tag type=”info” outline]express[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入express  npm i express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 创建路由规则</span></span><br><span class="line"><span class="comment">// request 请求报文的封装</span></span><br><span class="line"><span class="comment">// response 响应报文的封装</span></span><br><span class="line">app.get(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">resquest, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置 响应头 允许跨域</span></span><br><span class="line">    response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="comment">// 响应体</span></span><br><span class="line">    response.send(<span class="string">&#x27;hello,express你好&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;服务已经启动，8000端口监听中&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”danger”]编码，解码[/tag]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uname = <span class="string">&#x27;钟离&#x27;</span>;</span><br><span class="line">        <span class="comment">// 编码</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">encodeURIComponent</span>(uname);</span><br><span class="line">        <span class="comment">// 解码</span></span><br><span class="line">        <span class="keyword">var</span> res = <span class="built_in">decodeURIComponent</span>(r);</span><br><span class="line">        <span class="built_in">console</span>.log(r, <span class="string">&#x27;编码&#x27;</span>); <span class="comment">/* %E9%92%9F%E7%A6%BB 编码 */</span></span><br><span class="line">        <span class="built_in">console</span>.log(res, <span class="string">&#x27;解码&#x27;</span>); <span class="comment">/* 钟离 解码*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”primary” outline]hero练习[/tag]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://autumnfish.cn/api/hero/info&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">`<span class="subst">$&#123;$(<span class="string">&#x27;.hero&#x27;</span>).val()&#125;</span>`</span> &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;.showname&#x27;</span>).text(data.name)</span><br><span class="line">        $(<span class="string">&#x27;.name&#x27;</span>).text(<span class="string">`名称:<span class="subst">$&#123;data.name&#125;</span>`</span>)</span><br><span class="line">        $(<span class="string">&#x27;.title&#x27;</span>).text(<span class="string">`外号：<span class="subst">$&#123;data.title&#125;</span>`</span>)</span><br><span class="line">        $(<span class="string">&#x27;.story&#x27;</span>).text(<span class="string">`简介：<span class="subst">$&#123;data.story&#125;</span>`</span>)</span><br><span class="line">        $(<span class="string">&#x27;.right&#x27;</span>).css(<span class="string">&#x27;background-image&#x27;</span>, <span class="string">`url(<span class="subst">$&#123;data.bg&#125;</span>)`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">    $.get(<span class="string">`https://autumnfish.cn/api/hero/info?name=<span class="subst">$&#123;$(<span class="string">&#x27;.hero&#x27;</span>).val()&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      $(<span class="string">&#x27;.showname&#x27;</span>).text(data.name)</span><br><span class="line">      $(<span class="string">&#x27;.name&#x27;</span>).text(<span class="string">`名称:<span class="subst">$&#123;data.name&#125;</span>`</span>)</span><br><span class="line">      $(<span class="string">&#x27;.title&#x27;</span>).text(<span class="string">`外号：<span class="subst">$&#123;data.title&#125;</span>`</span>)</span><br><span class="line">      $(<span class="string">&#x27;.story&#x27;</span>).text(<span class="string">`简介：<span class="subst">$&#123;data.story&#125;</span>`</span>)</span><br><span class="line">      $(<span class="string">&#x27;.right&#x27;</span>).css(<span class="string">&#x27;background-image&#x27;</span>, <span class="string">`url(<span class="subst">$&#123;data.bg&#125;</span>)`</span>)</span><br><span class="line">      $(<span class="string">&#x27;.hero&#x27;</span>).val(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”info” outline]封装ajax[/tag]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">objectToString</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> list = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">                list.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;data[key]&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list.join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ajax 封装</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> params = objectToString(options.data);</span><br><span class="line">            <span class="built_in">console</span>.log(params); <span class="comment">/* id=5996&amp;name=骄傲&amp;sex=男 */</span></span><br><span class="line">            <span class="comment">//  区分get ，post请求</span></span><br><span class="line">            <span class="comment">// 将type转化大写</span></span><br><span class="line">            <span class="keyword">let</span> type = options.type.toUpperCase();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 将json字符串转化成json对象   JSON.parse()</span></span><br><span class="line">                    <span class="comment">// 将对象转化成对象   JSON.stringify()</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">                    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(xhr.responseText)</span><br><span class="line">                    options.success(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 发送请求不一样，get在url地址中；post在请求参数send()</span></span><br><span class="line">            <span class="comment">// get 不需要请求头；post需要请求头</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">                xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">`<span class="subst">$&#123;options.url&#125;</span>?<span class="subst">$&#123;params&#125;</span>`</span>);</span><br><span class="line">                xhr.send();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                xhr.open(<span class="string">&#x27;post&#x27;</span>, options.url);</span><br><span class="line">                <span class="comment">// 请求头</span></span><br><span class="line">                xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">                xhr.send(params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ajax(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">bookname</span>: <span class="string">&#x27;烧烤&#x27;</span>,</span><br><span class="line">                <span class="attr">author</span>: <span class="string">&#x27;dan&#x27;</span>,</span><br><span class="line">                <span class="attr">publisher</span>: <span class="string">&#x27;丹尼&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res, <span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”primary” outline]XHR2.0[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1创建ajax对象  原生js实现get请求</span></span><br><span class="line">           <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 监听事件</span></span><br><span class="line">           <span class="comment">// xhr.onreadystatechange = function () &#123;</span></span><br><span class="line">           <span class="comment">//     // 拿到服务端响应的数据</span></span><br><span class="line">           <span class="comment">//     console.log(xhr.responseText);</span></span><br><span class="line">           <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 2.告诉ajax请求地址和请求方式</span></span><br><span class="line">           xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);</span><br><span class="line">           <span class="comment">// 注意放在open，send之间</span></span><br><span class="line">           xhr.onloadstart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;之前&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 3.发送请求</span></span><br><span class="line">           xhr.send();</span><br><span class="line">           <span class="comment">// 设置请求响应时间  单位毫秒</span></span><br><span class="line">           xhr.timeout = <span class="number">1000</span>;</span><br><span class="line">           <span class="comment">// 请求超时触发该函数</span></span><br><span class="line">           xhr.ontimeout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               alert(<span class="string">&#x27;刷新试试&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(event);</span><br><span class="line">               <span class="built_in">console</span>.log(event.total,<span class="string">&#x27;总数据量&#x27;</span>); <span class="comment">/* 总数据量 */</span></span><br><span class="line">               <span class="built_in">console</span>.log(event.loaded,<span class="string">&#x27;已下载量&#x27;</span>); <span class="comment">/* 以完成的数据量 */</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           xhr.onloadend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;之后&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 断网情况，请求失败</span></span><br><span class="line">           xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;是否网络连接ok&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// /* 4等于完全响应成功 */</span></span><br><span class="line">           xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>
<hr>
<p>[tag type=”primary” outline]FormData[/tag]</p>
<ul>
<li><p>作用：</p>
</li>
<li><p>模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式。</p>
</li>
<li><p>异步上传二进制文件</p>
</li>
</ul>
<hr>
<p>[tag type=”info” outline]FormData 对象的实例方法[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 获取表单对象中属性的值</span><br><span class="line"></span><br><span class="line">    formData.get(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 设置表单对象中属性的值</span><br><span class="line"></span><br><span class="line">   formData.set(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 删除表单对象中属性的值</span><br><span class="line"></span><br><span class="line">   formData.delete(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 向表单对象中追加属性值</span><br><span class="line"></span><br><span class="line">   formData.append(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>   <strong>注意：set 方法与 append 方法的区别是，在属性名已存在的情况下，set 会覆盖已有键名的值，append会保留两个值。</strong></p>
<hr>
<p>[tag type=”warn” outline]formData练习[/tag]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form id=<span class="string">&quot;form&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> /&gt;</span></span></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;form&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 创建表单对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 设置或修改表单中的属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            formData.set(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;你的名字&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 新增 **注意：set 方法与 append 方法的区别是，在属性名已存在的情况下，</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// set 会覆盖已有键名的值，append会保留两个值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            formData.set(<span class="string">&#x27;uAge&#x27;</span>, <span class="string">&#x27;21&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            formData.append(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;我是新来的&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 设置请求方式和接口地址</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://121.5.153.184:3000/formData&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 监听事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 发送请求</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            xhr.send(formData);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>[tag type=”info” outline]Mock[/tag]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//模板来自官网 http://mockjs.com/ 前往下载</span></span><br><span class="line"> &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/Mock.js/1.0.1-beta3/mock.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 相当于模拟服务器的接口</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 参数1：接口名，参数2：返回的数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> data = Mock.mock(<span class="string">&#x27;getbooks&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// | 代表返回1-100的随机数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="string">&#x27;list|1-10&#x27;</span>: [&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// id|+1 ---&gt;  id每次加一</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;bookName&#x27;</span>: <span class="string">&#x27;西德斯&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 字符串范围的长度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $.ajax(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">url</span>: <span class="string">&#x27;getbooks&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(res));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> data = Mock.mock(<span class="string">&#x27;getbooks&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// | 代表返回1-100的随机数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="string">&#x27;list|1-10&#x27;</span>: [&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// id|+1 ---&gt;  id每次加一</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;bookName&#x27;</span>: <span class="string">&#x27;西德斯&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 字符串范围的长度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;str|1-10&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// /* 0: &#123;id: 1, bookName: &quot;西德斯&quot;, str: &quot;******&quot;&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//  1: &#123;id: 2, bookName: &quot;西德斯&quot;, str: &quot;****&quot;&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//  2: &#123;id: 3, bookName: &quot;西德斯&quot;, str: &quot;*********&quot;&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//  3: &#123;id: 4, bookName: &quot;西德斯&quot;, str: &quot;*********&quot;&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//  4: &#123;id: 5, bookName: &quot;西德斯&quot;, str: &quot;******&quot;&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//   */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $.ajax(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">url</span>: <span class="string">&#x27;getbooks&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(res));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> data = Mock.mock(<span class="string">&#x27;getbooks&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// | 代表返回1-100的随机数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="string">&#x27;list|1-10&#x27;</span>: [&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;data|1-3&#x27;</span>: Mock.Random.date(),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;datas&#x27;</span>:Mock.mock(<span class="string">&#x27;@date(&quot;yyyy-MM-dd&quot;)&#x27;</span>),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;times&#x27;</span>:Mock.Random.time(<span class="string">&#x27;HH:mm:ss&#x27;</span>),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;color|1-5&#x27;</span>:Mock.mock(<span class="string">&#x27;@color&#x27;</span>),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;title&#x27;</span>:Mock.mock(<span class="string">&#x27;@cparagraph&#x27;</span>),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;name|1-10&#x27;</span>:Mock.mock(<span class="string">&#x27;@cname&#x27;</span>),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $.ajax(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">url</span>: <span class="string">&#x27;getbooks&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(res));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”primary” outline]fetch用法[/tag]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面模板来自官网 http://www.axios-js.com/zh-cn/docs/ </span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">         fetch(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> res.json();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">/*  0: &#123;id: 1, bookname: &quot;西游记&quot;, author: &quot;吴承恩&quot;, publisher: &quot;北京图书出版社&quot;&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">        1: &#123;id: 2, bookname: &quot;红楼梦&quot;, author: &quot;曹雪芹&quot;, publisher: &quot;上海图书出版社&quot;&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">        2: &#123;id: 3, bookname: &quot;三国演义&quot;, author: &quot;罗贯中&quot;, publisher: &quot;北京图书出*/</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// add</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        fetch(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">body</span>:<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">bookname</span>: <span class="string">&quot;西12&quot;</span>, <span class="attr">author</span>: <span class="string">&quot;吴12恩&quot;</span>, <span class="attr">publisher</span>: <span class="string">&quot;北京图书21出版社&quot;</span>&#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 被注释的是一类请求格式</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// body:&#x27;bookname=&quot;西游记&quot;&amp;author=&quot;吴承恩&quot;&amp;publisher=&quot;北京图书出版社&quot;&#x27;,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">headers</span>:<span class="keyword">new</span> Headers(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// &#x27;content-Type&#x27;:&#x27;application/x-www-form-urlencoded&#x27;,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="string">&#x27;content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> res.json();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”success” outline=”1”]axios[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入连接</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// get 1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        axios.get(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(res,<span class="string">&#x27;get1&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(res.data.data[<span class="number">1</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 捕获异常</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// get  2</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        axios(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(res,<span class="string">&#x27;get2&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//get3 </span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          axios(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// url: `http://localhost:3000/cities?id=$&#123;pid&#125;`,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/cities&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">params</span>: &#123; <span class="attr">id</span>: pid &#125;  <span class="comment">/* get，传递参数，需用 params */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(res.data, <span class="string">&#x27;市&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(res);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// post  1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        axios.post(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">bookname</span>: <span class="string">&#x27;122&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">author</span>: <span class="string">&#x27;阿道夫&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">publisher</span>: <span class="string">&#x27;艾菲奖&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(res ,<span class="string">&#x27;post1&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(res.data.data[<span class="number">1</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 捕获异常</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// post  2</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        axios(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">bookname</span>: <span class="string">&#x27;阿凡达&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">author</span>: <span class="string">&#x27;阿道夫&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">publisher</span>: <span class="string">&#x27;艾菲奖&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(res,<span class="string">&#x27;post2&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”primary” outline]模板引擎[/tag]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">模板官网地址：https:<span class="comment">//aui.github.io/art-template/zh-cn/index.html</span></span><br><span class="line">CDN： &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/art-template/4.13.2/lib/template-web.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;!--<span class="number">1</span> 模板引擎 --&gt;</span><br><span class="line">    &lt;!-- html的写入，模板的唯一标识 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">2</span>准备art-template模板 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">username</span>&#125;&#125;</span><span class="xml">-</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 3告诉渲染引擎那个数据和那个模板进行拼接 template(),</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 参数1 id，参数2 对象类型  返回值 拼接好的自己字符串</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> ht = template(<span class="string">&#x27;tpl&#x27;</span>, &#123; <span class="attr">username</span>: <span class="string">&#x27;发送请求&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(ht);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 4渲染页面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        con.innerHTML = ht;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;!--<span class="number">1</span> 模板引擎 --&gt;</span><br><span class="line">    &lt;!-- html的写入，模板的唯一标识 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">2</span>准备art-template模板 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        </span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> list&#125;&#125;</span><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- index---下标    value -- 值--&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$index</span>&#125;&#125;</span><span class="xml">----</span><span class="template-variable">&#123;&#123;<span class="name">$value</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 3告诉渲染引擎那个数据和那个模板进行拼接 template(),</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 参数1 id，参数2 对象类型  返回值 拼接好的自己字符串</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> data = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">list</span>: [<span class="string">&#x27;萨迦&#x27;</span>, <span class="string">&#x27;迪斯&#x27;</span>,<span class="number">1</span>,<span class="number">213</span>,<span class="string">&#x27;free&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> ht = template(<span class="string">&#x27;tpl&#x27;</span>, data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(ht);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 4渲染页面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        con.innerHTML = ht;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag type=”info”]git常用命令[/tag]</p>
<ul>
<li>初始化</li>
<li>git init    初始化配置，此时会出现一个隐藏的文件（.git）</li>
<li>git config –global user.name “xxx”    配置用户名</li>
<li>git config –global user.email “<a href="mailto:&#x78;&#120;&#x78;&#x40;&#x58;&#x58;&#88;&#46;&#x63;&#111;&#109;">&#x78;&#120;&#x78;&#x40;&#x58;&#x58;&#88;&#46;&#x63;&#111;&#109;</a>“   配置邮箱<br>[tag type=”info” outline]查看状态[/tag]</li>
<li>git status    查看当前版本状态（是否修改）</li>
<li>git add .    增加当前的更改过的文件   提交到暂存区</li>
<li>git commit -m  “提交仓库”  并加以注释</li>
<li>git commit –amend -m “XXX”   合并提交，</li>
<li>pwd 查看此时在那个文件夹中<br>[tag type=”primary” outline]查看记录[/tag]</li>
<li>git log -n 查看最近n次的提价</li>
<li>git log –oneloine   单行查看简陋版日志</li>
<li>git –reflog –oneline   简陋日志</li>
<li>git relong  查看当前版本之后的日志，包括版本回退的记录</li>
<li>git log   查看当前的日志，不包括版本回退的记录</li>
<li>git reset –hard  版本号     回退当前的版本号，</li>
<li>新增文件  each  测试&gt;demo.txt    此时文件会多出此文件，内容为测试</li>
<li>cat demo.txt   查看demo.txt的内容</li>
<li>vi demo.txt   进入vi编辑器<br>[tag type=”info” outline]上传本地文件至GitHub[/tag]</li>
<li> 1 首先右键你的项目，如果安装git成功，右键会出现两个新的选项，Git Gui Here ，Git Bash Here ，选择后者</li>
<li> 2 把github上面的仓库克隆到本地，  git clone 仓库地址</li>
<li> 3 此时会多出一个文件夹，把需要上传的文件复制到此文件夹</li>
<li> 4 输入 cd  此文件夹的名字 ，进入此文件夹</li>
<li> 5 输入命令 git add .   注意点号，不能省略，此操作是把修改的内容添加进来</li>
<li> 6 输入 git commit -m  “提交信息”   （项目的说明）</li>
<li> 7 若出现 **Please tell me who you are ,说明没有配置用户，配置用户命令即可，再次执行第6步</li>
<li> 8 最后 git push -u origin master  (把本地仓库上传至github，需要输入密码)；<br>[tag type=”primary” outline]配置SSH[/tag]</li>
<li> 1  ssh-keygen -t rsa -C “your email”</li>
<li> 1.01 在Enter file in which to save the key (中时配置好的文件地址);</li>
<li> 1.02 后缀为.pub 是生成后的密钥；</li>
<li> 1.03打开github 点击头像选择Settings， 点击 SSH and GPG keys，在key中输入生成的密钥，</li>
<li> 1.1  输入  $ ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#109;</a>  注意不是你的邮箱    在输入 yes </li>
<li> 1.2 若出现 Hi freeXXXXX! You’ve successfully authenticated, but GitHub does not provide shell access.</li>
<li> 1.3 证明成功</li>
<li> 1.4 若出现 Hi “用户名” You’ve successfully ‘github.com does not provide shell access.</li>
<li> 1.5 需要使用https访问</li>
<li>2 在管理git项目中，有两种克隆的方式</li>
<li>2.1 直接使用https url 克隆；  使用SSH url 克隆</li>
<li>2.2  前者需要每次输入密码，后者只需要一次<br>[tag type=”success” outline=”1”]删除github中的文件，而不是库[/tag]</li>
<li>1.进入本地仓库的master文件夹下，右键命令 Git Bash Here ，</li>
<li>2.git pull origin master  将远程仓库的项目拉取下来</li>
<li>3.dir  查看文件夹</li>
<li>4.git rm -r –cached 删除的文件名</li>
<li>5.git commit -m “添加删除的说明”</li>
<li>6.git push </li>
<li>删除时远程仓库的内容，跟本地没有任何关系</li>
<li><strong>注意每次增加文件或删除文件，都要先commit。然后再git push，就可以同步github</strong><br>[tag type=”danger” outline]远程仓库[/tag]</li>
<li>查看远程仓库别名, git remote</li>
<li>移出仓库别名 ， git remote remove  仓库别名</li>
<li>将远程仓库关联到本地  git remote add origin 地址<br>[tag type=”info” outline]分支[/tag]</li>
<li>分支就是当前项目的一个副本，（可以这样理解，但事实并不是如此）</li>
<li>初始化之后，git默认创建了一个master（主）分支，不允许在master开发，在其下的分支开发，对外开发（发布时合并），</li>
<li>git branch  查看本地所有分支</li>
<li>删除本地分支b,(合并过的分支)    git branch -d b </li>
<li>若出现提示内容，证明修改过没有合并</li>
<li>git branch -D d ，   强制删除，即使有修改，不会提醒，强制删除分支</li>
<li>删除远程分支a，     git push origin –delete a     </li>
<li>git branch  dev  创建新分支dev  * 表示当前所在的分支</li>
<li>切换分支  git checkout 分支名</li>
<li>创建同时切换分支（基于master),git checkout -b ‘分支名’</li>
<li>将dev的所有代码合并到master分支     git merge dev   前提是切回master分支</li>
<li>冲突现象：多人修改同一份代码，共同商议保留合并  冲突（CONFLICT:冲突文件）</li>
<li>git branch -av   查看本地和远程所有分支</li>
<li>分支合并1 ，快进合并：(fast )</li>
<li>两个分支a，b。基于a创建b分支，a分支不做任何更改，在b分支新增内容，将b合并到a分支。</li>
<li>分支合并2，三方合并：</li>
<li><img src="https://freelaeder.cn/usr/themes/Mirages/images/default/img/hebing.png" alt="三方合并"><br>[tag type=”primary” outline]深入[/tag]</li>
<li>快速查找SSH，</li>
<li>vim ~/.ssh/   查看文件目录</li>
<li>vim ~/.ssh/id_rsa.pub   查看内容</li>
<li>配置别名</li>
<li>vim ~/.gitconfig，进入命令</li>
<li>添加[alias] cm = commit; 替换别名</li>
<li>忽略上传文件</li>
<li>在文件根目录加入配置文件[.gitignore]  内容—&gt;node_modules</li>
<li>git可视化</li>
<li>git gui 进入命令</li>
</ul>
]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/archives/c0add594.html</url>
    <content><![CDATA[<p>[tag]vue是什么[/tag]</p>
<ul>
<li>官网介绍|地址：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></li>
<li><strong>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。</strong></li>
<li>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。</li>
<li>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</li>
<li>另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</li>
<li>视频来自官网。<br>!!!<br><video src="//freelaeder.cn//usr/themes/Mirages/images/default/video/vue.mp4" controls="controls" poster="//freelaeder.cn//usr/themes/Mirages/images/default/img/vs1.png"    playsinline></video><br>!!!</li>
</ul>
<span id="more"></span>


<p>[hint]vue全家桶[/hint]<br>[tag outline]1渐进式框架[/tag]</p>
<ul>
<li>vue是一套构建用户界面的渐进式框架，采用自底向上增量开发的设计。</li>
<li>vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整。</li>
<li>渐进式表现：声明式渲染—组件系统—客户端路由—大数据状态管理—构建工具.</li>
</ul>
<p>[tag type=”primary” outline]2、两个核心点[/tag]</p>
<ul>
<li>（1）响应式数据绑定当数据发生变化的时候，视图自动更新，即双向数据同步，</li>
<li>原理利用了ES6中的 Object.definedProperty 中的setter/getter 代理数据，监控对数据的操作。</li>
<li>（2）组合的视图组件即页面最终映射为一个组件树，采用树形数据结构进行设计，方便维护，重用。</li>
</ul>
<p>[tag type=”info” outline]3、虚拟DOM[/tag]</p>
<ul>
<li>利用在内存中生成与真实DOM与之对应的数据结构，这个在内存中生成的结构称之为虚拟DOM。</li>
<li>当数据发生变化时，能够智能的计算出重新渲染组件的最小代价并应用到DOM操作上。</li>
</ul>
<p>[tag type=”warn” outline]4、MVVM[/tag]</p>
<ul>
<li>MVVM 是 Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式;</li>
<li>其核心是提供对 View 和 ViewModel 的双向数据绑定，</li>
<li>这使得 ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。</li>
<li>M：Model（数据层，也就是指数据（前端是js））</li>
<li>V：View ( 也就是指DOM层 或用户界面 )</li>
<li>VM : ViewModel (处理数据和界面的中间层，也就是指Vue)<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/mvv.png" alt="请输入图片描述"></li>
</ul>
<p>[tag type=”danger” outline]5、声明式渲染[/tag]</p>
<ul>
<li><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。</p>
</li>
<li><p>额外补充：</p>
</li>
<li><p>渲染分为：命令式渲染和声明式渲染</p>
</li>
<li><p>命令式渲染：命令我们的程序去做什么，程序就会跟着你的命令去一步一步执行</p>
</li>
<li><p>声明式渲染 ：只需要告诉程序想要什么效果，其他的交给程序来做</p>
</li>
<li><p>具体区别看如下代码，执行结果一样，实现方式不同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命令式渲染：关心每步，关心流程，用命令去实现</span></span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">        newArr.push(arr[i] * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明式渲染：不关心中间流程，只需要关心结果和实现条件</span></span><br><span class="line">    <span class="keyword">var</span> arr1 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item*<span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>vue全家桶转自梁兴文</strong>原文地址：<a href="http://doc.liangxinghua.com/vue-family/1.html">http://doc.liangxinghua.com/vue-family/1.html</a></p>
</li>
</ul>
<p>[tag type=”success” outline=”1”]vue.js安装[/tag]</p>
<ul>
<li>1，CDN引入</li>
<li>开发环境版本，包含了有帮助的命令行警告。</li>
<li><script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script></li>
<li>生产环境版本，优化了尺寸和速度</li>
<li><script src="https://cdn.jsdelivr.net/npm/vue"></script></li>
<li>2下载和引入</li>
<li>开发环境<br>[file href=”//freelaeder.cn//usr/themes/Mirages/images/default/data/vue.js”]开发环境下载[/file]</li>
<li>生产环境<br>[file href=”//freelaeder.cn//usr/themes/Mirages/images/default/data/vue.min.js”]生产环境下载[/file]</li>
<li>3 NPM安装</li>
<li><h1 id="最新稳定版-npm-install-vue"><a href="#最新稳定版-npm-install-vue" class="headerlink" title="最新稳定版  $ npm install vue"></a>最新稳定版  $ npm install vue</h1></li>
<li><strong>vue生命周期源码</strong></li>
<li>debug开发版本|release 发布版本<br>[file href=”//freelaeder.cn//usr/themes/Mirages/images/default/data/vue-2.6.12.zip”]vue生命周期源码[/file]</li>
</ul>
<hr>
<p>[tag type=”primary”]hello vue[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      &#123;&#123;message&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;!-- 显示内容：你好，vue --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;uls&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in movies&quot;</span>&gt;</span> &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 显示内容  &#123;&#123;message&#125;&#125;，原因：没有挂载元素--&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  &lt;!-- 引入文件 --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 元素js做法，编程范式：命令时编程</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// const (常量，没有作用域)；let(变量)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//vue 编程范式:声明式编程</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">/* 用于挂载要管理的元素 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">data</span>: &#123; <span class="comment">/* 定义数据 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">message</span>: <span class="string">&#x27;你好，vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> ul = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">el</span>: <span class="string">&#x27;.uls&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">data</span> :&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">movies</span>:[<span class="string">&#x27;你的婚礼&#x27;</span>,<span class="string">&#x27;大话西游&#x27;</span>,<span class="string">&#x27;盗梦空间&#x27;</span>,<span class="string">&#x27;怦然心动&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v1.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v3.png" alt="请输入图片描述"></p>
<hr>
<p>[tag type=”info”]计数器[/tag]</p>
<ul>
<li>v-on 指令，（监听事件）</li>
<li>methods，（定义方法）<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/vues5.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/vues6.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/vues4.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/on2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/on3.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/on4.png" alt="请输入图片描述"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前数量:&#123;&#123;conun&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;conun++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;conun--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;&lt;br&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;!-- 语法糖@click-&gt;v-on:click --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">conun</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">add</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// this 表示当前对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.conun++;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;add执行&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">sub</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.conun--;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(<span class="string">&#x27;sub执行&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
[collapse title=”on参数问题”]<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    li &#123;</span><br><span class="line">      list-style: none;</span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 40px;</span><br><span class="line">      line-height: 40px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      background: aqua;</span><br><span class="line">      margin-bottom: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .active &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .font &#123;</span><br><span class="line">      font-size: 33px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [v-cloak] &#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;&#123;&#123;count&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button v-on:click=&#x27;increment&#x27;&gt;add&lt;/button&gt;</span><br><span class="line">    &lt;button v-on:click=&#x27;decrement&#x27;&gt;decr&lt;/button&gt;</span><br><span class="line">    &lt;!-- 语法糖 @ --&gt;</span><br><span class="line">    &lt;button @click=&#x27;increment&#x27;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&#x27;decrement&#x27;&gt;-&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- v-on参数 --&gt;</span><br><span class="line">    &lt;!-- 事件调用没有参数 --&gt;</span><br><span class="line">    &lt;button @click=&#x27;btn1Click&#x27;&gt;按钮1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&#x27;btn1Click()&#x27;&gt;按钮2&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 在事件定义时，省略小括号，但方法本身需要一个参数 --&gt;</span><br><span class="line">    &lt;!-- &lt;button @click=&#x27;btn2Click(event)&#x27;&gt;按钮3&lt;/button&gt; --&gt;</span><br><span class="line">    &lt;button @click=&#x27;btn2Click&#x27;&gt;按钮3&lt;/button&gt;</span><br><span class="line">    &lt;!--btn2 MouseEvent &#123;isTrusted: true, screenX: 283, screenY: 188, clientX: 274, clientY: 52, …&#125;  --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&#x27;btn2Click(123)&#x27;&gt;按钮3.1&lt;/button&gt;</span><br><span class="line">    &lt;!-- btn2 123 --&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;button @click=&#x27;btn2Click()&#x27;&gt;按钮3.2&lt;/button&gt;</span><br><span class="line">    &lt;!-- btn2 undefined --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 我们需要参数，又需要event --&gt;</span><br><span class="line">    &lt;!-- 在调用参数时，如何手动获取浏览器参数中的event对象  ： $event --&gt;</span><br><span class="line">    &lt;button @click=&#x27;btn3Click(123,event)&#x27;&gt;按钮4.1&lt;/button&gt;</span><br><span class="line">    &lt;!--  报错&quot;event&quot; is not defined on the instance but   123  ,  undefined===event--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&#x27;btn3Click(123,$event)&#x27;&gt;按钮4.2&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt; &lt;!-- 引入文件 --&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">      el: &#x27;#app&#x27;, /* 用于挂载要管理的元素 */</span><br><span class="line">      data: &#123; /* 定义数据 */</span><br><span class="line">        message: &#x27;你好，vue&#x27;,</span><br><span class="line">        count: 0,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        // es6 增强写法</span><br><span class="line"></span><br><span class="line">        increment() &#123;</span><br><span class="line">          this.count++;</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement() &#123;</span><br><span class="line">          this.count--;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        btn1Click() &#123;</span><br><span class="line">          console.log(&#x27;btn1&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        // abc等于event对象</span><br><span class="line">        //  vue-devtools  Detected Vue v2.6.12 </span><br><span class="line">        // 3v-on基本使用.html:80 btn2 MouseEvent &#123;isTrusted: true, screenX: 280, screenY: 181, clientX: 271, clientY: 46, …&#125;</span><br><span class="line">        btn2Click(abc) &#123;</span><br><span class="line">          console.log(&#x27;btn2&#x27;, abc);</span><br><span class="line">        &#125;,</span><br><span class="line">        btn3Click(abc,event)&#123;</span><br><span class="line">          console.log(abc);</span><br><span class="line">          console.log(event);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      // 计算属性（）,</span><br><span class="line">      computed: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
[/collapse] </li>
</ul>
<p>[tag type=”warn”]深入mvvm[/tag]</p>
<ul>
<li>废话不说，直接上图@(胜利)</li>
<li>官网图片：</li>
<li><strong>三个阶段转自梁文兴，</strong>原文地址：<a href="http://doc.liangxinghua.com/vue-family/1.3.html">http://doc.liangxinghua.com/vue-family/1.3.html</a></li>
<li>阶段一：创建和挂载</li>
<li>beforecreated：el 和 data 并未初始化</li>
<li>created：完成了 data 数据的初始化，el没有</li>
<li>beforeMount：完成了 el 和 data 初始化</li>
<li>mounted ：完成挂载</li>
<li>阶段二：更新</li>
<li>在chrome console执行以下命令：</li>
<li>app.message= ‘yes !! I do’;</li>
<li>beforeUpdate：虚拟DOM中根据data变化去更新html</li>
<li>updated：将虚拟DOM更新完成的HTML更新到页面中</li>
<li>阶段三：销毁</li>
<li>在chrome console执行以下命令：</li>
<li>app.$destroy();</li>
<li>beforeDestroy：销毁之前调用</li>
<li>destroyed：销毁之后调用，之后再执行app.me</li>
</ul>
<hr>
<ul>
<li><table>
<thead>
<tr>
<th><strong>阶段</strong></th>
<th><strong>方法名</strong></th>
<th><strong>方法名</strong></th>
</tr>
</thead>
<tbody><tr>
<td>初始化</td>
<td>beforeCreate</td>
<td>created</td>
</tr>
<tr>
<td>挂载</td>
<td>beforeMount</td>
<td>mounted</td>
</tr>
<tr>
<td>更新</td>
<td>beforeUpdate</td>
<td>updated</td>
</tr>
<tr>
<td>销毁</td>
<td>beforeDestroy</td>
<td>destroyed</td>
</tr>
</tbody></table>
</li>
</ul>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/lifes.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/vs2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/l5.png" alt="请输入图片描述"></p>
<hr>
<p>[tag type=”info”]axios基本使用[/tag]<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;请求方式&#x27;</span>, <span class="comment">// get post</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;请求地址&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;    <span class="comment">// 拼接到请求体的参数,  post请求的参数</span></span><br><span class="line">    <span class="attr">xxx</span>: xxx,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">params</span>: &#123;  <span class="comment">// 拼接到请求行的参数, get请求的参数</span></span><br><span class="line">   	<span class="attr">xxx</span>: xxx </span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data) <span class="comment">// 后台返回的结果</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">// 后台报错返回</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<ul>
<li>_axios基本使用-全局配置 (main.js)</li>
<li>下载axios yarn add axios || npm install axios</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 基本地址</span></span><br><span class="line">axios.defaults.baseURL =<span class="string">&#x27;https://www.escook.cn&#x27;</span></span><br><span class="line">Vue.prototype.$axios =axios</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">   <span class="built_in">this</span>.$axios(&#123;</span><br><span class="line">     <span class="attr">url</span>:<span class="string">&#x27;/api/cart&#x27;</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res);</span><br><span class="line">     <span class="built_in">this</span>.list = res.data.list</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">this</span>.list);</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<p>[tag type=”danger”]v-once指令[/tag]</p>
<ul>
<li>mustanche 语法双大扩号</li>
<li>v-once 数据不会更改</li>
<li>只显示DOM第一次渲染的值·不会更改</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;，没猜到吧！ <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;!-- 数据不会更改，v-once --&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>v-html .会将string的html解析出来并进行渲染</li>
<li>用于输出html代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h2 v-html=<span class="string">&quot;url&quot;</span>&gt;&lt;/h2&gt;</span><br><span class="line">  data: &#123; <span class="comment">/* 定义数据 */</span></span><br><span class="line">               <span class="attr">message</span>: <span class="string">&#x27;你好，vue&#x27;</span>,</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span>,</span><br><span class="line">           &#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>v-text  不会输出h3中的文字</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span>只有我一个<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- ：只有我一个被覆盖,不会现实 --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>v-pre  内容不会做任何解析</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>v-bind指令  语法糖  ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 语法错误 mustache 内容书写--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;img src=&quot;&#123;&#123;imgurl&#125;&#125;&quot; alt=&quot;&quot;&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- v-bind动态绑定属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 语法糖写法 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./js/vue.js&quot;</span>&gt;&lt;/script&gt; &lt;!-- 引入文件 --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//v-bind指令· 语法糖 ：</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">/* 用于挂载要管理的元素 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">aHref</span>: <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">imgUrl</span>: <span class="string">&#x27;https://img30.360buyimg.com/babel/s1180x940_jfs/t1/185487/25/2729/188978/609512cdE026eaa3e/873ee4de4f1e2a0c.jpg.webp&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            </span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         </span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>v-cloak 搭配css使用</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- VUE解析之前，div有一个属性v-cloak --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue解析之后 ,div没有一个属性v-cloak--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 斗篷 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>[tag type=”success”]动态赋值class[/tag]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">       <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">       &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">       <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">       &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">       <span class="selector-class">.line</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">           <span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">           <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">           <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">       &#125;</span></span><br><span class="line"><span class="css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- v-bind动态绑定class flase不显示。 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;h2 :class=&quot;&#123;类名1：ture,类名2：false&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active : isactive,line : isline&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;getClass()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;btnClick&#x27;</span>&gt;</span></span><br><span class="line">           click</span><br><span class="line">       <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                 <span class="comment">&lt;!--没有单引号，是变量，  --&gt;</span></span><br><span class="line">                                 <span class="comment">&lt;!--有单引号，是字符串，  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[active,line]&quot;</span>&gt;</span>数字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./js/vue.js&quot;</span>&gt;&lt;/script&gt; &lt;!-- 引入文件 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//v-bind指令· 语法糖 ：</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">/* 用于挂载要管理的元素 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">aHref</span>: <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">imgUrl</span>: <span class="string">&#x27;https://img30.360buyimg.com/babel/s1180x940_jfs/t1/185487/25/2729/188978/609512cdE026eaa3e/873ee4de4f1e2a0c.jpg.webp&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">message</span>: <span class="string">&#x27;你好哦&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">isactive</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">isline</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">active</span>:<span class="string">&#x27;aaaa&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">line</span>:<span class="string">&#x27;bbbb&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">btnClick</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="comment">// alert(&#x27;click被点击&#x27;)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">this</span>.isactive = !<span class="built_in">this</span>.isactive;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">this</span>.isline = !<span class="built_in">this</span>.isline;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">getClass</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">active</span>: <span class="built_in">this</span>.isactive, <span class="attr">line</span>: <span class="built_in">this</span>.isline</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<p>[tag]动态添加style[/tag]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">       <span class="comment">&lt;!-- &lt;h2 :style=&quot;&#123;fontSize\\font-size: finalSize+&#x27;px&#x27;,background:finaColor,&#125;&quot;&gt;&#123;&#123;messages&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;getActive()&quot;</span>&gt;</span>&#123;&#123;messages&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyle,baseStyles,baseStyles1]&quot;</span>&gt;</span>&#123;&#123;messages&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt; &lt;!-- 引入文件 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">movies</span>: [<span class="string">&#x27;你的婚礼&#x27;</span>, <span class="string">&#x27;钟离&#x27;</span>, <span class="string">&#x27;尤拉&#x27;</span>, <span class="string">&#x27;蜘蛛侠&#x27;</span>, <span class="string">&#x27;绿巨人&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">messages</span>: <span class="string">&#x27;东方蜜蜂&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">finalSize</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">finaColor</span>: <span class="string">&#x27;aqua&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 默认下标为0</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">indexs</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">baseStyle</span>:&#123;<span class="attr">background</span>:<span class="string">&#x27;red&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">baseStyles</span>:&#123;<span class="attr">fontSize</span>:<span class="string">&#x27;33px&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">baseStyles1</span>:&#123;<span class="attr">color</span>:<span class="string">&#x27;#fff&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">clicks</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">this</span>.indexs = index;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(index);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">getActive</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">fontSize</span>: <span class="built_in">this</span>.finalSize + <span class="string">&#x27;px&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">background</span>: <span class="built_in">this</span>.finaColor,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>[tag type=”primary”]列表点击高亮[/tag]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid gold;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: aqua;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">             <span class="attr">v-cloak</span> <span class="attr">v-for</span>=<span class="string">&quot;(m,index) in movies&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">&#x27;indexs == index ?&quot;active&quot;:&quot;&quot;&#x27;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">v-on:click</span>=<span class="string">&#x27;clicks(index)&#x27;</span>&gt;</span></span><br><span class="line">                &#123;&#123;m&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt; &lt;!-- 引入文件 --&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="attr">movies</span>: [<span class="string">&#x27;你的婚礼&#x27;</span>, <span class="string">&#x27;钟离&#x27;</span>, <span class="string">&#x27;尤拉&#x27;</span>, <span class="string">&#x27;蜘蛛侠&#x27;</span>, <span class="string">&#x27;绿巨人&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="attr">finalSize</span>: <span class="number">10</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="attr">finaColor</span>: <span class="string">&#x27;aqua&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="comment">// 默认下标为0</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="attr">indexs</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             </span></span></span><br><span class="line"><span class="javascript"><span class="xml">           &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="attr">clicks</span>: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   <span class="built_in">this</span>.indexs = index;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                   <span class="built_in">console</span>.log(index);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             </span></span></span><br><span class="line"><span class="javascript"><span class="xml">           &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>[tag type=”info”]计算属性[/tag]</p>
<ol>
<li><p>set和get方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;!-- 计算属性调用时不需要加（） --&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">       &lt;!-- 不需要加（） --&gt;</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">h5</span> <span class="attr">v-cloak</span>&gt;</span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">           <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">/* 用于挂载要管理的元素 */</span></span><br><span class="line">           <span class="attr">data</span>: &#123; <span class="comment">/* 定义数据 */</span></span><br><span class="line">               <span class="attr">message</span>: <span class="string">&#x27;你好，vue&#x27;</span>,</span><br><span class="line">               <span class="attr">firstName</span>: <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">               <span class="attr">lastName</span>: <span class="string">&#x27;bryant&#x27;</span>,</span><br><span class="line">             </span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">methods</span>: &#123;</span><br><span class="line">               <span class="function"><span class="title">getFullName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot;  &quot;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="comment">// 计算属性（）,</span></span><br><span class="line">           <span class="attr">computed</span>: &#123;</span><br><span class="line">               <span class="comment">// 最终版本</span></span><br><span class="line">               <span class="comment">// fullName: function () &#123;</span></span><br><span class="line">               <span class="comment">//     return this.firstName + &quot;  &quot; + this.lastName;</span></span><br><span class="line">               <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">               <span class="attr">fullName</span>: &#123;</span><br><span class="line">                   <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">                       <span class="built_in">console</span>.log(<span class="string">&#x27;---set&#x27;</span>, newValue);</span><br><span class="line">                       <span class="keyword">const</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                       <span class="built_in">console</span>.log(names);</span><br><span class="line">                       <span class="built_in">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">                       <span class="built_in">this</span>.lastName = names[<span class="number">1</span>];</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot;  &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="attr">totalPrice</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                   <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++) &#123;</span><br><span class="line">                       result += <span class="built_in">this</span>.books[i].price</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">return</span> result</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>methods方法特点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- methods --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- methods 执行一次，调用一次函数。 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;h2 :class=&#x27;&#123;active:true,font:true&#125;&#x27;&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">      &lt;h2 :class=&#x27;&#123;active:true,font:true&#125;&#x27;&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">      &lt;h2 :class=&#x27;&#123;active:true,font:true&#125;&#x27;&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">      &lt;h2 :class=&#x27;&#123;active:true,font:true&#125;&#x27;&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">      &lt;h2 :class=&#x27;&#123;active:true,font:true&#125;&#x27;&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">      &lt;h2 :class=&#x27;&#123;active:true,font:true&#125;&#x27;&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">      &lt;h2 :class=&#x27;&#123;active:true,font:true&#125;&#x27;&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">             <span class="function"><span class="title">getFullName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                 <span class="built_in">console</span>.log(<span class="string">&#x27;方法属性被执行&#x27;</span>)</span><br><span class="line">                 <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot;  &quot;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/computed1.png" alt="请输入图片描述"></p>
</li>
</ol>
<ul>
<li><p>computed 计算属性特点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 计算属性调用时不需要加（） --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 数据若未发生变化，会储存上一次的数据，内部存在缓存 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&#x27;&#123;active:true,font:true&#125;&#x27;</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 不需要加（） --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h5</span> <span class="attr">v-cloak</span>&gt;</span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 计算属性（）,</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;计算属性被执行&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot;  &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">totalPrice</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++) &#123;</span><br><span class="line">        result += <span class="built_in">this</span>.books[i].price</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/computed2.png" alt="请输入图片描述"><br>[tag type=”warn”]vue全局安装[/tag]<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/vues1.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/vues2.png" alt="请输入图片描述"></p>
</li>
<li><p>####@vue/cli 创建项目启动服务</p>
</li>
<li><p>==注意: 项目名不能带大写字母, 中文和特殊符号==</p>
</li>
<li><p>vue和create是命令, vuecli-demo是文件夹名</p>
</li>
<li><p>1创建项目</p>
</li>
<li><p>vue create vuecli-demo</p>
</li>
<li><p>2.选择模板 ，ctrl+c 重来<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/cli1.png" alt="请输入图片描述"></p>
</li>
<li><p>3.选择用什么方式下载脚手架项目需要的依赖包<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/cli2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/cli3.png" alt="请输入图片描述"></p>
</li>
<li><p>4 进入脚手架项目下, 启动内置的热更新本地服务器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd vuecil-demo</span><br><span class="line"></span><br><span class="line">npm run serve</span><br><span class="line"># 或</span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure></li>
<li><p>5 只要看到绿色的 - 啊. 你成功了(底层node+webpack热更新服务)<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/cli4.png" alt="请输入图片描述"></p>
</li>
<li><p>6.打开浏览器输入上述地址<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/cli5.png" alt="请输入图片描述"></p>
</li>
</ul>
<hr>
<p>[tag type=”danger”]@vue/cli 目录和代码分析[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vuecil-demo        # 项目目录</span><br><span class="line">    ├── node_modules # 项目依赖的第三方包</span><br><span class="line">    ├── public       # 静态文件目录</span><br><span class="line">      ├── favicon.ico# 浏览器小图标</span><br><span class="line">      └── index.html # 单页面的html文件(网页浏览的是它)</span><br><span class="line">    ├── src          # 业务文件夹</span><br><span class="line">      ├── assets     # 静态资源</span><br><span class="line">        └── logo.png # vue的logo图片</span><br><span class="line">      ├── components # 组件目录</span><br><span class="line">        └── HelloWorld.vue # 欢迎页面vue代码文件 </span><br><span class="line">      ├── App.vue    # 整个应用的根组件</span><br><span class="line">      └── main.js    # 入口js文件</span><br><span class="line">    ├── .gitignore   # git提交忽略配置</span><br><span class="line">    ├── babel.config.js  # babel配置</span><br><span class="line">    ├── package.json  # 依赖包列表</span><br><span class="line">    ├── README.md    # 项目说明</span><br><span class="line">	└── yarn.lock    # 项目包版本锁定和缓存地址</span><br></pre></td></tr></table></figure>

<ul>
<li><p>主要文件及含义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node_modules下都是下载的第三方包</span><br><span class="line">public/index.html – 浏览器运行的网页</span><br><span class="line">src/main.js – webpack打包的入口文件</span><br><span class="line">src/App.vue – vue项目入口页面</span><br><span class="line">package.json – 依赖包列表文件</span><br></pre></td></tr></table></figure>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/vues10.png" alt="请输入图片描述"><br>[tag type=”success”]_@vue/cli 自定义配置[/tag]</p>
</li>
<li><p>目标：项目中没有webpack.config.js文件，因为@vue/cli用的vue.config.js</p>
</li>
<li><p>src并列处新建vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 覆盖webpack的配置 */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123; <span class="comment">// 自定义服务配置</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/cli7.png" alt="请输入图片描述"><br>[tag outline]_@vue/cli 单vue文件讲解[/tag]</p>
</li>
<li><p>Vue推荐采用.vue文件来开发项目</p>
</li>
<li><p>template里只能有一个根标签</p>
</li>
<li><p>vue文件-独立模块-作用域互不影响</p>
</li>
<li><p>style配合scoped属性, 保证样式只针对当前template内标签生效</p>
</li>
<li><p>vue文件配合webpack, 把他们打包起来插入到index.html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- template必须, 只能有一个根标签, 影响渲染到页面的标签结构 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>欢迎使用vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- js相关 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 当前组件的样式, 设置scoped, 可以保证样式只对当前页面有效 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><strong>最终: Vue文件配合webpack, 把他们打包起来插入到index.html, 然后在浏览器运行</strong></p>
</li>
<li><p>@vue/cli 欢迎界面清理</p>
</li>
<li><p>src/App.vue默认有很多内容, 可以全部删除留下框</p>
</li>
<li><p>assets 和 components 文件夹下的一切都删除掉 (不要默认的欢迎页面)</p>
</li>
<li><p>解决警告<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/err1.png" alt="请输入图片描述"></p>
</li>
</ul>
<p>[tag type=”primary” outline]v-if,v-else,v-show[/tag]</p>
<ul>
<li><p>v-show指令的作用是：根据真假值切换元素的显示状态,是响应式的</p>
</li>
<li><p>语法表达v-show = “ 表达式 “</p>
</li>
<li><p>原理是修改元素的的CSS属性(display)来决定实现显示还是隐藏</p>
</li>
<li><p>指令后面的内容最终都会解析为布尔值</p>
</li>
<li><p>值为真(true)的时候元素显示，值为假(false)的时候元素隐藏</p>
</li>
<li><p>v-if指令的作用：根据表达式的真假切换元素的显示状态</p>
</li>
<li><p>v-if = “表达式”.本质是通过操纵dom元素来进行切换显示</p>
</li>
<li><p>表达式的值为true的时候元素存在于dom树中，为false的时候从dom树中移除</p>
</li>
<li><h4 id="注意，v-if和v-else之间不要插入其他标签"><a href="#注意，v-if和v-else之间不要插入其他标签" class="headerlink" title="注意，v-if和v-else之间不要插入其他标签"></a>注意，v-if和v-else之间不要插入其他标签</h4><p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-if1.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-if2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v7.png" alt="请输入图片描述"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!-- v-<span class="keyword">if</span> == boolean --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 内容不会显示 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&#x27;false&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&#x27;isShow&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>阿弟1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>阿弟2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>阿弟3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>阿弟4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>阿弟5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;!-- v-<span class="keyword">else</span> 和 v-<span class="keyword">if</span> 相反 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>isShow为false时，显示我<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&#x27;score &gt;= 90&#x27;</span>&gt;</span> 优秀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&#x27;score &gt;= 80&#x27;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&#x27;score &gt;= 60&#x27;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!-- 用户切换案列 --&gt;</span><br><span class="line">    &lt;!-- 完成需求：切换清空输入内容   输入key--&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&#x27;isUser&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span> 用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;isUser = !isUser&#x27;</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- v-show --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--（切换一次） v-if当条件为false，包含v-if指令的元素，根本不会存在dom中 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&#x27;isShow&#x27;</span><span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--（频繁切换） v-show 当条件为false，v-show只是给我们的元素添加一个行内样式 ：dispaly：none --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&#x27;isShow&#x27;</span> <span class="attr">id</span>=<span class="string">&quot;bbb&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">---------------------------------------------------------------------</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 引入文件 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">/* 用于挂载要管理的元素 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">data</span>: &#123; <span class="comment">/* 定义数据 */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">message</span>: <span class="string">&#x27;你好，vue&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">isShow</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">score</span>:<span class="number">80</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">isUser</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">info</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">name</span>:<span class="string">&#x27;yanglo&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">age</span>:<span class="number">21</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">height</span>:<span class="number">188</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">hobby</span>:<span class="string">&quot;paly games&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">letters</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 计算属性（）,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">result</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">let</span> showMessage =<span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span>(<span class="built_in">this</span>.score &gt;= <span class="number">90</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            showMessage = <span class="string">&#x27;优秀&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.score &gt;= <span class="number">80</span>)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            showMessage = <span class="string">&#x27;良好&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            showMessage = <span class="string">&#x27;加油&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">return</span> showMessage;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>[tag type=”info” outline]数组遍历[/tag]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;!-- 遍历数组 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in info&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!-- 获取value值 ，key键    index 下标--&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(value,key,index) in info&#x27;</span>&gt;</span> &#123;&#123;key&#125;&#125;----- &#123;&#123;value&#125;&#125;-----&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!-- key的作用只要是为了高效更新虚拟dom  key必须保持展示元素一致--&gt;</span><br><span class="line">    &lt;!-- bc之间插入f app.letters.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;f&quot;</span>) --&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;m in letters&#x27;</span><span class="attr">:key</span>=<span class="string">&quot;m&quot;</span>&gt;</span> &#123;&#123;m&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span> --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 那些数组方法是响应式 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;m in letters&#x27;</span>&gt;</span> &#123;&#123;m&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;btns1Click&#x27;</span>&gt;</span>btnclick<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">/* 用于挂载要管理的元素 */</span></span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="comment">/* 定义数据 */</span></span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;你好，vue&#x27;</span>,</span><br><span class="line">        <span class="attr">isShow</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">score</span>:<span class="number">80</span>,</span><br><span class="line">        <span class="attr">isUser</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">info</span>:&#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;yanglo&#x27;</span>,</span><br><span class="line">          <span class="attr">age</span>:<span class="number">21</span>,</span><br><span class="line">          <span class="attr">height</span>:<span class="number">188</span>,</span><br><span class="line">          <span class="attr">hobby</span>:<span class="string">&quot;paly games&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">letters</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">       <span class="attr">methods</span>: &#123;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="title">btns1Click</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//  数组中可以做到响应式</span></span><br><span class="line">        <span class="comment">//  1.push 最后添加</span></span><br><span class="line">        <span class="comment">// this.letters.push(&#x27;aaa&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// unshift() 第一个添加</span></span><br><span class="line">        <span class="comment">// this.letters.unshift(&#x27;11&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.pop() 最后删除</span></span><br><span class="line">        <span class="comment">// this.letters.pop()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// shift()第一个删除</span></span><br><span class="line">        <span class="comment">// this.letters.shift();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// splice 删除、插入、替换</span></span><br><span class="line">        <span class="comment">// 删除元素：第二个参数表示删除几个元素(没有传，删除后面所有)</span></span><br><span class="line">        <span class="comment">// 替换元素 ，第二个参数，表示我们替换几个元素，后面是用来替换前面的元素</span></span><br><span class="line">        <span class="comment">// 插入元素：第二个参数，传入0，并且后面要跟上要插入的元素</span></span><br><span class="line">        <span class="comment">// splice(start)</span></span><br><span class="line">        <span class="comment">// this.letters.splice(3,0,&quot;qw&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// sort（）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// reverse()翻转</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// this.letters.reverse();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：通过索引值修改数组中的元素</span></span><br><span class="line">        <span class="comment">// this.letters[0] = &#x27;bbb&#x27;;</span></span><br><span class="line">        <span class="comment">// this.letters.splice(0,1,&#x27;bbb&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set(要修改的值，索引值，修改后的值)</span></span><br><span class="line">        <span class="comment">// 1 ====2</span></span><br><span class="line">        Vue.set(<span class="built_in">this</span>.letters,<span class="number">1</span>,<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/key.png" alt="请输入图片描述"><br>[tag type=”warn” outline]购物车案列[/tag]</p>
</li>
<li><p>v-if =false,隐藏有该属性的标签，true相反</p>
</li>
<li><p>v-else 与 v-if 的状态相反</p>
</li>
<li><p>.toFixed（2）保留两位小数</p>
</li>
<li><p>过滤器简介</p>
</li>
<li><p><strong>过滤器分全局过滤器和局部过滤器，下边我着重说下全局过滤器，因为全局过滤器在项目中使用频率非常高！</strong></p>
</li>
<li><p>局部过滤器：过滤器可以用在两个地方：双花括号插值 或 v-bind表达式。</p>
</li>
<li><p>举个栗子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;m.price | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/guo.png" alt="请输入图片描述"></p>
</li>
<li><p>上边代码，我的需求是想把价格前面加上人民币符号（¥），后面保留两位小数，模板中文本后边需要添加管道符号（ | ）作为分隔，管道符 | 后边是文本的处理函数，处理函数的第一个参数是：管道符前边的——文本内容，如果处理函数上边传递参数，则从第二个参数依次往后是传递的参数。</p>
</li>
<li><p>（把输入的英文首字母大写，如果连续输入，以空格隔开）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    //输入框</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeEvent&quot;</span>&gt;</span></span><br><span class="line">     //显示层，后边加一个过滤器处理函数，把英文首字母变为大写</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;viewContent | changeCapitalLetter&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">viewContent</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">content</span>:<span class="string">&quot;&quot;</span>    </span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeEvent</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.viewContent = <span class="built_in">this</span>.content;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeCapitalLetter</span>(<span class="params">value</span>)</span>&#123;<span class="comment">//value是输入框的内容，也是要显示的内容</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(value)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> str = value.toString();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取英文，以空格分组把字符串转为数组，遍历每一项，第一项转为大写字母</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> newArr = str.split(<span class="string">&quot; &quot;</span>).map(<span class="function"><span class="params">ele</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="keyword">return</span> ele.charAt(<span class="number">0</span>).toUpperCase() + ele.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> newArr.join(<span class="string">&quot; &quot;</span>)  <span class="comment">//数组转字符串 以空格输出。。。</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"> &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<ul>
<li>购物车案列——————————————</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#5c6b77</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&#x27;books.length&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&#x27;(m,index) in books&#x27;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 隐藏的可以显示，但没有其他操作 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;td v-for=&#x27;value in item&#x27;&gt; &#123;&#123;value&#125;&#125;&lt;/td&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;m.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;m.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;m.data&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- toFixed(2)保留2位小数 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;td&gt;&#123;&#123;&#x27;￥&#x27;+m.price.toFixed(2)&#125;&#125;&lt;/td&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;td&gt;&#123;&#123;getFinalParice(m.price)&#125;&#125;&lt;/td&gt; --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 过滤器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;m.price | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 动态绑定disabled 小于0，不能点击 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;increment(index)&#x27;</span> <span class="attr">:disabled</span>=<span class="string">&quot;m.count &lt;= 0&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              &#123;&#123;m.count&#125;&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;decrement(index)&#x27;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">removeHandle(index)</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格:&#123;&#123;totalprice | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>购物车为空 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 引入文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">/* 用于挂载要管理的元素 */</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123; <span class="comment">/* 定义数据 */</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">books</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;&lt;算法导论&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: <span class="string">&#x27;2006-9&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">price</span>: <span class="number">85.00</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">count</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;&lt;编程艺术&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: <span class="string">&#x27;2006-9&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">price</span>: <span class="number">59.00</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">count</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;&lt;编程珠玑&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: <span class="string">&#x27;2006-9&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">price</span>: <span class="number">39.00</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">count</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">id</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;&lt;代码大全&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: <span class="string">&#x27;2006-9&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">price</span>: <span class="number">128</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">count</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">getFinalParice</span>(<span class="params">price</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">&quot;￥&quot;</span> + price.toFixed(<span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 点击加减</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">decrement</span>(<span class="params">index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.books[index].count++</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">increment</span>(<span class="params">index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.books[index].count--</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 移除属性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">removeHandle</span>(<span class="params">index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.books.splice(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 过滤器</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">showPrice</span>(<span class="params">price</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">&quot;￥&quot;</span> + price.toFixed(<span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计算属性（）,</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 计算总价格</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">totalprice</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 1普通for循环</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// let totalprice =0;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// for(let i=0; i &lt; this.books.length; i++)&#123;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   totalprice += this.books[i].price * this.books[i].count;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// return totalprice;</span></span></span><br><span class="line"><span class="javascript">          </span></span><br><span class="line"><span class="javascript">          <span class="comment">//2.for(let i in this.books)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// let totalprice =0;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// for(let i in this.books)&#123;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   const book = this.books[i]</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   totalprice += book.price * book.count</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// return totalprice</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 3for(let i of this.books)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// let totalprice =0;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// for(let item of this.books) &#123;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   totalprice += item.price * item.count</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// return totalprice;</span></span></span><br><span class="line"><span class="javascript">          </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">this</span>.books.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,book</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> prev + book.price * book.count</span></span><br><span class="line"><span class="javascript">          &#125;,<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[tag type=”danger” outline]回顾插值[/tag]<br>[collapse title=”剩余插值操作”]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;getClass()&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125; -----我可以修改<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; count &#125;&#125; ------ 我只渲染一次，不会修改<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-pre</span>&gt;</span> &#123;&#123;count&#125;&#125; --------- 我不会有解析<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数量改变  v-on  语法糖  @--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;inde&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn5&quot;</span>&gt;</span>一次加5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn6&quot;</span>&gt;</span>一次减5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;inde&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bind 语法糖 ： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>点击我去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止去百度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;two(10,$event)&quot;</span> <span class="attr">:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>我不能去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 颜色改变 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span> <span class="attr">class</span>=<span class="string">&quot;chs&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>点击更换颜色<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;(m,index) in list&quot;</span> </span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;clicks(index)&quot;</span>  </span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&#x27;indexs == index ?&quot;actives&quot;:&quot;&quot;&#x27;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        &#123;&#123;m&#125;&#125;-----&#123;&#123; index &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;mess&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;one&quot;</span>&gt;</span>&#123;&#123;messinfo&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- .stop 阻止该事件冒泡 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fa&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">      算法开发贷款撒赛德克发</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;sonClick&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- .prevent 修饰符使用 阻止提交--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;submClick&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 监听键盘的键帽 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只要输入就执行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keyup</span>=<span class="string">&quot;keyUp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只监听enter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;keyUp1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- once 该事件只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;btnOnce&quot;</span>&gt;</span>按钮once<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 颜色</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">isactive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">isline</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&quot;后面的内容不会显示&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// moives</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">list</span>: [<span class="string">&quot;我的世界&quot;</span>, <span class="string">&quot;钟离&quot;</span>, <span class="string">&quot;琴&quot;</span>, <span class="string">&quot;蜘蛛侠&quot;</span>, <span class="string">&quot;艾克&quot;</span>, <span class="string">&quot;阿斯蒂芬&quot;</span>],</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 默认下标</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">indexs</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">aHref</span>: <span class="string">&quot;https://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">imgUrl</span>:</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;https://img30.360buyimg.com/babel/s1180x940_jfs/t1/185487/25/2729/188978/609512cdE026eaa3e/873ee4de4f1e2a0c.jpg.webp&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">mess</span>: <span class="string">&quot;hello,world&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">messinfo</span>: <span class="string">&quot;逆转世界&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 方法属性</span></span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击改变</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.count++;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">inde</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.count--;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 颜色改变</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.isactive = !<span class="built_in">this</span>.isactive;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.isline = !<span class="built_in">this</span>.isline;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// class赋值</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getClass</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">active</span>: <span class="built_in">this</span>.isactive,</span></span><br><span class="line"><span class="javascript">        <span class="attr">line</span>: <span class="built_in">this</span>.isline,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 列表点击高亮</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">clicks</span>(<span class="params">index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(index);</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.indexs = index;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(this.indexs);</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 阻止去百度</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">two</span>(<span class="params">num, e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      e.preventDefault();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 逆转世界</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">one</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.mess = <span class="built_in">this</span>.mess.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">btn5</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.count += <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">btn6</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.count -= <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 事件冒泡</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">divClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;divclick&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">sonClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;sonclick&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">submClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;submclick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">keyUp</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;keyup&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">     <span class="function"><span class="title">keyUp1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       alert(<span class="string">&#x27;enter被点击&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">btnOnce</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;once执行一次&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.line</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: space-evenly;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.chs</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">370px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">1px</span> solid gold;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.actives</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: aqua;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#fa</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>[/collapse]<br>[tag type=”success” outline=”1”]v-model常用绑定[/tag]</p>
<ul>
<li>通过表单input绑定模型数据message，表单数据变化data.message也发生变化</li>
<li>然后通过Mustache表达式，将变化之后的message数据显示到视图页面上<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model1.png" alt="请输入图片描述"></li>
<li>效果<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model2.gif" alt="请输入图片描述"></li>
<li><strong>v-model实际上是一个语法糖，也就是简写，他实际上包含了两个操作：</strong></li>
<li>v-bind绑定value属性</li>
<li>v-on监听表单元素的输入事件，并改变数据</li>
<li>所以，下面的两种写法实现的效果是一致的。<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model3.png" alt="请输入图片描述"></li>
<li>第一种：input标签type=radio实现单选和type=checkbox实现的多选</li>
<li>第二种：select标签-option标签实现的单选与多选<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model4.png" alt="请输入图片描述"></li>
<li>使用radio实现单选，v-model绑定的数据应该是同一个，这样实现单选选项之间的互斥</li>
<li>使用checkbox实现多选，v-model绑定的数据应该是同一个，这样多选的数据才属于同一个数组<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model6.gif" alt="请输入图片描述"></li>
<li>怎样在单选或者多选选项显示，默认勾选一个或多个选项？只需要给定默认初始化数据即可<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model5.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model7.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model8.png" alt="请输入图片描述"></li>
<li>v-model绑定模型数据mvp，实现单选效果</li>
<li>v-model绑定模型数据allDefensiveTeam，结合multiple属性实现多选效果</li>
<li>多选选项的模型数据为数组类型</li>
<li>可以为单选及多选设置默认值，即：默认的勾选项<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model8.gif" alt="请输入图片描述"></li>
<li>v-model的修饰符<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model9.png" alt="请输入图片描述"></li>
<li>lazy修饰符：默认情况下，input输入会实时影响v-model绑定的数据</li>
<li>加上lazy修饰符，只有当输入框失去焦点会输入回车的时候，才会去改变v-model绑定的数据。</li>
<li>number修饰符：默认情况下，输入框中输入的无论是数字还是字母，都会被当做字符串处理。</li>
<li>加上number修饰符，输入内容会被当做数值类型处理。</li>
<li>trim修饰符：可以自动去掉输入内容左右两边的空格</li>
</ul>
<p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-model10.gif" alt="请输入图片描述"></p>
<ul>
<li><p>由上图可以看到，当第一个输入框失去焦点的时候，name：curry，才发生数据改变。</p>
</li>
<li><p>输入年龄31，被当作数值类型处理（默认输入是当作字符串类型。因为初始值为null，所以显示是object类型）</p>
</li>
<li><p>第三个输入框，输入内容前后都有空格，但是加上trim修饰符，就自动去掉了。</p>
</li>
<li><p><strong>v-model介绍原文作者字母哥博客</strong></p>
</li>
<li><p>原文地址：<a href="https://www.jb51.net/article/197689.htm">https://www.jb51.net/article/197689.htm</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- //输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeEvent&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- //显示层，后边加一个过滤器处理函数，把英文首字母变为大写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;viewContent | changeCapitalLetter&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-model实现的原理 双向绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&#x27;message&#x27;</span> @<span class="attr">input</span>=<span class="string">&#x27;valueChange&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&#x27;message&#x27;</span> @<span class="attr">input</span>=<span class="string">&#x27;message = $event.target.value&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--v-model结合radio  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定v-model，input中的name值可以省略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;sex&#x27;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;sex&#x27;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的性别是&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-model结合checkbox单选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;isAgree&#x27;</span>&gt;</span>同意协议</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的是&#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&#x27;!isAgree&#x27;</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- checkbox多选框 数组类型--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>    <span class="attr">v-model</span>=<span class="string">&#x27;hobbies&#x27;</span>&gt;</span>篮球</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>    <span class="attr">v-model</span>=<span class="string">&#x27;hobbies&#x27;</span>&gt;</span>游戏</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;听音乐&quot;</span>    <span class="attr">v-model</span>=<span class="string">&#x27;hobbies&#x27;</span>&gt;</span>听音乐</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;跑步&quot;</span>    <span class="attr">v-model</span>=<span class="string">&#x27;hobbies&#x27;</span>&gt;</span>跑步</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游泳&quot;</span>    <span class="attr">v-model</span>=<span class="string">&#x27;hobbies&#x27;</span>&gt;</span>游泳</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>    <span class="attr">v-model</span>=<span class="string">&#x27;hobbies&#x27;</span>&gt;</span>足球</span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好&#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- model 与 model  --&gt;</span></span><br><span class="line">      来自:</span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;from&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海1&quot;</span>&gt;</span>上海1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海2&quot;</span>&gt;</span>上海2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海3&quot;</span>&gt;</span>上海3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海4&quot;</span>&gt;</span>上海4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span>&gt;</span>您来自: &#123;&#123;from&#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">viewContent</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">content</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">message</span>:<span class="string">&#x27;第三季啦&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 性别 默认男</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 是否同意</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">isAgree</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 爱好</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">hobbies</span>:[],</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 来自</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">from</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeEvent</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.viewContent = <span class="built_in">this</span>.content;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 用户输入实时改变message的值</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">valueChange</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.message = event.target.value;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeCapitalLetter</span>(<span class="params">value</span>)</span> &#123;<span class="comment">//value是输入框的内容，也是要显示的内容</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (value) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> str = value.toString();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取英文，以空格分组把字符串转为数组，遍历每一项，第一项转为大写字母</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newArr = str.split(<span class="string">&quot; &quot;</span>).map(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> ele.charAt(<span class="number">0</span>).toUpperCase() + ele.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> newArr.join(<span class="string">&quot; &quot;</span>)  <span class="comment">//数组转字符串 以空格输出。。。</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>vue值绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 爱好 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in hobbies&#x27;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value</span>=<span class="string">&#x27;item&#x27;</span> <span class="attr">:id</span>=<span class="string">&#x27;item&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;hobby&#x27;</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span> 您的爱好是 &#123;&#123;hobby&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">     <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">       <span class="attr">hobbies</span>:[<span class="string">&#x27;篮球&#x27;</span>,<span class="string">&#x27;羽毛球&#x27;</span>,<span class="string">&#x27;足球&#x27;</span>,<span class="string">&#x27;原神&#x27;</span>,<span class="string">&#x27;台球&#x27;</span>,<span class="string">&#x27;睡觉&#x27;</span>,],</span></span><br><span class="line"><span class="javascript">       <span class="attr">hobby</span>:[<span class="string">&#x27;睡觉&#x27;</span>], <span class="comment">// 多选框  爱好</span></span></span><br><span class="line"><span class="javascript">     &#125;,</span></span><br><span class="line"><span class="javascript">     <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     &#125;,</span></span><br><span class="line"><span class="javascript">     <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">     &#125;,</span></span><br><span class="line"><span class="javascript">   &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<p>[tag]vue组件化[/tag]<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/vue-zu1.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zu2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zu3.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zu4.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zu5.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zu6.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zu7.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zus1.png" alt="请输入图片描述"><br>[collapse title=”vue组件化”]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- // 3、使用组件 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 局部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn3</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">my</span>&gt;</span><span class="tag">&lt;/<span class="name">my</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ms</span>&gt;</span><span class="tag">&lt;/<span class="name">ms</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cpns2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my2</span>&gt;</span><span class="tag">&lt;/<span class="name">my2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 组件必须在vue实列中才会有效果 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 局部 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;cpn&gt;&lt;/cpn&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- -------------------------------------- --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 抽离template --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpns1&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>模板抽离<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpns2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>模板抽离2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- -------------------------------- --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.创建组件构建器对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnc = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是内容，呃呃呃呃&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是内容，哈哈哈哈哈&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;/div&gt;`</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// </span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 局部组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;我是局部&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是局部，呃呃呃呃&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是局部，哈哈哈哈哈&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    `</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建第一个组件 (子组件)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn1 = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;梁露讷，爱喝奶茶&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h3&gt;爱磨牙，打呼噜&lt;/h3&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">     &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      </span></span></span><br><span class="line"><span class="string"><span class="javascript">      `</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建第二个··组件 （父组件）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn2 = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;cpn1&gt;&lt;/cpn1&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;我是子组件&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;子组件啊&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      `</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 组件1注册在cpn2下</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">cpn1</span>: cpn1</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.注册组件 (全局组件，意味着可以在多个Vue的实列下使用)</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>, cpnc)   <span class="comment">// 组件构造器 cpnc    使用组名名 my-cpn</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue语法糖 全局组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-cpn1&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;我是全局语法糖&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是内容，咿咿呀呀&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是内容，嘤嘤嘤&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      `</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// -----------------------------------------------</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 模板抽离</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>:<span class="string">&#x27;#cpns1&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"> <span class="comment">// 全局组件 数据存放</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;ms&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>:<span class="string">&#x27;#ms1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">titles</span>:<span class="string">&#x27;abs&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// -------------------------</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 局部组件</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// cpn使用组件的标签名</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">cpn</span>: cpnC,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 子组件</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">cpn2</span>:cpn2,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 子组件语法糖</span></span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;cpn3&#x27;</span>:&#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">template</span>:</span></span><br><span class="line"><span class="javascript">          <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">          &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;h2&gt;我是局部语法糖&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是局部，咿咿呀呀&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">      &lt;p&gt;我是局部，嘤嘤嘤&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">          `</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;my2&#x27;</span>:&#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">template</span>:<span class="string">&#x27;#cpns2&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 实列2</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app1&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[/collapse]<br>[tag type=”primary”]vue的通信[/tag]<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zs1.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zs2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zs3.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zs4.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/zs5.png" alt="请输入图片描述"><br>[collapse title=”组件中的函数问题”]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组件实列 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父传子 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;cpn&gt;&lt;/cpn&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span> <span class="attr">:cmovies</span>=<span class="string">&#x27;movies&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是组件</span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;increment&#x27;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;decrement&#x27;</span> <span class="attr">:disabled</span>=<span class="string">&#x27;count &lt;= 0&#x27;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpns&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;m in cmovies&#x27;</span>&gt;</span> &#123;&#123;m&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件全局</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">&#x27;#my&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// data必须是函数对象，多次调用数据互不影响</span></span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">      <span class="comment">// 方法</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.count++</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.count--</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">     </span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 父传子 props</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn1 = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>:<span class="string">&#x27;#cpns&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">props</span>: [<span class="string">&#x27;cmovies&#x27;</span>],</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ---------------------------------</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">movies</span>:[<span class="string">&#x27;事件&#x27;</span>,<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;外网&#x27;</span>,<span class="string">&#x27;暗网&#x27;</span>]</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">        cpn1</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[/collapse]<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-s1.png" alt="请输入图片描述"><br>[collapse title=”父传子2”]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里把data中的数据，传递过来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:cinfo</span>=<span class="string">&#x27;info&#x27;</span> <span class="attr">:child-my-message</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ------------------------- --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父传子模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板之中只能有一个父级元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cinfo&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(value,key,index) in cinfo&#x27;</span>&gt;</span>&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;---&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;childMyMessage&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ----------------------- --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 传入template id</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义cinfo 属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  cInfo 不支持驼峰命名</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">cinfo</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 类型  </span></span></span><br><span class="line"><span class="javascript">          <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 默认必须是函数 ，数组，对象时</span></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 驼峰命名</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">childMyMessage</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">type</span>:<span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">dafault</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ------------------------</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">height</span>: <span class="number">1.87</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">message</span>:<span class="string">&#x27;驼峰命名，--连接&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">        cpn</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[/collapse]</p>
<hr>
<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><p><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-s2.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-s3.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-s4.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-s5.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-s6.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-s7.png" alt="请输入图片描述"><br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/v-s8.png" alt="请输入图片描述"><br>[collapse title=”子传父”]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里把子组件中的数据，传递过来 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 脚手架可以写驼峰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">item-click</span>=<span class="string">&#x27;cpnClick&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ------------------------- --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板之中只能有一个父级元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in categories&#x27;</span> @<span class="attr">click</span>=<span class="string">&#x27;btnClick(item)&#x27;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.name&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ----------------------- --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 传入template id</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">categories</span>: [</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;热门推荐&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;手机数码&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;家具家电&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">id</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;电脑办公&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">          ]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// methods 方法</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">btnClick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(item.id);</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(item.name);</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 发射 $emit(自定义事件)  itemClick 自定义事件名称  item 传递的参数</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//  子传父</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;item-click&#x27;</span>,item)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ------------------------</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">height</span>: <span class="number">1.87</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">message</span>: <span class="string">&#x27;驼峰命名，--连接&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">cpnClick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;cpnClick&#x27;</span>,item);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(item.id);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(item.name);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">        cpn</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[/collapse]<br>[tag type=”info”]组件通信脚手架强化[/tag]<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/math.gif" alt="请输入图片描述"><br>[tabs]</p>
<p>[tab title=”App.vue”]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subject</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;(m, index) in list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:sum1</span>=<span class="string">&quot;m.sum1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:sum2</span>=<span class="string">&quot;m.sum2&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">subject</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">flag</span> <span class="attr">:list</span>=<span class="string">&quot;list&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flags&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">flag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showList&quot;</span>&gt;</span>再来一题<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 引入subject ,flag 组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> subject <span class="keyword">from</span> <span class="string">&quot;./components/subject.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> flag <span class="keyword">from</span> <span class="string">&quot;./components/flag.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">list</span>: [</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum1</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum2</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">status</span>: <span class="string">&quot;未完成&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">bool</span>: <span class="string">&quot;true&quot;</span>,  <span class="comment">// 正确答案状态</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">err</span>: <span class="string">&quot;false&quot;</span>,  <span class="comment">// 错误答案状态</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">do</span>: <span class="string">&quot;true&quot;</span>,  <span class="comment">// 未完成状态  默认未true</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum1</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum2</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">status</span>: <span class="string">&quot;未完成&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">bool</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">err</span>: <span class="string">&quot;false&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">do</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum1</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum2</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">status</span>: <span class="string">&quot;未完成&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">bool</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">err</span>: <span class="string">&quot;false&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">do</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum1</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum2</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">status</span>: <span class="string">&quot;未完成&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">bool</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">err</span>: <span class="string">&quot;false&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">do</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum1</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">sum2</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">id</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">status</span>: <span class="string">&quot;未完成&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">bool</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">err</span>: <span class="string">&quot;false&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">do</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      ],</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 组件</span></span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    subject,</span></span><br><span class="line"><span class="javascript">    flag,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">showList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.list.push(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">sum1</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">sum2</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">id</span>: <span class="built_in">this</span>.list.length == <span class="number">0</span> ? <span class="number">1</span> : <span class="built_in">this</span>.list[<span class="built_in">this</span>.list.length - <span class="number">1</span>].id + <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">status</span>: <span class="string">&quot;未完成&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">bool</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">err</span>: <span class="string">&quot;false&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">do</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="css">  <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.flags</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[/tab]</p>
<p>[tab title=”compoents-subject.vue”]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;subject&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; sum1 &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;+&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; sum2 &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;=&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;number&quot; v-model=&quot;lastSum&quot;/&gt;</span><br><span class="line">      &lt;button @click=&quot;btn&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import event from &#x27;../EventBus/index.js&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      lastSum: &quot;&quot;,</span><br><span class="line">      idnex:0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [&quot;sum1&quot;, &quot;sum2&quot;, &quot;index&quot;, &quot;list&quot;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn()&#123;</span><br><span class="line">      // 判断是否输入值</span><br><span class="line">      if(this.lastSum == &#x27;&#x27;)&#123;</span><br><span class="line">        alert(&#x27;请填写答案&#x27;)</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      event.$emit(&#x27;send&#x27;,this.index,this.lastSum);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.subject &#123;</span><br><span class="line">  margin: 5px;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.subject span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  text-align: center;</span><br><span class="line">  width: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.subject input &#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>[/tab]</p>
<p>[tab title=”components-flag.vue”]</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;m in dlist&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; right: m.bool, error: m.err, undo: m.do &#125;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>&#123;&#123; m.id &#125;&#125;: &#123;&#123; m.status &#125;&#125;&lt;/span</span><br><span class="line">      &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 传递eventbus</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> event <span class="keyword">from</span> <span class="string">&quot;../EventBus&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">dlist</span>: <span class="built_in">this</span>.list, <span class="comment">// 重新定义数据</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">dsum</span>: <span class="string">&quot;&quot;</span>, <span class="comment">//正确的值</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;index&quot;</span>, <span class="string">&quot;list&quot;</span>],</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    event.$on(<span class="string">&quot;send&quot;</span>, <span class="function">(<span class="params">index, value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(index, <span class="string">&quot;----------index&quot;</span>); <span class="comment">// 下标</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(value, <span class="string">&quot;------------value&quot;</span>); <span class="comment">// v-model 传递的值</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.dsum = <span class="built_in">this</span>.dlist[index].sum1 * <span class="number">1</span> + <span class="built_in">this</span>.dlist[index].sum2 * <span class="number">1</span>; <span class="comment">// 正确的值</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 和 dsum   index下标  value 传递的值</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (value == <span class="built_in">this</span>.dsum) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.dlist[index].status = <span class="string">&quot;正确&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.dlist[index].bool = <span class="literal">true</span>; <span class="comment">//修改当前正确的状态</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.dlist[index].err = <span class="literal">false</span>; <span class="comment">//错误</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.dlist[index].do = <span class="literal">false</span>; <span class="comment">// 未完成</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value != <span class="built_in">this</span>.dsum) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.dlist[index].status = <span class="string">&quot;错误&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.dlist[index].bool = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.dlist[index].err = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.dlist[index].do = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.error</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.undo</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>[/tab]</p>
<p>[tab title=”EventBus-index.js”]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure>
<p>[/tab]</p>
<p>[/tabs]<br><img src="https://freelaeder.cn//usr/themes/Mirages/images/default/img/nav.png" alt="请输入图片描述"></p>
<h3 id="1、Vue-的-nextTick-的原理是什么"><a href="#1、Vue-的-nextTick-的原理是什么" class="headerlink" title="1、Vue 的 nextTick 的原理是什么?"></a>1、Vue 的 nextTick 的原理是什么?</h3><p>​    \1. 为什么需要 nextTick ，Vue 是异步修改 DOM 的并且不鼓励开发者直接接触 DOM，但有时候业务需要必须对数据更改–刷新后的 DOM 做相应的处理，这时候就可以使用 Vue.nextTick(callback)这个 api 了。</p>
<p>​    \2. 理解原理前的准备 首先需要知道事件循环中宏任务和微任务这两个概念,常见的宏任务有 script, setTimeout, setInterval, setImmediate, I/O, UI rendering 常见的微任务有 process.nextTick(Nodejs),Promise.then(), MutationObserver;</p>
<p>​    \3. 理解 nextTick 的原理正是 vue 通过异步队列控制 DOM 更新和 nextTick 回调函数先后执行的方式。如果大家看过这部分的源码，会发现其中做了很多 isNative()的判断，因为这里还存在兼容性优雅降级的问题。可见 Vue 开发团队的深思熟虑，对性能的良苦用心。</p>
<h3 id="2、vue生命周期总共分为几个阶段？（必会）"><a href="#2、vue生命周期总共分为几个阶段？（必会）" class="headerlink" title="2、vue生命周期总共分为几个阶段？（必会）"></a>2、vue生命周期总共分为几个阶段？（必会）</h3><p>   Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p>
<p><strong>1****）beforeCreate</strong></p>
<p>​    在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>
<p><strong>2****）created</strong></p>
<p>​    在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)， 属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>
<p><strong>3****）beforeMount</strong></p>
<p>​    在挂载开始之前被调用：相关的 render 函数首次被调用。</p>
<p><strong>4****）mounted</strong></p>
<p>​    el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p>
<p><strong>5****）beforeUpdate</strong></p>
<p>​    数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p>
<p><strong>6****）updated</strong></p>
<p>​    由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>
<p><strong>7****）activated</strong></p>
<p>​    keep-alive 组件激活时调用。该钩子在服务器端渲染期间不被调用。</p>
<p><strong>8****）deactivated</strong></p>
<p>​    keep-alive 组件停用时调用。该钩子在服务器端渲染期间不被调用。</p>
<p><strong>9****）beforeDestroy</strong></p>
<p>​    实例销毁之前调用。在这一步，实例仍然完全可用。该钩子在服务器端渲染期间不被调用。</p>
<p><strong>10****）destroyed</strong></p>
<p>​    Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>
<p><strong>11****）errorCaptured（2.5.0+ 新增）</strong></p>
<p>​    当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p>
<h3 id="3、第一次加载页面会触发哪几个钩子函数？（必会）"><a href="#3、第一次加载页面会触发哪几个钩子函数？（必会）" class="headerlink" title="3、第一次加载页面会触发哪几个钩子函数？（必会）"></a>3、第一次加载页面会触发哪几个钩子函数？（必会）</h3><p>   当页面第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子函数</p>
<hr>
<p>[tag type=”success”]vue简答题[/tag]</p>
<h2 id="✳vue中的data为什么是一个函数"><a href="#✳vue中的data为什么是一个函数" class="headerlink" title="✳vue中的data为什么是一个函数"></a>✳vue中的data为什么是一个函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">组件中的 data 写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的 data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份 data，就会造成一个变了全都会变的结果</span><br><span class="line"></span><br><span class="line">得分关键点：各个组件实例维护各自的数据</span><br></pre></td></tr></table></figure>

<h2 id="✳目前学过的vue组件通信有哪几种方式，分别是如何实现的"><a href="#✳目前学过的vue组件通信有哪几种方式，分别是如何实现的" class="headerlink" title="✳目前学过的vue组件通信有哪几种方式，分别是如何实现的"></a>✳目前学过的vue组件通信有哪几种方式，分别是如何实现的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三种：</span><br><span class="line">1. 父子通信</span><br><span class="line">	    通过props实现的，父组件向子组件传递数据, 子组件通过 prop接受父组件传递的数据</span><br><span class="line">2. 子父同信</span><br><span class="line">		通过给子组件传递自定义事件，在子组件用使用this.$emit去触发父组件传递的自定义事件，完成子组件向父组件通信</span><br><span class="line">3. 兄弟组件通信</span><br><span class="line">		通过事件总线实现的， 原理就是创建一个vue实例，这个Vue实例，主要负责发布订阅功能，在需要修改数据的组件中，Eventbus.$on订阅事件，在需要触发事件的组件中使用EventBus.$emit(‘事件名称’)触发事件，完成兄弟组件通信</span><br></pre></td></tr></table></figure>

<h2 id="✳Vue的生命周期方法有几大阶段，每个阶段分别有哪些钩子函数-每个钩子函数可以做哪些事情，一般在哪一步发送请求？"><a href="#✳Vue的生命周期方法有几大阶段，每个阶段分别有哪些钩子函数-每个钩子函数可以做哪些事情，一般在哪一步发送请求？" class="headerlink" title="✳Vue的生命周期方法有几大阶段，每个阶段分别有哪些钩子函数,每个钩子函数可以做哪些事情，一般在哪一步发送请求？"></a>✳Vue的生命周期方法有几大阶段，每个阶段分别有哪些钩子函数,每个钩子函数可以做哪些事情，一般在哪一步发送请求？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">四大阶段：</span><br><span class="line">1. 创建/初始化阶段</span><br><span class="line">beforeCreate 。</span><br><span class="line">		在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问</span><br><span class="line">created     </span><br><span class="line">		在当前阶段可以访问data中变量,method中的方法, 但是无法访问页面真实dom, 如果非要想与 Dom 进行交互，可以通过 vm.$nextTick 来访问 Dom</span><br><span class="line">2. 挂载阶段</span><br><span class="line">beforeMount。</span><br><span class="line">	    在当前阶段dom在内存中已经生成，但是还没有渲染到浏览器页面上</span><br><span class="line">mounted </span><br><span class="line">		在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom 节点</span><br><span class="line">3. 更新阶段</span><br><span class="line">beforeUpdate</span><br><span class="line">		 数据更新后，更新后的数据已经在内存中已经生成dom，但是还没有渲染到浏览器页面上</span><br><span class="line">updated </span><br><span class="line">		发生在更新完成之后，当前阶段组件 Dom 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新，该钩子在服务器端渲染期间不被调用。</span><br><span class="line">4. 销毁阶段</span><br><span class="line">		beforeDestroy </span><br><span class="line">			实例销毁之前调用。在这一步，实例仍然完全可用。我们可以在这时进行善后收尾工作，比如清除计时器。</span><br><span class="line">		destroyed </span><br><span class="line">			Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</span><br><span class="line"></span><br><span class="line">异步请求在哪一步发起？</span><br><span class="line">可以在钩子函数 created、beforeMount、mounted 中进行异步请求，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。</span><br><span class="line">如果异步请求不需要依赖 Dom 推荐在 created 钩子函数中调用异步请求, 否则，在mounted中发起异步请求</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="✳v-if-和-v-show-的区别和使用场景"><a href="#✳v-if-和-v-show-的区别和使用场景" class="headerlink" title="✳v-if 和 v-show 的区别和使用场景"></a>✳v-if 和 v-show 的区别和使用场景</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、v-if 可以搭配 template 使用，而 v-show 不行</span><br><span class="line">2、v-if 有配套的 v-else-if 和 v-else，而 v-show 没有</span><br><span class="line">3、v-show 只是简单的控制元素的 display 属性，而 v-if 才是条件渲染（条件为真，元素将会被渲染，条件为假，元素会被销毁）</span><br><span class="line">使用场景：</span><br><span class="line">v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景</span><br><span class="line">v-show 适用于需要非常频繁切换条件的场景</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="✳说说常用vue的内置指令，至少4个"><a href="#✳说说常用vue的内置指令，至少4个" class="headerlink" title="✳说说常用vue的内置指令，至少4个"></a>✳说说常用vue的内置指令，至少4个</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v-once(定义它的元素或组件只渲染一次)、</span><br><span class="line">v-bind(绑定属性)</span><br><span class="line">v-on(用于监听DOM事件)</span><br><span class="line">v-html(更新元素的 innerHTML)</span><br><span class="line">v-text(更新元素的textContent)</span><br><span class="line">v-model(表单控件或者组件上创建双向绑定)</span><br><span class="line">v-if/v-else/v-else-if(条件渲染，可以配合template来使用)</span><br><span class="line">v-show(控制显示隐藏，最终通过display)</span><br><span class="line">v-for(循环指令，比v-if优先级高)</span><br><span class="line">v-pre(跳过这个元素以及子元素的编译过程)</span><br></pre></td></tr></table></figure>



<h2 id="✳怎么样理解Vue的单向数据流"><a href="#✳怎么样理解Vue的单向数据流" class="headerlink" title="✳怎么样理解Vue的单向数据流"></a>✳怎么样理解Vue的单向数据流</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</span><br><span class="line">如果实在要改变父组件的 prop 值 可以再 data 里面定义一个变量 并用 prop 的值初始化它 之后用$emit 通知父组件去修改</span><br></pre></td></tr></table></figure>

<h2 id="✳v-if-与-v-for-为什么不建议一起使用"><a href="#✳v-if-与-v-for-为什么不建议一起使用" class="headerlink" title="✳v-if 与 v-for 为什么不建议一起使用"></a>✳v-if 与 v-for 为什么不建议一起使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v-for 和 v-if 不要在同一个标签中使用,因为解析时先解析 v-for 再解析 v-if。如果遇到需要同时使用时可以考虑写成计算属性的方式。</span><br></pre></td></tr></table></figure>



<h2 id="✳computed-和-watch-的区别和运用的场景"><a href="#✳computed-和-watch-的区别和运用的场景" class="headerlink" title="✳computed 和 watch 的区别和运用的场景"></a>✳computed 和 watch 的区别和运用的场景</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed 是计算属性，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容，它可以设置 getter 和 setter。</span><br><span class="line">watch 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。</span><br><span class="line">计算属性一般用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑</span><br></pre></td></tr></table></figure>

<h2 id="✳什么是匿名插槽、具名插槽和作用域插槽"><a href="#✳什么是匿名插槽、具名插槽和作用域插槽" class="headerlink" title="✳什么是匿名插槽、具名插槽和作用域插槽"></a>✳什么是匿名插槽、具名插槽和作用域插槽</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">匿名插槽，我们也可以叫它单个插槽或者默认插槽。和具名插槽相对，它是不需要设置 name 属性的，它隐藏的name属性为default。</span><br><span class="line">具名插槽,顾名思义就是slot 是带有name的 ，定义： 或者使用简单缩写的定义 #header 使用：要用一个 template标签包裹。</span><br><span class="line">作用域插槽就是让插槽内容能够访问子组件中才有的数据。</span><br></pre></td></tr></table></figure>

<h2 id="✳-Vue中-key作用-为什么不能用索引"><a href="#✳-Vue中-key作用-为什么不能用索引" class="headerlink" title="✳ Vue中:key作用, 为什么不能用索引"></a>✳ Vue中:key作用, 为什么不能用索引</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:key是给v-for循环生成标签颁发唯一标识的, 用于性能的优化</span><br><span class="line"></span><br><span class="line">因为v-for数据项的顺序改变，Vue 也不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素</span><br><span class="line"></span><br><span class="line">:key如果是索引, 因为索引是连续的, 如果删除其中某一个, 会导致最后一个被删除</span><br><span class="line"></span><br><span class="line">当我们再删除的时候, :key再根据数据来把新旧的dom对比时, 删除:key不存在的对应的标签(添加也是一样的插入到指定位置, 别的都不会动)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
